
NUCLEO_F446RE_Connect_with_Raspberry_pi5_I2C_Protocal.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000001c4  08000000  08000000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         0000771c  080001d0  080001d0  000011d0  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000098  080078ec  080078ec  000088ec  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08007984  08007984  00009060  2**0
                  CONTENTS
  4 .ARM          00000008  08007984  08007984  00008984  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  0800798c  0800798c  00009060  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  0800798c  0800798c  0000898c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  7 .fini_array   00000004  08007990  08007990  00008990  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  8 .data         00000060  20000000  08007994  00009000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          0000424c  20000060  080079f4  00009060  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  200042ac  080079f4  000092ac  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  00009060  2**0
                  CONTENTS, READONLY
 12 .debug_info   000159cc  00000000  00000000  00009090  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 0000325a  00000000  00000000  0001ea5c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00001350  00000000  00000000  00021cb8  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_rnglists 00000f0d  00000000  00000000  00023008  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  000237ef  00000000  00000000  00023f15  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   0001773c  00000000  00000000  00047704  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    000d9a96  00000000  00000000  0005ee40  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000043  00000000  00000000  001388d6  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00005424  00000000  00000000  0013891c  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 0000007b  00000000  00000000  0013dd40  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080001d0 <__do_global_dtors_aux>:
 80001d0:	b510      	push	{r4, lr}
 80001d2:	4c05      	ldr	r4, [pc, #20]	@ (80001e8 <__do_global_dtors_aux+0x18>)
 80001d4:	7823      	ldrb	r3, [r4, #0]
 80001d6:	b933      	cbnz	r3, 80001e6 <__do_global_dtors_aux+0x16>
 80001d8:	4b04      	ldr	r3, [pc, #16]	@ (80001ec <__do_global_dtors_aux+0x1c>)
 80001da:	b113      	cbz	r3, 80001e2 <__do_global_dtors_aux+0x12>
 80001dc:	4804      	ldr	r0, [pc, #16]	@ (80001f0 <__do_global_dtors_aux+0x20>)
 80001de:	f3af 8000 	nop.w
 80001e2:	2301      	movs	r3, #1
 80001e4:	7023      	strb	r3, [r4, #0]
 80001e6:	bd10      	pop	{r4, pc}
 80001e8:	20000060 	.word	0x20000060
 80001ec:	00000000 	.word	0x00000000
 80001f0:	080078d4 	.word	0x080078d4

080001f4 <frame_dummy>:
 80001f4:	b508      	push	{r3, lr}
 80001f6:	4b03      	ldr	r3, [pc, #12]	@ (8000204 <frame_dummy+0x10>)
 80001f8:	b11b      	cbz	r3, 8000202 <frame_dummy+0xe>
 80001fa:	4903      	ldr	r1, [pc, #12]	@ (8000208 <frame_dummy+0x14>)
 80001fc:	4803      	ldr	r0, [pc, #12]	@ (800020c <frame_dummy+0x18>)
 80001fe:	f3af 8000 	nop.w
 8000202:	bd08      	pop	{r3, pc}
 8000204:	00000000 	.word	0x00000000
 8000208:	20000064 	.word	0x20000064
 800020c:	080078d4 	.word	0x080078d4

08000210 <__aeabi_uldivmod>:
 8000210:	b953      	cbnz	r3, 8000228 <__aeabi_uldivmod+0x18>
 8000212:	b94a      	cbnz	r2, 8000228 <__aeabi_uldivmod+0x18>
 8000214:	2900      	cmp	r1, #0
 8000216:	bf08      	it	eq
 8000218:	2800      	cmpeq	r0, #0
 800021a:	bf1c      	itt	ne
 800021c:	f04f 31ff 	movne.w	r1, #4294967295
 8000220:	f04f 30ff 	movne.w	r0, #4294967295
 8000224:	f000 b96a 	b.w	80004fc <__aeabi_idiv0>
 8000228:	f1ad 0c08 	sub.w	ip, sp, #8
 800022c:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000230:	f000 f806 	bl	8000240 <__udivmoddi4>
 8000234:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000238:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 800023c:	b004      	add	sp, #16
 800023e:	4770      	bx	lr

08000240 <__udivmoddi4>:
 8000240:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000244:	9d08      	ldr	r5, [sp, #32]
 8000246:	460c      	mov	r4, r1
 8000248:	2b00      	cmp	r3, #0
 800024a:	d14e      	bne.n	80002ea <__udivmoddi4+0xaa>
 800024c:	4694      	mov	ip, r2
 800024e:	458c      	cmp	ip, r1
 8000250:	4686      	mov	lr, r0
 8000252:	fab2 f282 	clz	r2, r2
 8000256:	d962      	bls.n	800031e <__udivmoddi4+0xde>
 8000258:	b14a      	cbz	r2, 800026e <__udivmoddi4+0x2e>
 800025a:	f1c2 0320 	rsb	r3, r2, #32
 800025e:	4091      	lsls	r1, r2
 8000260:	fa20 f303 	lsr.w	r3, r0, r3
 8000264:	fa0c fc02 	lsl.w	ip, ip, r2
 8000268:	4319      	orrs	r1, r3
 800026a:	fa00 fe02 	lsl.w	lr, r0, r2
 800026e:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000272:	fa1f f68c 	uxth.w	r6, ip
 8000276:	fbb1 f4f7 	udiv	r4, r1, r7
 800027a:	ea4f 431e 	mov.w	r3, lr, lsr #16
 800027e:	fb07 1114 	mls	r1, r7, r4, r1
 8000282:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000286:	fb04 f106 	mul.w	r1, r4, r6
 800028a:	4299      	cmp	r1, r3
 800028c:	d90a      	bls.n	80002a4 <__udivmoddi4+0x64>
 800028e:	eb1c 0303 	adds.w	r3, ip, r3
 8000292:	f104 30ff 	add.w	r0, r4, #4294967295
 8000296:	f080 8112 	bcs.w	80004be <__udivmoddi4+0x27e>
 800029a:	4299      	cmp	r1, r3
 800029c:	f240 810f 	bls.w	80004be <__udivmoddi4+0x27e>
 80002a0:	3c02      	subs	r4, #2
 80002a2:	4463      	add	r3, ip
 80002a4:	1a59      	subs	r1, r3, r1
 80002a6:	fa1f f38e 	uxth.w	r3, lr
 80002aa:	fbb1 f0f7 	udiv	r0, r1, r7
 80002ae:	fb07 1110 	mls	r1, r7, r0, r1
 80002b2:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 80002b6:	fb00 f606 	mul.w	r6, r0, r6
 80002ba:	429e      	cmp	r6, r3
 80002bc:	d90a      	bls.n	80002d4 <__udivmoddi4+0x94>
 80002be:	eb1c 0303 	adds.w	r3, ip, r3
 80002c2:	f100 31ff 	add.w	r1, r0, #4294967295
 80002c6:	f080 80fc 	bcs.w	80004c2 <__udivmoddi4+0x282>
 80002ca:	429e      	cmp	r6, r3
 80002cc:	f240 80f9 	bls.w	80004c2 <__udivmoddi4+0x282>
 80002d0:	4463      	add	r3, ip
 80002d2:	3802      	subs	r0, #2
 80002d4:	1b9b      	subs	r3, r3, r6
 80002d6:	ea40 4004 	orr.w	r0, r0, r4, lsl #16
 80002da:	2100      	movs	r1, #0
 80002dc:	b11d      	cbz	r5, 80002e6 <__udivmoddi4+0xa6>
 80002de:	40d3      	lsrs	r3, r2
 80002e0:	2200      	movs	r2, #0
 80002e2:	e9c5 3200 	strd	r3, r2, [r5]
 80002e6:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80002ea:	428b      	cmp	r3, r1
 80002ec:	d905      	bls.n	80002fa <__udivmoddi4+0xba>
 80002ee:	b10d      	cbz	r5, 80002f4 <__udivmoddi4+0xb4>
 80002f0:	e9c5 0100 	strd	r0, r1, [r5]
 80002f4:	2100      	movs	r1, #0
 80002f6:	4608      	mov	r0, r1
 80002f8:	e7f5      	b.n	80002e6 <__udivmoddi4+0xa6>
 80002fa:	fab3 f183 	clz	r1, r3
 80002fe:	2900      	cmp	r1, #0
 8000300:	d146      	bne.n	8000390 <__udivmoddi4+0x150>
 8000302:	42a3      	cmp	r3, r4
 8000304:	d302      	bcc.n	800030c <__udivmoddi4+0xcc>
 8000306:	4290      	cmp	r0, r2
 8000308:	f0c0 80f0 	bcc.w	80004ec <__udivmoddi4+0x2ac>
 800030c:	1a86      	subs	r6, r0, r2
 800030e:	eb64 0303 	sbc.w	r3, r4, r3
 8000312:	2001      	movs	r0, #1
 8000314:	2d00      	cmp	r5, #0
 8000316:	d0e6      	beq.n	80002e6 <__udivmoddi4+0xa6>
 8000318:	e9c5 6300 	strd	r6, r3, [r5]
 800031c:	e7e3      	b.n	80002e6 <__udivmoddi4+0xa6>
 800031e:	2a00      	cmp	r2, #0
 8000320:	f040 8090 	bne.w	8000444 <__udivmoddi4+0x204>
 8000324:	eba1 040c 	sub.w	r4, r1, ip
 8000328:	ea4f 481c 	mov.w	r8, ip, lsr #16
 800032c:	fa1f f78c 	uxth.w	r7, ip
 8000330:	2101      	movs	r1, #1
 8000332:	fbb4 f6f8 	udiv	r6, r4, r8
 8000336:	ea4f 431e 	mov.w	r3, lr, lsr #16
 800033a:	fb08 4416 	mls	r4, r8, r6, r4
 800033e:	ea43 4304 	orr.w	r3, r3, r4, lsl #16
 8000342:	fb07 f006 	mul.w	r0, r7, r6
 8000346:	4298      	cmp	r0, r3
 8000348:	d908      	bls.n	800035c <__udivmoddi4+0x11c>
 800034a:	eb1c 0303 	adds.w	r3, ip, r3
 800034e:	f106 34ff 	add.w	r4, r6, #4294967295
 8000352:	d202      	bcs.n	800035a <__udivmoddi4+0x11a>
 8000354:	4298      	cmp	r0, r3
 8000356:	f200 80cd 	bhi.w	80004f4 <__udivmoddi4+0x2b4>
 800035a:	4626      	mov	r6, r4
 800035c:	1a1c      	subs	r4, r3, r0
 800035e:	fa1f f38e 	uxth.w	r3, lr
 8000362:	fbb4 f0f8 	udiv	r0, r4, r8
 8000366:	fb08 4410 	mls	r4, r8, r0, r4
 800036a:	ea43 4304 	orr.w	r3, r3, r4, lsl #16
 800036e:	fb00 f707 	mul.w	r7, r0, r7
 8000372:	429f      	cmp	r7, r3
 8000374:	d908      	bls.n	8000388 <__udivmoddi4+0x148>
 8000376:	eb1c 0303 	adds.w	r3, ip, r3
 800037a:	f100 34ff 	add.w	r4, r0, #4294967295
 800037e:	d202      	bcs.n	8000386 <__udivmoddi4+0x146>
 8000380:	429f      	cmp	r7, r3
 8000382:	f200 80b0 	bhi.w	80004e6 <__udivmoddi4+0x2a6>
 8000386:	4620      	mov	r0, r4
 8000388:	1bdb      	subs	r3, r3, r7
 800038a:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 800038e:	e7a5      	b.n	80002dc <__udivmoddi4+0x9c>
 8000390:	f1c1 0620 	rsb	r6, r1, #32
 8000394:	408b      	lsls	r3, r1
 8000396:	fa22 f706 	lsr.w	r7, r2, r6
 800039a:	431f      	orrs	r7, r3
 800039c:	fa20 fc06 	lsr.w	ip, r0, r6
 80003a0:	fa04 f301 	lsl.w	r3, r4, r1
 80003a4:	ea43 030c 	orr.w	r3, r3, ip
 80003a8:	40f4      	lsrs	r4, r6
 80003aa:	fa00 f801 	lsl.w	r8, r0, r1
 80003ae:	0c38      	lsrs	r0, r7, #16
 80003b0:	ea4f 4913 	mov.w	r9, r3, lsr #16
 80003b4:	fbb4 fef0 	udiv	lr, r4, r0
 80003b8:	fa1f fc87 	uxth.w	ip, r7
 80003bc:	fb00 441e 	mls	r4, r0, lr, r4
 80003c0:	ea49 4404 	orr.w	r4, r9, r4, lsl #16
 80003c4:	fb0e f90c 	mul.w	r9, lr, ip
 80003c8:	45a1      	cmp	r9, r4
 80003ca:	fa02 f201 	lsl.w	r2, r2, r1
 80003ce:	d90a      	bls.n	80003e6 <__udivmoddi4+0x1a6>
 80003d0:	193c      	adds	r4, r7, r4
 80003d2:	f10e 3aff 	add.w	sl, lr, #4294967295
 80003d6:	f080 8084 	bcs.w	80004e2 <__udivmoddi4+0x2a2>
 80003da:	45a1      	cmp	r9, r4
 80003dc:	f240 8081 	bls.w	80004e2 <__udivmoddi4+0x2a2>
 80003e0:	f1ae 0e02 	sub.w	lr, lr, #2
 80003e4:	443c      	add	r4, r7
 80003e6:	eba4 0409 	sub.w	r4, r4, r9
 80003ea:	fa1f f983 	uxth.w	r9, r3
 80003ee:	fbb4 f3f0 	udiv	r3, r4, r0
 80003f2:	fb00 4413 	mls	r4, r0, r3, r4
 80003f6:	ea49 4404 	orr.w	r4, r9, r4, lsl #16
 80003fa:	fb03 fc0c 	mul.w	ip, r3, ip
 80003fe:	45a4      	cmp	ip, r4
 8000400:	d907      	bls.n	8000412 <__udivmoddi4+0x1d2>
 8000402:	193c      	adds	r4, r7, r4
 8000404:	f103 30ff 	add.w	r0, r3, #4294967295
 8000408:	d267      	bcs.n	80004da <__udivmoddi4+0x29a>
 800040a:	45a4      	cmp	ip, r4
 800040c:	d965      	bls.n	80004da <__udivmoddi4+0x29a>
 800040e:	3b02      	subs	r3, #2
 8000410:	443c      	add	r4, r7
 8000412:	ea43 400e 	orr.w	r0, r3, lr, lsl #16
 8000416:	fba0 9302 	umull	r9, r3, r0, r2
 800041a:	eba4 040c 	sub.w	r4, r4, ip
 800041e:	429c      	cmp	r4, r3
 8000420:	46ce      	mov	lr, r9
 8000422:	469c      	mov	ip, r3
 8000424:	d351      	bcc.n	80004ca <__udivmoddi4+0x28a>
 8000426:	d04e      	beq.n	80004c6 <__udivmoddi4+0x286>
 8000428:	b155      	cbz	r5, 8000440 <__udivmoddi4+0x200>
 800042a:	ebb8 030e 	subs.w	r3, r8, lr
 800042e:	eb64 040c 	sbc.w	r4, r4, ip
 8000432:	fa04 f606 	lsl.w	r6, r4, r6
 8000436:	40cb      	lsrs	r3, r1
 8000438:	431e      	orrs	r6, r3
 800043a:	40cc      	lsrs	r4, r1
 800043c:	e9c5 6400 	strd	r6, r4, [r5]
 8000440:	2100      	movs	r1, #0
 8000442:	e750      	b.n	80002e6 <__udivmoddi4+0xa6>
 8000444:	f1c2 0320 	rsb	r3, r2, #32
 8000448:	fa20 f103 	lsr.w	r1, r0, r3
 800044c:	fa0c fc02 	lsl.w	ip, ip, r2
 8000450:	fa24 f303 	lsr.w	r3, r4, r3
 8000454:	4094      	lsls	r4, r2
 8000456:	430c      	orrs	r4, r1
 8000458:	ea4f 481c 	mov.w	r8, ip, lsr #16
 800045c:	fa00 fe02 	lsl.w	lr, r0, r2
 8000460:	fa1f f78c 	uxth.w	r7, ip
 8000464:	fbb3 f0f8 	udiv	r0, r3, r8
 8000468:	fb08 3110 	mls	r1, r8, r0, r3
 800046c:	0c23      	lsrs	r3, r4, #16
 800046e:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000472:	fb00 f107 	mul.w	r1, r0, r7
 8000476:	4299      	cmp	r1, r3
 8000478:	d908      	bls.n	800048c <__udivmoddi4+0x24c>
 800047a:	eb1c 0303 	adds.w	r3, ip, r3
 800047e:	f100 36ff 	add.w	r6, r0, #4294967295
 8000482:	d22c      	bcs.n	80004de <__udivmoddi4+0x29e>
 8000484:	4299      	cmp	r1, r3
 8000486:	d92a      	bls.n	80004de <__udivmoddi4+0x29e>
 8000488:	3802      	subs	r0, #2
 800048a:	4463      	add	r3, ip
 800048c:	1a5b      	subs	r3, r3, r1
 800048e:	b2a4      	uxth	r4, r4
 8000490:	fbb3 f1f8 	udiv	r1, r3, r8
 8000494:	fb08 3311 	mls	r3, r8, r1, r3
 8000498:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 800049c:	fb01 f307 	mul.w	r3, r1, r7
 80004a0:	42a3      	cmp	r3, r4
 80004a2:	d908      	bls.n	80004b6 <__udivmoddi4+0x276>
 80004a4:	eb1c 0404 	adds.w	r4, ip, r4
 80004a8:	f101 36ff 	add.w	r6, r1, #4294967295
 80004ac:	d213      	bcs.n	80004d6 <__udivmoddi4+0x296>
 80004ae:	42a3      	cmp	r3, r4
 80004b0:	d911      	bls.n	80004d6 <__udivmoddi4+0x296>
 80004b2:	3902      	subs	r1, #2
 80004b4:	4464      	add	r4, ip
 80004b6:	1ae4      	subs	r4, r4, r3
 80004b8:	ea41 4100 	orr.w	r1, r1, r0, lsl #16
 80004bc:	e739      	b.n	8000332 <__udivmoddi4+0xf2>
 80004be:	4604      	mov	r4, r0
 80004c0:	e6f0      	b.n	80002a4 <__udivmoddi4+0x64>
 80004c2:	4608      	mov	r0, r1
 80004c4:	e706      	b.n	80002d4 <__udivmoddi4+0x94>
 80004c6:	45c8      	cmp	r8, r9
 80004c8:	d2ae      	bcs.n	8000428 <__udivmoddi4+0x1e8>
 80004ca:	ebb9 0e02 	subs.w	lr, r9, r2
 80004ce:	eb63 0c07 	sbc.w	ip, r3, r7
 80004d2:	3801      	subs	r0, #1
 80004d4:	e7a8      	b.n	8000428 <__udivmoddi4+0x1e8>
 80004d6:	4631      	mov	r1, r6
 80004d8:	e7ed      	b.n	80004b6 <__udivmoddi4+0x276>
 80004da:	4603      	mov	r3, r0
 80004dc:	e799      	b.n	8000412 <__udivmoddi4+0x1d2>
 80004de:	4630      	mov	r0, r6
 80004e0:	e7d4      	b.n	800048c <__udivmoddi4+0x24c>
 80004e2:	46d6      	mov	lr, sl
 80004e4:	e77f      	b.n	80003e6 <__udivmoddi4+0x1a6>
 80004e6:	4463      	add	r3, ip
 80004e8:	3802      	subs	r0, #2
 80004ea:	e74d      	b.n	8000388 <__udivmoddi4+0x148>
 80004ec:	4606      	mov	r6, r0
 80004ee:	4623      	mov	r3, r4
 80004f0:	4608      	mov	r0, r1
 80004f2:	e70f      	b.n	8000314 <__udivmoddi4+0xd4>
 80004f4:	3e02      	subs	r6, #2
 80004f6:	4463      	add	r3, ip
 80004f8:	e730      	b.n	800035c <__udivmoddi4+0x11c>
 80004fa:	bf00      	nop

080004fc <__aeabi_idiv0>:
 80004fc:	4770      	bx	lr
 80004fe:	bf00      	nop

08000500 <vApplicationGetIdleTaskMemory>:
/* USER CODE BEGIN GET_IDLE_TASK_MEMORY */
static StaticTask_t xIdleTaskTCBBuffer;
static StackType_t xIdleStack[configMINIMAL_STACK_SIZE];

void vApplicationGetIdleTaskMemory( StaticTask_t **ppxIdleTaskTCBBuffer, StackType_t **ppxIdleTaskStackBuffer, uint32_t *pulIdleTaskStackSize )
{
 8000500:	b480      	push	{r7}
 8000502:	b085      	sub	sp, #20
 8000504:	af00      	add	r7, sp, #0
 8000506:	60f8      	str	r0, [r7, #12]
 8000508:	60b9      	str	r1, [r7, #8]
 800050a:	607a      	str	r2, [r7, #4]
  *ppxIdleTaskTCBBuffer = &xIdleTaskTCBBuffer;
 800050c:	68fb      	ldr	r3, [r7, #12]
 800050e:	4a07      	ldr	r2, [pc, #28]	@ (800052c <vApplicationGetIdleTaskMemory+0x2c>)
 8000510:	601a      	str	r2, [r3, #0]
  *ppxIdleTaskStackBuffer = &xIdleStack[0];
 8000512:	68bb      	ldr	r3, [r7, #8]
 8000514:	4a06      	ldr	r2, [pc, #24]	@ (8000530 <vApplicationGetIdleTaskMemory+0x30>)
 8000516:	601a      	str	r2, [r3, #0]
  *pulIdleTaskStackSize = configMINIMAL_STACK_SIZE;
 8000518:	687b      	ldr	r3, [r7, #4]
 800051a:	2280      	movs	r2, #128	@ 0x80
 800051c:	601a      	str	r2, [r3, #0]
  /* place for user code */
}
 800051e:	bf00      	nop
 8000520:	3714      	adds	r7, #20
 8000522:	46bd      	mov	sp, r7
 8000524:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000528:	4770      	bx	lr
 800052a:	bf00      	nop
 800052c:	2000007c 	.word	0x2000007c
 8000530:	2000011c 	.word	0x2000011c

08000534 <ResetI2C>:
volatile uint8_t rx_buf;
uint8_t tx_buf=0;

HAL_StatusTypeDef sig = 0x0;
void ResetI2C(I2C_HandleTypeDef* rev_i2c)
{
 8000534:	b580      	push	{r7, lr}
 8000536:	b082      	sub	sp, #8
 8000538:	af00      	add	r7, sp, #0
 800053a:	6078      	str	r0, [r7, #4]
	HAL_I2C_DeInit(rev_i2c);
 800053c:	6878      	ldr	r0, [r7, #4]
 800053e:	f001 f9fd 	bl	800193c <HAL_I2C_DeInit>
	HAL_I2C_Init(rev_i2c);
 8000542:	6878      	ldr	r0, [r7, #4]
 8000544:	f001 f8b6 	bl	80016b4 <HAL_I2C_Init>
}
 8000548:	bf00      	nop
 800054a:	3708      	adds	r7, #8
 800054c:	46bd      	mov	sp, r7
 800054e:	bd80      	pop	{r7, pc}

08000550 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8000550:	b5b0      	push	{r4, r5, r7, lr}
 8000552:	b098      	sub	sp, #96	@ 0x60
 8000554:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8000556:	f000 fc6d 	bl	8000e34 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 800055a:	f000 f85b 	bl	8000614 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 800055e:	f000 f94b 	bl	80007f8 <MX_GPIO_Init>
  MX_I2C1_Init();
 8000562:	f000 f8c5 	bl	80006f0 <MX_I2C1_Init>
  MX_TIM1_Init();
 8000566:	f000 f8f1 	bl	800074c <MX_TIM1_Init>

  /* USER CODE END 2 */

  /* Create the mutex(es) */
  /* definition and creation of I2CMutex */
  osMutexDef(I2CMutex);
 800056a:	2300      	movs	r3, #0
 800056c:	65bb      	str	r3, [r7, #88]	@ 0x58
 800056e:	2300      	movs	r3, #0
 8000570:	65fb      	str	r3, [r7, #92]	@ 0x5c
  I2CMutexHandle = osMutexCreate(osMutex(I2CMutex));
 8000572:	f107 0358 	add.w	r3, r7, #88	@ 0x58
 8000576:	4618      	mov	r0, r3
 8000578:	f004 ff2b 	bl	80053d2 <osMutexCreate>
 800057c:	4603      	mov	r3, r0
 800057e:	4a1e      	ldr	r2, [pc, #120]	@ (80005f8 <main+0xa8>)
 8000580:	6013      	str	r3, [r2, #0]
  /* add queues, ... */
  /* USER CODE END RTOS_QUEUES */

  /* Create the thread(s) */
  /* definition and creation of defaultTask */
  osThreadDef(defaultTask, StartDefaultTask, osPriorityNormal, 0, 128);
 8000582:	4b1e      	ldr	r3, [pc, #120]	@ (80005fc <main+0xac>)
 8000584:	f107 043c 	add.w	r4, r7, #60	@ 0x3c
 8000588:	461d      	mov	r5, r3
 800058a:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 800058c:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 800058e:	e895 0007 	ldmia.w	r5, {r0, r1, r2}
 8000592:	e884 0007 	stmia.w	r4, {r0, r1, r2}
  defaultTaskHandle = osThreadCreate(osThread(defaultTask), NULL);
 8000596:	f107 033c 	add.w	r3, r7, #60	@ 0x3c
 800059a:	2100      	movs	r1, #0
 800059c:	4618      	mov	r0, r3
 800059e:	f004 feb8 	bl	8005312 <osThreadCreate>
 80005a2:	4603      	mov	r3, r0
 80005a4:	4a16      	ldr	r2, [pc, #88]	@ (8000600 <main+0xb0>)
 80005a6:	6013      	str	r3, [r2, #0]

  /* definition and creation of IrReadTask */
  osThreadDef(IrReadTask, IRTask_Start, osPriorityNormal, 0, 128);
 80005a8:	4b16      	ldr	r3, [pc, #88]	@ (8000604 <main+0xb4>)
 80005aa:	f107 0420 	add.w	r4, r7, #32
 80005ae:	461d      	mov	r5, r3
 80005b0:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 80005b2:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 80005b4:	e895 0007 	ldmia.w	r5, {r0, r1, r2}
 80005b8:	e884 0007 	stmia.w	r4, {r0, r1, r2}
  IrReadTaskHandle = osThreadCreate(osThread(IrReadTask), NULL);
 80005bc:	f107 0320 	add.w	r3, r7, #32
 80005c0:	2100      	movs	r1, #0
 80005c2:	4618      	mov	r0, r3
 80005c4:	f004 fea5 	bl	8005312 <osThreadCreate>
 80005c8:	4603      	mov	r3, r0
 80005ca:	4a0f      	ldr	r2, [pc, #60]	@ (8000608 <main+0xb8>)
 80005cc:	6013      	str	r3, [r2, #0]

  /* definition and creation of I2CSendTask */
  osThreadDef(I2CSendTask, I2CSendTask_Start, osPriorityNormal, 0, 128);
 80005ce:	4b0f      	ldr	r3, [pc, #60]	@ (800060c <main+0xbc>)
 80005d0:	1d3c      	adds	r4, r7, #4
 80005d2:	461d      	mov	r5, r3
 80005d4:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 80005d6:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 80005d8:	e895 0007 	ldmia.w	r5, {r0, r1, r2}
 80005dc:	e884 0007 	stmia.w	r4, {r0, r1, r2}
  I2CSendTaskHandle = osThreadCreate(osThread(I2CSendTask), NULL);
 80005e0:	1d3b      	adds	r3, r7, #4
 80005e2:	2100      	movs	r1, #0
 80005e4:	4618      	mov	r0, r3
 80005e6:	f004 fe94 	bl	8005312 <osThreadCreate>
 80005ea:	4603      	mov	r3, r0
 80005ec:	4a08      	ldr	r2, [pc, #32]	@ (8000610 <main+0xc0>)
 80005ee:	6013      	str	r3, [r2, #0]
  /* USER CODE BEGIN RTOS_THREADS */
  /* add threads, ... */
  /* USER CODE END RTOS_THREADS */

  /* Start scheduler */
  osKernelStart();
 80005f0:	f004 fe88 	bl	8005304 <osKernelStart>

  /* We should never get here as control is now taken by the scheduler */

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
 80005f4:	bf00      	nop
 80005f6:	e7fd      	b.n	80005f4 <main+0xa4>
 80005f8:	200003c4 	.word	0x200003c4
 80005fc:	080078f8 	.word	0x080078f8
 8000600:	200003b8 	.word	0x200003b8
 8000604:	08007920 	.word	0x08007920
 8000608:	200003bc 	.word	0x200003bc
 800060c:	08007948 	.word	0x08007948
 8000610:	200003c0 	.word	0x200003c0

08000614 <SystemClock_Config>:
  */
void SystemClock_Config(void)



{
 8000614:	b580      	push	{r7, lr}
 8000616:	b094      	sub	sp, #80	@ 0x50
 8000618:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 800061a:	f107 031c 	add.w	r3, r7, #28
 800061e:	2234      	movs	r2, #52	@ 0x34
 8000620:	2100      	movs	r1, #0
 8000622:	4618      	mov	r0, r3
 8000624:	f007 f86e 	bl	8007704 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8000628:	f107 0308 	add.w	r3, r7, #8
 800062c:	2200      	movs	r2, #0
 800062e:	601a      	str	r2, [r3, #0]
 8000630:	605a      	str	r2, [r3, #4]
 8000632:	609a      	str	r2, [r3, #8]
 8000634:	60da      	str	r2, [r3, #12]
 8000636:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 8000638:	2300      	movs	r3, #0
 800063a:	607b      	str	r3, [r7, #4]
 800063c:	4b2a      	ldr	r3, [pc, #168]	@ (80006e8 <SystemClock_Config+0xd4>)
 800063e:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8000640:	4a29      	ldr	r2, [pc, #164]	@ (80006e8 <SystemClock_Config+0xd4>)
 8000642:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8000646:	6413      	str	r3, [r2, #64]	@ 0x40
 8000648:	4b27      	ldr	r3, [pc, #156]	@ (80006e8 <SystemClock_Config+0xd4>)
 800064a:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800064c:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8000650:	607b      	str	r3, [r7, #4]
 8000652:	687b      	ldr	r3, [r7, #4]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE3);
 8000654:	2300      	movs	r3, #0
 8000656:	603b      	str	r3, [r7, #0]
 8000658:	4b24      	ldr	r3, [pc, #144]	@ (80006ec <SystemClock_Config+0xd8>)
 800065a:	681b      	ldr	r3, [r3, #0]
 800065c:	f423 4340 	bic.w	r3, r3, #49152	@ 0xc000
 8000660:	4a22      	ldr	r2, [pc, #136]	@ (80006ec <SystemClock_Config+0xd8>)
 8000662:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 8000666:	6013      	str	r3, [r2, #0]
 8000668:	4b20      	ldr	r3, [pc, #128]	@ (80006ec <SystemClock_Config+0xd8>)
 800066a:	681b      	ldr	r3, [r3, #0]
 800066c:	f403 4340 	and.w	r3, r3, #49152	@ 0xc000
 8000670:	603b      	str	r3, [r7, #0]
 8000672:	683b      	ldr	r3, [r7, #0]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 8000674:	2302      	movs	r3, #2
 8000676:	61fb      	str	r3, [r7, #28]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8000678:	2301      	movs	r3, #1
 800067a:	62bb      	str	r3, [r7, #40]	@ 0x28
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 800067c:	2310      	movs	r3, #16
 800067e:	62fb      	str	r3, [r7, #44]	@ 0x2c
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8000680:	2302      	movs	r3, #2
 8000682:	637b      	str	r3, [r7, #52]	@ 0x34
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI;
 8000684:	2300      	movs	r3, #0
 8000686:	63bb      	str	r3, [r7, #56]	@ 0x38
  RCC_OscInitStruct.PLL.PLLM = 16;
 8000688:	2310      	movs	r3, #16
 800068a:	63fb      	str	r3, [r7, #60]	@ 0x3c
  RCC_OscInitStruct.PLL.PLLN = 336;
 800068c:	f44f 73a8 	mov.w	r3, #336	@ 0x150
 8000690:	643b      	str	r3, [r7, #64]	@ 0x40
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV4;
 8000692:	2304      	movs	r3, #4
 8000694:	647b      	str	r3, [r7, #68]	@ 0x44
  RCC_OscInitStruct.PLL.PLLQ = 2;
 8000696:	2302      	movs	r3, #2
 8000698:	64bb      	str	r3, [r7, #72]	@ 0x48
  RCC_OscInitStruct.PLL.PLLR = 2;
 800069a:	2302      	movs	r3, #2
 800069c:	64fb      	str	r3, [r7, #76]	@ 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 800069e:	f107 031c 	add.w	r3, r7, #28
 80006a2:	4618      	mov	r0, r3
 80006a4:	f003 fcf6 	bl	8004094 <HAL_RCC_OscConfig>
 80006a8:	4603      	mov	r3, r0
 80006aa:	2b00      	cmp	r3, #0
 80006ac:	d001      	beq.n	80006b2 <SystemClock_Config+0x9e>
  {
    Error_Handler();
 80006ae:	f000 f9c0 	bl	8000a32 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 80006b2:	230f      	movs	r3, #15
 80006b4:	60bb      	str	r3, [r7, #8]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 80006b6:	2302      	movs	r3, #2
 80006b8:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 80006ba:	2300      	movs	r3, #0
 80006bc:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 80006be:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 80006c2:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 80006c4:	2300      	movs	r3, #0
 80006c6:	61bb      	str	r3, [r7, #24]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_2) != HAL_OK)
 80006c8:	f107 0308 	add.w	r3, r7, #8
 80006cc:	2102      	movs	r1, #2
 80006ce:	4618      	mov	r0, r3
 80006d0:	f003 f9fe 	bl	8003ad0 <HAL_RCC_ClockConfig>
 80006d4:	4603      	mov	r3, r0
 80006d6:	2b00      	cmp	r3, #0
 80006d8:	d001      	beq.n	80006de <SystemClock_Config+0xca>
  {
    Error_Handler();
 80006da:	f000 f9aa 	bl	8000a32 <Error_Handler>
  }
}
 80006de:	bf00      	nop
 80006e0:	3750      	adds	r7, #80	@ 0x50
 80006e2:	46bd      	mov	sp, r7
 80006e4:	bd80      	pop	{r7, pc}
 80006e6:	bf00      	nop
 80006e8:	40023800 	.word	0x40023800
 80006ec:	40007000 	.word	0x40007000

080006f0 <MX_I2C1_Init>:
  * @brief I2C1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_I2C1_Init(void)
{
 80006f0:	b580      	push	{r7, lr}
 80006f2:	af00      	add	r7, sp, #0
  /* USER CODE END I2C1_Init 0 */

  /* USER CODE BEGIN I2C1_Init 1 */

  /* USER CODE END I2C1_Init 1 */
  hi2c1.Instance = I2C1;
 80006f4:	4b12      	ldr	r3, [pc, #72]	@ (8000740 <MX_I2C1_Init+0x50>)
 80006f6:	4a13      	ldr	r2, [pc, #76]	@ (8000744 <MX_I2C1_Init+0x54>)
 80006f8:	601a      	str	r2, [r3, #0]
  hi2c1.Init.ClockSpeed = 100000;
 80006fa:	4b11      	ldr	r3, [pc, #68]	@ (8000740 <MX_I2C1_Init+0x50>)
 80006fc:	4a12      	ldr	r2, [pc, #72]	@ (8000748 <MX_I2C1_Init+0x58>)
 80006fe:	605a      	str	r2, [r3, #4]
  hi2c1.Init.DutyCycle = I2C_DUTYCYCLE_2;
 8000700:	4b0f      	ldr	r3, [pc, #60]	@ (8000740 <MX_I2C1_Init+0x50>)
 8000702:	2200      	movs	r2, #0
 8000704:	609a      	str	r2, [r3, #8]
  hi2c1.Init.OwnAddress1 = 32;
 8000706:	4b0e      	ldr	r3, [pc, #56]	@ (8000740 <MX_I2C1_Init+0x50>)
 8000708:	2220      	movs	r2, #32
 800070a:	60da      	str	r2, [r3, #12]
  hi2c1.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 800070c:	4b0c      	ldr	r3, [pc, #48]	@ (8000740 <MX_I2C1_Init+0x50>)
 800070e:	f44f 4280 	mov.w	r2, #16384	@ 0x4000
 8000712:	611a      	str	r2, [r3, #16]
  hi2c1.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 8000714:	4b0a      	ldr	r3, [pc, #40]	@ (8000740 <MX_I2C1_Init+0x50>)
 8000716:	2200      	movs	r2, #0
 8000718:	615a      	str	r2, [r3, #20]
  hi2c1.Init.OwnAddress2 = 0;
 800071a:	4b09      	ldr	r3, [pc, #36]	@ (8000740 <MX_I2C1_Init+0x50>)
 800071c:	2200      	movs	r2, #0
 800071e:	619a      	str	r2, [r3, #24]
  hi2c1.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 8000720:	4b07      	ldr	r3, [pc, #28]	@ (8000740 <MX_I2C1_Init+0x50>)
 8000722:	2200      	movs	r2, #0
 8000724:	61da      	str	r2, [r3, #28]
  hi2c1.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 8000726:	4b06      	ldr	r3, [pc, #24]	@ (8000740 <MX_I2C1_Init+0x50>)
 8000728:	2200      	movs	r2, #0
 800072a:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c1) != HAL_OK)
 800072c:	4804      	ldr	r0, [pc, #16]	@ (8000740 <MX_I2C1_Init+0x50>)
 800072e:	f000 ffc1 	bl	80016b4 <HAL_I2C_Init>
 8000732:	4603      	mov	r3, r0
 8000734:	2b00      	cmp	r3, #0
 8000736:	d001      	beq.n	800073c <MX_I2C1_Init+0x4c>
  {
    Error_Handler();
 8000738:	f000 f97b 	bl	8000a32 <Error_Handler>
  }
  /* USER CODE BEGIN I2C1_Init 2 */

  /* USER CODE END I2C1_Init 2 */

}
 800073c:	bf00      	nop
 800073e:	bd80      	pop	{r7, pc}
 8000740:	2000031c 	.word	0x2000031c
 8000744:	40005400 	.word	0x40005400
 8000748:	000186a0 	.word	0x000186a0

0800074c <MX_TIM1_Init>:
  * @brief TIM1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM1_Init(void)
{
 800074c:	b580      	push	{r7, lr}
 800074e:	b086      	sub	sp, #24
 8000750:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM1_Init 0 */

  /* USER CODE END TIM1_Init 0 */

  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8000752:	f107 0310 	add.w	r3, r7, #16
 8000756:	2200      	movs	r2, #0
 8000758:	601a      	str	r2, [r3, #0]
 800075a:	605a      	str	r2, [r3, #4]
  TIM_IC_InitTypeDef sConfigIC = {0};
 800075c:	463b      	mov	r3, r7
 800075e:	2200      	movs	r2, #0
 8000760:	601a      	str	r2, [r3, #0]
 8000762:	605a      	str	r2, [r3, #4]
 8000764:	609a      	str	r2, [r3, #8]
 8000766:	60da      	str	r2, [r3, #12]

  /* USER CODE BEGIN TIM1_Init 1 */

  /* USER CODE END TIM1_Init 1 */
  htim1.Instance = TIM1;
 8000768:	4b21      	ldr	r3, [pc, #132]	@ (80007f0 <MX_TIM1_Init+0xa4>)
 800076a:	4a22      	ldr	r2, [pc, #136]	@ (80007f4 <MX_TIM1_Init+0xa8>)
 800076c:	601a      	str	r2, [r3, #0]
  htim1.Init.Prescaler = 84;
 800076e:	4b20      	ldr	r3, [pc, #128]	@ (80007f0 <MX_TIM1_Init+0xa4>)
 8000770:	2254      	movs	r2, #84	@ 0x54
 8000772:	605a      	str	r2, [r3, #4]
  htim1.Init.CounterMode = TIM_COUNTERMODE_UP;
 8000774:	4b1e      	ldr	r3, [pc, #120]	@ (80007f0 <MX_TIM1_Init+0xa4>)
 8000776:	2200      	movs	r2, #0
 8000778:	609a      	str	r2, [r3, #8]
  htim1.Init.Period = 65535;
 800077a:	4b1d      	ldr	r3, [pc, #116]	@ (80007f0 <MX_TIM1_Init+0xa4>)
 800077c:	f64f 72ff 	movw	r2, #65535	@ 0xffff
 8000780:	60da      	str	r2, [r3, #12]
  htim1.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8000782:	4b1b      	ldr	r3, [pc, #108]	@ (80007f0 <MX_TIM1_Init+0xa4>)
 8000784:	2200      	movs	r2, #0
 8000786:	611a      	str	r2, [r3, #16]
  htim1.Init.RepetitionCounter = 0;
 8000788:	4b19      	ldr	r3, [pc, #100]	@ (80007f0 <MX_TIM1_Init+0xa4>)
 800078a:	2200      	movs	r2, #0
 800078c:	615a      	str	r2, [r3, #20]
  htim1.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 800078e:	4b18      	ldr	r3, [pc, #96]	@ (80007f0 <MX_TIM1_Init+0xa4>)
 8000790:	2200      	movs	r2, #0
 8000792:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_IC_Init(&htim1) != HAL_OK)
 8000794:	4816      	ldr	r0, [pc, #88]	@ (80007f0 <MX_TIM1_Init+0xa4>)
 8000796:	f003 ffe5 	bl	8004764 <HAL_TIM_IC_Init>
 800079a:	4603      	mov	r3, r0
 800079c:	2b00      	cmp	r3, #0
 800079e:	d001      	beq.n	80007a4 <MX_TIM1_Init+0x58>
  {
    Error_Handler();
 80007a0:	f000 f947 	bl	8000a32 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 80007a4:	2300      	movs	r3, #0
 80007a6:	613b      	str	r3, [r7, #16]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 80007a8:	2300      	movs	r3, #0
 80007aa:	617b      	str	r3, [r7, #20]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim1, &sMasterConfig) != HAL_OK)
 80007ac:	f107 0310 	add.w	r3, r7, #16
 80007b0:	4619      	mov	r1, r3
 80007b2:	480f      	ldr	r0, [pc, #60]	@ (80007f0 <MX_TIM1_Init+0xa4>)
 80007b4:	f004 fcfe 	bl	80051b4 <HAL_TIMEx_MasterConfigSynchronization>
 80007b8:	4603      	mov	r3, r0
 80007ba:	2b00      	cmp	r3, #0
 80007bc:	d001      	beq.n	80007c2 <MX_TIM1_Init+0x76>
  {
    Error_Handler();
 80007be:	f000 f938 	bl	8000a32 <Error_Handler>
  }
  sConfigIC.ICPolarity = TIM_INPUTCHANNELPOLARITY_RISING;
 80007c2:	2300      	movs	r3, #0
 80007c4:	603b      	str	r3, [r7, #0]
  sConfigIC.ICSelection = TIM_ICSELECTION_DIRECTTI;
 80007c6:	2301      	movs	r3, #1
 80007c8:	607b      	str	r3, [r7, #4]
  sConfigIC.ICPrescaler = TIM_ICPSC_DIV1;
 80007ca:	2300      	movs	r3, #0
 80007cc:	60bb      	str	r3, [r7, #8]
  sConfigIC.ICFilter = 0;
 80007ce:	2300      	movs	r3, #0
 80007d0:	60fb      	str	r3, [r7, #12]
  if (HAL_TIM_IC_ConfigChannel(&htim1, &sConfigIC, TIM_CHANNEL_1)!= HAL_OK)
 80007d2:	463b      	mov	r3, r7
 80007d4:	2200      	movs	r2, #0
 80007d6:	4619      	mov	r1, r3
 80007d8:	4805      	ldr	r0, [pc, #20]	@ (80007f0 <MX_TIM1_Init+0xa4>)
 80007da:	f004 fa2b 	bl	8004c34 <HAL_TIM_IC_ConfigChannel>
 80007de:	4603      	mov	r3, r0
 80007e0:	2b00      	cmp	r3, #0
 80007e2:	d001      	beq.n	80007e8 <MX_TIM1_Init+0x9c>
  {
    Error_Handler();
 80007e4:	f000 f925 	bl	8000a32 <Error_Handler>
  }
  /* USER CODE BEGIN TIM1_Init 2 */

  /* USER CODE END TIM1_Init 2 */

}
 80007e8:	bf00      	nop
 80007ea:	3718      	adds	r7, #24
 80007ec:	46bd      	mov	sp, r7
 80007ee:	bd80      	pop	{r7, pc}
 80007f0:	20000370 	.word	0x20000370
 80007f4:	40010000 	.word	0x40010000

080007f8 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 80007f8:	b580      	push	{r7, lr}
 80007fa:	b08a      	sub	sp, #40	@ 0x28
 80007fc:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80007fe:	f107 0314 	add.w	r3, r7, #20
 8000802:	2200      	movs	r2, #0
 8000804:	601a      	str	r2, [r3, #0]
 8000806:	605a      	str	r2, [r3, #4]
 8000808:	609a      	str	r2, [r3, #8]
 800080a:	60da      	str	r2, [r3, #12]
 800080c:	611a      	str	r2, [r3, #16]
/* USER CODE BEGIN MX_GPIO_Init_1 */
/* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 800080e:	2300      	movs	r3, #0
 8000810:	613b      	str	r3, [r7, #16]
 8000812:	4b36      	ldr	r3, [pc, #216]	@ (80008ec <MX_GPIO_Init+0xf4>)
 8000814:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000816:	4a35      	ldr	r2, [pc, #212]	@ (80008ec <MX_GPIO_Init+0xf4>)
 8000818:	f043 0304 	orr.w	r3, r3, #4
 800081c:	6313      	str	r3, [r2, #48]	@ 0x30
 800081e:	4b33      	ldr	r3, [pc, #204]	@ (80008ec <MX_GPIO_Init+0xf4>)
 8000820:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000822:	f003 0304 	and.w	r3, r3, #4
 8000826:	613b      	str	r3, [r7, #16]
 8000828:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 800082a:	2300      	movs	r3, #0
 800082c:	60fb      	str	r3, [r7, #12]
 800082e:	4b2f      	ldr	r3, [pc, #188]	@ (80008ec <MX_GPIO_Init+0xf4>)
 8000830:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000832:	4a2e      	ldr	r2, [pc, #184]	@ (80008ec <MX_GPIO_Init+0xf4>)
 8000834:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8000838:	6313      	str	r3, [r2, #48]	@ 0x30
 800083a:	4b2c      	ldr	r3, [pc, #176]	@ (80008ec <MX_GPIO_Init+0xf4>)
 800083c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800083e:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8000842:	60fb      	str	r3, [r7, #12]
 8000844:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8000846:	2300      	movs	r3, #0
 8000848:	60bb      	str	r3, [r7, #8]
 800084a:	4b28      	ldr	r3, [pc, #160]	@ (80008ec <MX_GPIO_Init+0xf4>)
 800084c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800084e:	4a27      	ldr	r2, [pc, #156]	@ (80008ec <MX_GPIO_Init+0xf4>)
 8000850:	f043 0301 	orr.w	r3, r3, #1
 8000854:	6313      	str	r3, [r2, #48]	@ 0x30
 8000856:	4b25      	ldr	r3, [pc, #148]	@ (80008ec <MX_GPIO_Init+0xf4>)
 8000858:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800085a:	f003 0301 	and.w	r3, r3, #1
 800085e:	60bb      	str	r3, [r7, #8]
 8000860:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8000862:	2300      	movs	r3, #0
 8000864:	607b      	str	r3, [r7, #4]
 8000866:	4b21      	ldr	r3, [pc, #132]	@ (80008ec <MX_GPIO_Init+0xf4>)
 8000868:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800086a:	4a20      	ldr	r2, [pc, #128]	@ (80008ec <MX_GPIO_Init+0xf4>)
 800086c:	f043 0302 	orr.w	r3, r3, #2
 8000870:	6313      	str	r3, [r2, #48]	@ 0x30
 8000872:	4b1e      	ldr	r3, [pc, #120]	@ (80008ec <MX_GPIO_Init+0xf4>)
 8000874:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000876:	f003 0302 	and.w	r3, r3, #2
 800087a:	607b      	str	r3, [r7, #4]
 800087c:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOA, GPIO_PIN_9, GPIO_PIN_RESET);
 800087e:	2200      	movs	r2, #0
 8000880:	f44f 7100 	mov.w	r1, #512	@ 0x200
 8000884:	481a      	ldr	r0, [pc, #104]	@ (80008f0 <MX_GPIO_Init+0xf8>)
 8000886:	f000 fefb 	bl	8001680 <HAL_GPIO_WritePin>

  /*Configure GPIO pins : PA2 PA3 */
  GPIO_InitStruct.Pin = GPIO_PIN_2|GPIO_PIN_3;
 800088a:	230c      	movs	r3, #12
 800088c:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800088e:	2302      	movs	r3, #2
 8000890:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000892:	2300      	movs	r3, #0
 8000894:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000896:	2303      	movs	r3, #3
 8000898:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Alternate = GPIO_AF7_USART2;
 800089a:	2307      	movs	r3, #7
 800089c:	627b      	str	r3, [r7, #36]	@ 0x24
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800089e:	f107 0314 	add.w	r3, r7, #20
 80008a2:	4619      	mov	r1, r3
 80008a4:	4812      	ldr	r0, [pc, #72]	@ (80008f0 <MX_GPIO_Init+0xf8>)
 80008a6:	f000 fc4b 	bl	8001140 <HAL_GPIO_Init>

  /*Configure GPIO pin : PA9 */
  GPIO_InitStruct.Pin = GPIO_PIN_9;
 80008aa:	f44f 7300 	mov.w	r3, #512	@ 0x200
 80008ae:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80008b0:	2301      	movs	r3, #1
 80008b2:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80008b4:	2300      	movs	r3, #0
 80008b6:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80008b8:	2300      	movs	r3, #0
 80008ba:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80008bc:	f107 0314 	add.w	r3, r7, #20
 80008c0:	4619      	mov	r1, r3
 80008c2:	480b      	ldr	r0, [pc, #44]	@ (80008f0 <MX_GPIO_Init+0xf8>)
 80008c4:	f000 fc3c 	bl	8001140 <HAL_GPIO_Init>

  /*Configure GPIO pin : PA10 */
  GPIO_InitStruct.Pin = GPIO_PIN_10;
 80008c8:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 80008cc:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 80008ce:	2300      	movs	r3, #0
 80008d0:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80008d2:	2300      	movs	r3, #0
 80008d4:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80008d6:	f107 0314 	add.w	r3, r7, #20
 80008da:	4619      	mov	r1, r3
 80008dc:	4804      	ldr	r0, [pc, #16]	@ (80008f0 <MX_GPIO_Init+0xf8>)
 80008de:	f000 fc2f 	bl	8001140 <HAL_GPIO_Init>

/* USER CODE BEGIN MX_GPIO_Init_2 */
/* USER CODE END MX_GPIO_Init_2 */
}
 80008e2:	bf00      	nop
 80008e4:	3728      	adds	r7, #40	@ 0x28
 80008e6:	46bd      	mov	sp, r7
 80008e8:	bd80      	pop	{r7, pc}
 80008ea:	bf00      	nop
 80008ec:	40023800 	.word	0x40023800
 80008f0:	40020000 	.word	0x40020000

080008f4 <StartDefaultTask>:
  * @param  argument: Not used
  * @retval None
  */
/* USER CODE END Header_StartDefaultTask */
void StartDefaultTask(void const * argument)
{
 80008f4:	b580      	push	{r7, lr}
 80008f6:	b082      	sub	sp, #8
 80008f8:	af00      	add	r7, sp, #0
 80008fa:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN 5 */
  /* Infinite loop */
  for(;;)
  {
    osDelay(1);
 80008fc:	2001      	movs	r0, #1
 80008fe:	f004 fd54 	bl	80053aa <osDelay>
 8000902:	e7fb      	b.n	80008fc <StartDefaultTask+0x8>

08000904 <IRTask_Start>:
* @param argument: Not used
* @retval None
*/
/* USER CODE END Header_IRTask_Start */
void IRTask_Start(void const * argument)
{
 8000904:	b580      	push	{r7, lr}
 8000906:	b082      	sub	sp, #8
 8000908:	af00      	add	r7, sp, #0
 800090a:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN IRTask_Start */
  /* Infinite loop */
  HAL_TIM_IC_Start_IT(&htim1, TIM_CHANNEL_1);
 800090c:	2100      	movs	r1, #0
 800090e:	4812      	ldr	r0, [pc, #72]	@ (8000958 <IRTask_Start+0x54>)
 8000910:	f003 ff78 	bl	8004804 <HAL_TIM_IC_Start_IT>

  for(;;)
  {
	 xSemaphoreTake(I2CMutexHandle,portMAX_DELAY);
 8000914:	4b11      	ldr	r3, [pc, #68]	@ (800095c <IRTask_Start+0x58>)
 8000916:	681b      	ldr	r3, [r3, #0]
 8000918:	f04f 31ff 	mov.w	r1, #4294967295
 800091c:	4618      	mov	r0, r3
 800091e:	f005 f8b5 	bl	8005a8c <xQueueSemaphoreTake>
	if (HAL_GPIO_ReadPin(GPIOA, GPIO_PIN_10))
 8000922:	f44f 6180 	mov.w	r1, #1024	@ 0x400
 8000926:	480e      	ldr	r0, [pc, #56]	@ (8000960 <IRTask_Start+0x5c>)
 8000928:	f000 fe92 	bl	8001650 <HAL_GPIO_ReadPin>
 800092c:	4603      	mov	r3, r0
 800092e:	2b00      	cmp	r3, #0
 8000930:	d003      	beq.n	800093a <IRTask_Start+0x36>
	{
		tx_buf=0;
 8000932:	4b0c      	ldr	r3, [pc, #48]	@ (8000964 <IRTask_Start+0x60>)
 8000934:	2200      	movs	r2, #0
 8000936:	701a      	strb	r2, [r3, #0]
 8000938:	e002      	b.n	8000940 <IRTask_Start+0x3c>
	}
	else
	{
		tx_buf=1;
 800093a:	4b0a      	ldr	r3, [pc, #40]	@ (8000964 <IRTask_Start+0x60>)
 800093c:	2201      	movs	r2, #1
 800093e:	701a      	strb	r2, [r3, #0]
	}
	xSemaphoreGive(I2CMutexHandle);
 8000940:	4b06      	ldr	r3, [pc, #24]	@ (800095c <IRTask_Start+0x58>)
 8000942:	6818      	ldr	r0, [r3, #0]
 8000944:	2300      	movs	r3, #0
 8000946:	2200      	movs	r2, #0
 8000948:	2100      	movs	r1, #0
 800094a:	f004 ff9d 	bl	8005888 <xQueueGenericSend>
    osDelay(20);
 800094e:	2014      	movs	r0, #20
 8000950:	f004 fd2b 	bl	80053aa <osDelay>
	 xSemaphoreTake(I2CMutexHandle,portMAX_DELAY);
 8000954:	e7de      	b.n	8000914 <IRTask_Start+0x10>
 8000956:	bf00      	nop
 8000958:	20000370 	.word	0x20000370
 800095c:	200003c4 	.word	0x200003c4
 8000960:	40020000 	.word	0x40020000
 8000964:	200003c9 	.word	0x200003c9

08000968 <I2CSendTask_Start>:
* @param argument: Not used
* @retval None
*/
/* USER CODE END Header_I2CSendTask_Start */
void I2CSendTask_Start(void const * argument)
{
 8000968:	b580      	push	{r7, lr}
 800096a:	b082      	sub	sp, #8
 800096c:	af00      	add	r7, sp, #0
 800096e:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN I2CSendTask_Start */
  /* Infinite loop */
  for(;;)
  {
	 if ((sig = HAL_I2C_Slave_Receive(&hi2c1, (uint8_t*)&rx_buf, TXBUFSIZE, 0xFFFFFFF))!=HAL_OK)
 8000970:	f06f 4370 	mvn.w	r3, #4026531840	@ 0xf0000000
 8000974:	2201      	movs	r2, #1
 8000976:	4922      	ldr	r1, [pc, #136]	@ (8000a00 <I2CSendTask_Start+0x98>)
 8000978:	4822      	ldr	r0, [pc, #136]	@ (8000a04 <I2CSendTask_Start+0x9c>)
 800097a:	f001 f939 	bl	8001bf0 <HAL_I2C_Slave_Receive>
 800097e:	4603      	mov	r3, r0
 8000980:	461a      	mov	r2, r3
 8000982:	4b21      	ldr	r3, [pc, #132]	@ (8000a08 <I2CSendTask_Start+0xa0>)
 8000984:	701a      	strb	r2, [r3, #0]
 8000986:	4b20      	ldr	r3, [pc, #128]	@ (8000a08 <I2CSendTask_Start+0xa0>)
 8000988:	781b      	ldrb	r3, [r3, #0]
 800098a:	2b00      	cmp	r3, #0
 800098c:	d002      	beq.n	8000994 <I2CSendTask_Start+0x2c>
	 {
		 ResetI2C(&hi2c1);
 800098e:	481d      	ldr	r0, [pc, #116]	@ (8000a04 <I2CSendTask_Start+0x9c>)
 8000990:	f7ff fdd0 	bl	8000534 <ResetI2C>
	 }
	 if ((sig == HAL_OK))
 8000994:	4b1c      	ldr	r3, [pc, #112]	@ (8000a08 <I2CSendTask_Start+0xa0>)
 8000996:	781b      	ldrb	r3, [r3, #0]
 8000998:	2b00      	cmp	r3, #0
 800099a:	d12d      	bne.n	80009f8 <I2CSendTask_Start+0x90>
	 {
		 if((sig = HAL_I2C_Slave_Transmit(&hi2c1, (uint8_t*)&tx_buf,TXBUFSIZE, 0x01))!= HAL_OK)
 800099c:	2301      	movs	r3, #1
 800099e:	2201      	movs	r2, #1
 80009a0:	491a      	ldr	r1, [pc, #104]	@ (8000a0c <I2CSendTask_Start+0xa4>)
 80009a2:	4818      	ldr	r0, [pc, #96]	@ (8000a04 <I2CSendTask_Start+0x9c>)
 80009a4:	f001 f80e 	bl	80019c4 <HAL_I2C_Slave_Transmit>
 80009a8:	4603      	mov	r3, r0
 80009aa:	461a      	mov	r2, r3
 80009ac:	4b16      	ldr	r3, [pc, #88]	@ (8000a08 <I2CSendTask_Start+0xa0>)
 80009ae:	701a      	strb	r2, [r3, #0]
 80009b0:	4b15      	ldr	r3, [pc, #84]	@ (8000a08 <I2CSendTask_Start+0xa0>)
 80009b2:	781b      	ldrb	r3, [r3, #0]
 80009b4:	2b00      	cmp	r3, #0
 80009b6:	d003      	beq.n	80009c0 <I2CSendTask_Start+0x58>
		 {
			 ResetI2C(&hi2c1);
 80009b8:	4812      	ldr	r0, [pc, #72]	@ (8000a04 <I2CSendTask_Start+0x9c>)
 80009ba:	f7ff fdbb 	bl	8000534 <ResetI2C>
 80009be:	e01b      	b.n	80009f8 <I2CSendTask_Start+0x90>

		 }
		 else if(rx_buf == 0x02)
 80009c0:	4b0f      	ldr	r3, [pc, #60]	@ (8000a00 <I2CSendTask_Start+0x98>)
 80009c2:	781b      	ldrb	r3, [r3, #0]
 80009c4:	b2db      	uxtb	r3, r3
 80009c6:	2b02      	cmp	r3, #2
 80009c8:	d116      	bne.n	80009f8 <I2CSendTask_Start+0x90>
		 {
			 rx_buf = 0;
 80009ca:	4b0d      	ldr	r3, [pc, #52]	@ (8000a00 <I2CSendTask_Start+0x98>)
 80009cc:	2200      	movs	r2, #0
 80009ce:	701a      	strb	r2, [r3, #0]
			 xSemaphoreTake(I2CMutexHandle, portMAX_DELAY);
 80009d0:	4b0f      	ldr	r3, [pc, #60]	@ (8000a10 <I2CSendTask_Start+0xa8>)
 80009d2:	681b      	ldr	r3, [r3, #0]
 80009d4:	f04f 31ff 	mov.w	r1, #4294967295
 80009d8:	4618      	mov	r0, r3
 80009da:	f005 f857 	bl	8005a8c <xQueueSemaphoreTake>
			 HAL_I2C_Slave_Transmit(&hi2c1,(uint8_t*)&tx_buf,TXBUFSIZE, 0x01);
 80009de:	2301      	movs	r3, #1
 80009e0:	2201      	movs	r2, #1
 80009e2:	490a      	ldr	r1, [pc, #40]	@ (8000a0c <I2CSendTask_Start+0xa4>)
 80009e4:	4807      	ldr	r0, [pc, #28]	@ (8000a04 <I2CSendTask_Start+0x9c>)
 80009e6:	f000 ffed 	bl	80019c4 <HAL_I2C_Slave_Transmit>
			 xSemaphoreGive(I2CMutexHandle);
 80009ea:	4b09      	ldr	r3, [pc, #36]	@ (8000a10 <I2CSendTask_Start+0xa8>)
 80009ec:	6818      	ldr	r0, [r3, #0]
 80009ee:	2300      	movs	r3, #0
 80009f0:	2200      	movs	r2, #0
 80009f2:	2100      	movs	r1, #0
 80009f4:	f004 ff48 	bl	8005888 <xQueueGenericSend>
		 }
	 }
    osDelay(20);
 80009f8:	2014      	movs	r0, #20
 80009fa:	f004 fcd6 	bl	80053aa <osDelay>
	 if ((sig = HAL_I2C_Slave_Receive(&hi2c1, (uint8_t*)&rx_buf, TXBUFSIZE, 0xFFFFFFF))!=HAL_OK)
 80009fe:	e7b7      	b.n	8000970 <I2CSendTask_Start+0x8>
 8000a00:	200003c8 	.word	0x200003c8
 8000a04:	2000031c 	.word	0x2000031c
 8000a08:	200003ca 	.word	0x200003ca
 8000a0c:	200003c9 	.word	0x200003c9
 8000a10:	200003c4 	.word	0x200003c4

08000a14 <HAL_TIM_PeriodElapsedCallback>:
  * a global variable "uwTick" used as application time base.
  * @param  htim : TIM handle
  * @retval None
  */
void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 8000a14:	b580      	push	{r7, lr}
 8000a16:	b082      	sub	sp, #8
 8000a18:	af00      	add	r7, sp, #0
 8000a1a:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN Callback 0 */

  /* USER CODE END Callback 0 */
  if (htim->Instance == TIM2) {
 8000a1c:	687b      	ldr	r3, [r7, #4]
 8000a1e:	681b      	ldr	r3, [r3, #0]
 8000a20:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8000a24:	d101      	bne.n	8000a2a <HAL_TIM_PeriodElapsedCallback+0x16>
    HAL_IncTick();
 8000a26:	f000 fa27 	bl	8000e78 <HAL_IncTick>
  }
  /* USER CODE BEGIN Callback 1 */

  /* USER CODE END Callback 1 */
}
 8000a2a:	bf00      	nop
 8000a2c:	3708      	adds	r7, #8
 8000a2e:	46bd      	mov	sp, r7
 8000a30:	bd80      	pop	{r7, pc}

08000a32 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8000a32:	b480      	push	{r7}
 8000a34:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting special-purpose register PRIMASK.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8000a36:	b672      	cpsid	i
}
 8000a38:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8000a3a:	bf00      	nop
 8000a3c:	e7fd      	b.n	8000a3a <Error_Handler+0x8>
	...

08000a40 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8000a40:	b580      	push	{r7, lr}
 8000a42:	b082      	sub	sp, #8
 8000a44:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8000a46:	2300      	movs	r3, #0
 8000a48:	607b      	str	r3, [r7, #4]
 8000a4a:	4b12      	ldr	r3, [pc, #72]	@ (8000a94 <HAL_MspInit+0x54>)
 8000a4c:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8000a4e:	4a11      	ldr	r2, [pc, #68]	@ (8000a94 <HAL_MspInit+0x54>)
 8000a50:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 8000a54:	6453      	str	r3, [r2, #68]	@ 0x44
 8000a56:	4b0f      	ldr	r3, [pc, #60]	@ (8000a94 <HAL_MspInit+0x54>)
 8000a58:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8000a5a:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8000a5e:	607b      	str	r3, [r7, #4]
 8000a60:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8000a62:	2300      	movs	r3, #0
 8000a64:	603b      	str	r3, [r7, #0]
 8000a66:	4b0b      	ldr	r3, [pc, #44]	@ (8000a94 <HAL_MspInit+0x54>)
 8000a68:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8000a6a:	4a0a      	ldr	r2, [pc, #40]	@ (8000a94 <HAL_MspInit+0x54>)
 8000a6c:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8000a70:	6413      	str	r3, [r2, #64]	@ 0x40
 8000a72:	4b08      	ldr	r3, [pc, #32]	@ (8000a94 <HAL_MspInit+0x54>)
 8000a74:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8000a76:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8000a7a:	603b      	str	r3, [r7, #0]
 8000a7c:	683b      	ldr	r3, [r7, #0]

  /* System interrupt init*/
  /* PendSV_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(PendSV_IRQn, 15, 0);
 8000a7e:	2200      	movs	r2, #0
 8000a80:	210f      	movs	r1, #15
 8000a82:	f06f 0001 	mvn.w	r0, #1
 8000a86:	f000 faf3 	bl	8001070 <HAL_NVIC_SetPriority>

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8000a8a:	bf00      	nop
 8000a8c:	3708      	adds	r7, #8
 8000a8e:	46bd      	mov	sp, r7
 8000a90:	bd80      	pop	{r7, pc}
 8000a92:	bf00      	nop
 8000a94:	40023800 	.word	0x40023800

08000a98 <HAL_I2C_MspInit>:
* This function configures the hardware resources used in this example
* @param hi2c: I2C handle pointer
* @retval None
*/
void HAL_I2C_MspInit(I2C_HandleTypeDef* hi2c)
{
 8000a98:	b580      	push	{r7, lr}
 8000a9a:	b08a      	sub	sp, #40	@ 0x28
 8000a9c:	af00      	add	r7, sp, #0
 8000a9e:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000aa0:	f107 0314 	add.w	r3, r7, #20
 8000aa4:	2200      	movs	r2, #0
 8000aa6:	601a      	str	r2, [r3, #0]
 8000aa8:	605a      	str	r2, [r3, #4]
 8000aaa:	609a      	str	r2, [r3, #8]
 8000aac:	60da      	str	r2, [r3, #12]
 8000aae:	611a      	str	r2, [r3, #16]
  if(hi2c->Instance==I2C1)
 8000ab0:	687b      	ldr	r3, [r7, #4]
 8000ab2:	681b      	ldr	r3, [r3, #0]
 8000ab4:	4a21      	ldr	r2, [pc, #132]	@ (8000b3c <HAL_I2C_MspInit+0xa4>)
 8000ab6:	4293      	cmp	r3, r2
 8000ab8:	d13c      	bne.n	8000b34 <HAL_I2C_MspInit+0x9c>
  {
  /* USER CODE BEGIN I2C1_MspInit 0 */

  /* USER CODE END I2C1_MspInit 0 */

    __HAL_RCC_GPIOB_CLK_ENABLE();
 8000aba:	2300      	movs	r3, #0
 8000abc:	613b      	str	r3, [r7, #16]
 8000abe:	4b20      	ldr	r3, [pc, #128]	@ (8000b40 <HAL_I2C_MspInit+0xa8>)
 8000ac0:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000ac2:	4a1f      	ldr	r2, [pc, #124]	@ (8000b40 <HAL_I2C_MspInit+0xa8>)
 8000ac4:	f043 0302 	orr.w	r3, r3, #2
 8000ac8:	6313      	str	r3, [r2, #48]	@ 0x30
 8000aca:	4b1d      	ldr	r3, [pc, #116]	@ (8000b40 <HAL_I2C_MspInit+0xa8>)
 8000acc:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000ace:	f003 0302 	and.w	r3, r3, #2
 8000ad2:	613b      	str	r3, [r7, #16]
 8000ad4:	693b      	ldr	r3, [r7, #16]
    /**I2C1 GPIO Configuration
    PB8     ------> I2C1_SCL
    PB9     ------> I2C1_SDA
    */
    GPIO_InitStruct.Pin = GPIO_PIN_8|GPIO_PIN_9;
 8000ad6:	f44f 7340 	mov.w	r3, #768	@ 0x300
 8000ada:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8000adc:	2312      	movs	r3, #18
 8000ade:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000ae0:	2300      	movs	r3, #0
 8000ae2:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000ae4:	2303      	movs	r3, #3
 8000ae6:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C1;
 8000ae8:	2304      	movs	r3, #4
 8000aea:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000aec:	f107 0314 	add.w	r3, r7, #20
 8000af0:	4619      	mov	r1, r3
 8000af2:	4814      	ldr	r0, [pc, #80]	@ (8000b44 <HAL_I2C_MspInit+0xac>)
 8000af4:	f000 fb24 	bl	8001140 <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_I2C1_CLK_ENABLE();
 8000af8:	2300      	movs	r3, #0
 8000afa:	60fb      	str	r3, [r7, #12]
 8000afc:	4b10      	ldr	r3, [pc, #64]	@ (8000b40 <HAL_I2C_MspInit+0xa8>)
 8000afe:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8000b00:	4a0f      	ldr	r2, [pc, #60]	@ (8000b40 <HAL_I2C_MspInit+0xa8>)
 8000b02:	f443 1300 	orr.w	r3, r3, #2097152	@ 0x200000
 8000b06:	6413      	str	r3, [r2, #64]	@ 0x40
 8000b08:	4b0d      	ldr	r3, [pc, #52]	@ (8000b40 <HAL_I2C_MspInit+0xa8>)
 8000b0a:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8000b0c:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 8000b10:	60fb      	str	r3, [r7, #12]
 8000b12:	68fb      	ldr	r3, [r7, #12]
    /* I2C1 interrupt Init */
    HAL_NVIC_SetPriority(I2C1_EV_IRQn, 5, 0);
 8000b14:	2200      	movs	r2, #0
 8000b16:	2105      	movs	r1, #5
 8000b18:	201f      	movs	r0, #31
 8000b1a:	f000 faa9 	bl	8001070 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(I2C1_EV_IRQn);
 8000b1e:	201f      	movs	r0, #31
 8000b20:	f000 fac2 	bl	80010a8 <HAL_NVIC_EnableIRQ>
    HAL_NVIC_SetPriority(I2C1_ER_IRQn, 5, 0);
 8000b24:	2200      	movs	r2, #0
 8000b26:	2105      	movs	r1, #5
 8000b28:	2020      	movs	r0, #32
 8000b2a:	f000 faa1 	bl	8001070 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(I2C1_ER_IRQn);
 8000b2e:	2020      	movs	r0, #32
 8000b30:	f000 faba 	bl	80010a8 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN I2C1_MspInit 1 */

  /* USER CODE END I2C1_MspInit 1 */
  }

}
 8000b34:	bf00      	nop
 8000b36:	3728      	adds	r7, #40	@ 0x28
 8000b38:	46bd      	mov	sp, r7
 8000b3a:	bd80      	pop	{r7, pc}
 8000b3c:	40005400 	.word	0x40005400
 8000b40:	40023800 	.word	0x40023800
 8000b44:	40020400 	.word	0x40020400

08000b48 <HAL_I2C_MspDeInit>:
* This function freeze the hardware resources used in this example
* @param hi2c: I2C handle pointer
* @retval None
*/
void HAL_I2C_MspDeInit(I2C_HandleTypeDef* hi2c)
{
 8000b48:	b580      	push	{r7, lr}
 8000b4a:	b082      	sub	sp, #8
 8000b4c:	af00      	add	r7, sp, #0
 8000b4e:	6078      	str	r0, [r7, #4]
  if(hi2c->Instance==I2C1)
 8000b50:	687b      	ldr	r3, [r7, #4]
 8000b52:	681b      	ldr	r3, [r3, #0]
 8000b54:	4a0e      	ldr	r2, [pc, #56]	@ (8000b90 <HAL_I2C_MspDeInit+0x48>)
 8000b56:	4293      	cmp	r3, r2
 8000b58:	d115      	bne.n	8000b86 <HAL_I2C_MspDeInit+0x3e>
  {
  /* USER CODE BEGIN I2C1_MspDeInit 0 */

  /* USER CODE END I2C1_MspDeInit 0 */
    /* Peripheral clock disable */
    __HAL_RCC_I2C1_CLK_DISABLE();
 8000b5a:	4b0e      	ldr	r3, [pc, #56]	@ (8000b94 <HAL_I2C_MspDeInit+0x4c>)
 8000b5c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8000b5e:	4a0d      	ldr	r2, [pc, #52]	@ (8000b94 <HAL_I2C_MspDeInit+0x4c>)
 8000b60:	f423 1300 	bic.w	r3, r3, #2097152	@ 0x200000
 8000b64:	6413      	str	r3, [r2, #64]	@ 0x40

    /**I2C1 GPIO Configuration
    PB8     ------> I2C1_SCL
    PB9     ------> I2C1_SDA
    */
    HAL_GPIO_DeInit(GPIOB, GPIO_PIN_8);
 8000b66:	f44f 7180 	mov.w	r1, #256	@ 0x100
 8000b6a:	480b      	ldr	r0, [pc, #44]	@ (8000b98 <HAL_I2C_MspDeInit+0x50>)
 8000b6c:	f000 fc7c 	bl	8001468 <HAL_GPIO_DeInit>

    HAL_GPIO_DeInit(GPIOB, GPIO_PIN_9);
 8000b70:	f44f 7100 	mov.w	r1, #512	@ 0x200
 8000b74:	4808      	ldr	r0, [pc, #32]	@ (8000b98 <HAL_I2C_MspDeInit+0x50>)
 8000b76:	f000 fc77 	bl	8001468 <HAL_GPIO_DeInit>

    /* I2C1 interrupt DeInit */
    HAL_NVIC_DisableIRQ(I2C1_EV_IRQn);
 8000b7a:	201f      	movs	r0, #31
 8000b7c:	f000 faa2 	bl	80010c4 <HAL_NVIC_DisableIRQ>
    HAL_NVIC_DisableIRQ(I2C1_ER_IRQn);
 8000b80:	2020      	movs	r0, #32
 8000b82:	f000 fa9f 	bl	80010c4 <HAL_NVIC_DisableIRQ>
  /* USER CODE BEGIN I2C1_MspDeInit 1 */

  /* USER CODE END I2C1_MspDeInit 1 */
  }

}
 8000b86:	bf00      	nop
 8000b88:	3708      	adds	r7, #8
 8000b8a:	46bd      	mov	sp, r7
 8000b8c:	bd80      	pop	{r7, pc}
 8000b8e:	bf00      	nop
 8000b90:	40005400 	.word	0x40005400
 8000b94:	40023800 	.word	0x40023800
 8000b98:	40020400 	.word	0x40020400

08000b9c <HAL_TIM_IC_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_ic: TIM_IC handle pointer
* @retval None
*/
void HAL_TIM_IC_MspInit(TIM_HandleTypeDef* htim_ic)
{
 8000b9c:	b580      	push	{r7, lr}
 8000b9e:	b08a      	sub	sp, #40	@ 0x28
 8000ba0:	af00      	add	r7, sp, #0
 8000ba2:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000ba4:	f107 0314 	add.w	r3, r7, #20
 8000ba8:	2200      	movs	r2, #0
 8000baa:	601a      	str	r2, [r3, #0]
 8000bac:	605a      	str	r2, [r3, #4]
 8000bae:	609a      	str	r2, [r3, #8]
 8000bb0:	60da      	str	r2, [r3, #12]
 8000bb2:	611a      	str	r2, [r3, #16]
  if(htim_ic->Instance==TIM1)
 8000bb4:	687b      	ldr	r3, [r7, #4]
 8000bb6:	681b      	ldr	r3, [r3, #0]
 8000bb8:	4a1d      	ldr	r2, [pc, #116]	@ (8000c30 <HAL_TIM_IC_MspInit+0x94>)
 8000bba:	4293      	cmp	r3, r2
 8000bbc:	d134      	bne.n	8000c28 <HAL_TIM_IC_MspInit+0x8c>
  {
  /* USER CODE BEGIN TIM1_MspInit 0 */

  /* USER CODE END TIM1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM1_CLK_ENABLE();
 8000bbe:	2300      	movs	r3, #0
 8000bc0:	613b      	str	r3, [r7, #16]
 8000bc2:	4b1c      	ldr	r3, [pc, #112]	@ (8000c34 <HAL_TIM_IC_MspInit+0x98>)
 8000bc4:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8000bc6:	4a1b      	ldr	r2, [pc, #108]	@ (8000c34 <HAL_TIM_IC_MspInit+0x98>)
 8000bc8:	f043 0301 	orr.w	r3, r3, #1
 8000bcc:	6453      	str	r3, [r2, #68]	@ 0x44
 8000bce:	4b19      	ldr	r3, [pc, #100]	@ (8000c34 <HAL_TIM_IC_MspInit+0x98>)
 8000bd0:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8000bd2:	f003 0301 	and.w	r3, r3, #1
 8000bd6:	613b      	str	r3, [r7, #16]
 8000bd8:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000bda:	2300      	movs	r3, #0
 8000bdc:	60fb      	str	r3, [r7, #12]
 8000bde:	4b15      	ldr	r3, [pc, #84]	@ (8000c34 <HAL_TIM_IC_MspInit+0x98>)
 8000be0:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000be2:	4a14      	ldr	r2, [pc, #80]	@ (8000c34 <HAL_TIM_IC_MspInit+0x98>)
 8000be4:	f043 0301 	orr.w	r3, r3, #1
 8000be8:	6313      	str	r3, [r2, #48]	@ 0x30
 8000bea:	4b12      	ldr	r3, [pc, #72]	@ (8000c34 <HAL_TIM_IC_MspInit+0x98>)
 8000bec:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000bee:	f003 0301 	and.w	r3, r3, #1
 8000bf2:	60fb      	str	r3, [r7, #12]
 8000bf4:	68fb      	ldr	r3, [r7, #12]
    /**TIM1 GPIO Configuration
    PA8     ------> TIM1_CH1
    */
    GPIO_InitStruct.Pin = GPIO_PIN_8;
 8000bf6:	f44f 7380 	mov.w	r3, #256	@ 0x100
 8000bfa:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000bfc:	2302      	movs	r3, #2
 8000bfe:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000c00:	2300      	movs	r3, #0
 8000c02:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000c04:	2300      	movs	r3, #0
 8000c06:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF1_TIM1;
 8000c08:	2301      	movs	r3, #1
 8000c0a:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000c0c:	f107 0314 	add.w	r3, r7, #20
 8000c10:	4619      	mov	r1, r3
 8000c12:	4809      	ldr	r0, [pc, #36]	@ (8000c38 <HAL_TIM_IC_MspInit+0x9c>)
 8000c14:	f000 fa94 	bl	8001140 <HAL_GPIO_Init>

    /* TIM1 interrupt Init */
    HAL_NVIC_SetPriority(TIM1_CC_IRQn, 5, 0);
 8000c18:	2200      	movs	r2, #0
 8000c1a:	2105      	movs	r1, #5
 8000c1c:	201b      	movs	r0, #27
 8000c1e:	f000 fa27 	bl	8001070 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM1_CC_IRQn);
 8000c22:	201b      	movs	r0, #27
 8000c24:	f000 fa40 	bl	80010a8 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN TIM1_MspInit 1 */

  /* USER CODE END TIM1_MspInit 1 */
  }

}
 8000c28:	bf00      	nop
 8000c2a:	3728      	adds	r7, #40	@ 0x28
 8000c2c:	46bd      	mov	sp, r7
 8000c2e:	bd80      	pop	{r7, pc}
 8000c30:	40010000 	.word	0x40010000
 8000c34:	40023800 	.word	0x40023800
 8000c38:	40020000 	.word	0x40020000

08000c3c <HAL_InitTick>:
  *         reset by HAL_Init() or at any time when clock is configured, by HAL_RCC_ClockConfig().
  * @param  TickPriority: Tick interrupt priority.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8000c3c:	b580      	push	{r7, lr}
 8000c3e:	b08e      	sub	sp, #56	@ 0x38
 8000c40:	af00      	add	r7, sp, #0
 8000c42:	6078      	str	r0, [r7, #4]
  RCC_ClkInitTypeDef    clkconfig;
  uint32_t              uwTimclock, uwAPB1Prescaler = 0U;
 8000c44:	2300      	movs	r3, #0
 8000c46:	62fb      	str	r3, [r7, #44]	@ 0x2c

  uint32_t              uwPrescalerValue = 0U;
 8000c48:	2300      	movs	r3, #0
 8000c4a:	62bb      	str	r3, [r7, #40]	@ 0x28
  uint32_t              pFLatency;
  HAL_StatusTypeDef     status;

  /* Enable TIM2 clock */
  __HAL_RCC_TIM2_CLK_ENABLE();
 8000c4c:	2300      	movs	r3, #0
 8000c4e:	60fb      	str	r3, [r7, #12]
 8000c50:	4b34      	ldr	r3, [pc, #208]	@ (8000d24 <HAL_InitTick+0xe8>)
 8000c52:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8000c54:	4a33      	ldr	r2, [pc, #204]	@ (8000d24 <HAL_InitTick+0xe8>)
 8000c56:	f043 0301 	orr.w	r3, r3, #1
 8000c5a:	6413      	str	r3, [r2, #64]	@ 0x40
 8000c5c:	4b31      	ldr	r3, [pc, #196]	@ (8000d24 <HAL_InitTick+0xe8>)
 8000c5e:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8000c60:	f003 0301 	and.w	r3, r3, #1
 8000c64:	60fb      	str	r3, [r7, #12]
 8000c66:	68fb      	ldr	r3, [r7, #12]

  /* Get clock configuration */
  HAL_RCC_GetClockConfig(&clkconfig, &pFLatency);
 8000c68:	f107 0210 	add.w	r2, r7, #16
 8000c6c:	f107 0314 	add.w	r3, r7, #20
 8000c70:	4611      	mov	r1, r2
 8000c72:	4618      	mov	r0, r3
 8000c74:	f003 f832 	bl	8003cdc <HAL_RCC_GetClockConfig>

  /* Get APB1 prescaler */
  uwAPB1Prescaler = clkconfig.APB1CLKDivider;
 8000c78:	6a3b      	ldr	r3, [r7, #32]
 8000c7a:	62fb      	str	r3, [r7, #44]	@ 0x2c
  /* Compute TIM2 clock */
  if (uwAPB1Prescaler == RCC_HCLK_DIV1)
 8000c7c:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8000c7e:	2b00      	cmp	r3, #0
 8000c80:	d103      	bne.n	8000c8a <HAL_InitTick+0x4e>
  {
    uwTimclock = HAL_RCC_GetPCLK1Freq();
 8000c82:	f003 f817 	bl	8003cb4 <HAL_RCC_GetPCLK1Freq>
 8000c86:	6378      	str	r0, [r7, #52]	@ 0x34
 8000c88:	e004      	b.n	8000c94 <HAL_InitTick+0x58>
  }
  else
  {
    uwTimclock = 2UL * HAL_RCC_GetPCLK1Freq();
 8000c8a:	f003 f813 	bl	8003cb4 <HAL_RCC_GetPCLK1Freq>
 8000c8e:	4603      	mov	r3, r0
 8000c90:	005b      	lsls	r3, r3, #1
 8000c92:	637b      	str	r3, [r7, #52]	@ 0x34
  }

  /* Compute the prescaler value to have TIM2 counter clock equal to 1MHz */
  uwPrescalerValue = (uint32_t) ((uwTimclock / 1000000U) - 1U);
 8000c94:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8000c96:	4a24      	ldr	r2, [pc, #144]	@ (8000d28 <HAL_InitTick+0xec>)
 8000c98:	fba2 2303 	umull	r2, r3, r2, r3
 8000c9c:	0c9b      	lsrs	r3, r3, #18
 8000c9e:	3b01      	subs	r3, #1
 8000ca0:	62bb      	str	r3, [r7, #40]	@ 0x28

  /* Initialize TIM2 */
  htim2.Instance = TIM2;
 8000ca2:	4b22      	ldr	r3, [pc, #136]	@ (8000d2c <HAL_InitTick+0xf0>)
 8000ca4:	f04f 4280 	mov.w	r2, #1073741824	@ 0x40000000
 8000ca8:	601a      	str	r2, [r3, #0]
  + Period = [(TIM2CLK/1000) - 1]. to have a (1/1000) s time base.
  + Prescaler = (uwTimclock/1000000 - 1) to have a 1MHz counter clock.
  + ClockDivision = 0
  + Counter direction = Up
  */
  htim2.Init.Period = (1000000U / 1000U) - 1U;
 8000caa:	4b20      	ldr	r3, [pc, #128]	@ (8000d2c <HAL_InitTick+0xf0>)
 8000cac:	f240 32e7 	movw	r2, #999	@ 0x3e7
 8000cb0:	60da      	str	r2, [r3, #12]
  htim2.Init.Prescaler = uwPrescalerValue;
 8000cb2:	4a1e      	ldr	r2, [pc, #120]	@ (8000d2c <HAL_InitTick+0xf0>)
 8000cb4:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8000cb6:	6053      	str	r3, [r2, #4]
  htim2.Init.ClockDivision = 0;
 8000cb8:	4b1c      	ldr	r3, [pc, #112]	@ (8000d2c <HAL_InitTick+0xf0>)
 8000cba:	2200      	movs	r2, #0
 8000cbc:	611a      	str	r2, [r3, #16]
  htim2.Init.CounterMode = TIM_COUNTERMODE_UP;
 8000cbe:	4b1b      	ldr	r3, [pc, #108]	@ (8000d2c <HAL_InitTick+0xf0>)
 8000cc0:	2200      	movs	r2, #0
 8000cc2:	609a      	str	r2, [r3, #8]
  htim2.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8000cc4:	4b19      	ldr	r3, [pc, #100]	@ (8000d2c <HAL_InitTick+0xf0>)
 8000cc6:	2200      	movs	r2, #0
 8000cc8:	619a      	str	r2, [r3, #24]

  status = HAL_TIM_Base_Init(&htim2);
 8000cca:	4818      	ldr	r0, [pc, #96]	@ (8000d2c <HAL_InitTick+0xf0>)
 8000ccc:	f003 fc80 	bl	80045d0 <HAL_TIM_Base_Init>
 8000cd0:	4603      	mov	r3, r0
 8000cd2:	f887 3033 	strb.w	r3, [r7, #51]	@ 0x33
  if (status == HAL_OK)
 8000cd6:	f897 3033 	ldrb.w	r3, [r7, #51]	@ 0x33
 8000cda:	2b00      	cmp	r3, #0
 8000cdc:	d11b      	bne.n	8000d16 <HAL_InitTick+0xda>
  {
    /* Start the TIM time Base generation in interrupt mode */
    status = HAL_TIM_Base_Start_IT(&htim2);
 8000cde:	4813      	ldr	r0, [pc, #76]	@ (8000d2c <HAL_InitTick+0xf0>)
 8000ce0:	f003 fcd0 	bl	8004684 <HAL_TIM_Base_Start_IT>
 8000ce4:	4603      	mov	r3, r0
 8000ce6:	f887 3033 	strb.w	r3, [r7, #51]	@ 0x33
    if (status == HAL_OK)
 8000cea:	f897 3033 	ldrb.w	r3, [r7, #51]	@ 0x33
 8000cee:	2b00      	cmp	r3, #0
 8000cf0:	d111      	bne.n	8000d16 <HAL_InitTick+0xda>
    {
    /* Enable the TIM2 global Interrupt */
        HAL_NVIC_EnableIRQ(TIM2_IRQn);
 8000cf2:	201c      	movs	r0, #28
 8000cf4:	f000 f9d8 	bl	80010a8 <HAL_NVIC_EnableIRQ>
      /* Configure the SysTick IRQ priority */
      if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8000cf8:	687b      	ldr	r3, [r7, #4]
 8000cfa:	2b0f      	cmp	r3, #15
 8000cfc:	d808      	bhi.n	8000d10 <HAL_InitTick+0xd4>
      {
        /* Configure the TIM IRQ priority */
        HAL_NVIC_SetPriority(TIM2_IRQn, TickPriority, 0U);
 8000cfe:	2200      	movs	r2, #0
 8000d00:	6879      	ldr	r1, [r7, #4]
 8000d02:	201c      	movs	r0, #28
 8000d04:	f000 f9b4 	bl	8001070 <HAL_NVIC_SetPriority>
        uwTickPrio = TickPriority;
 8000d08:	4a09      	ldr	r2, [pc, #36]	@ (8000d30 <HAL_InitTick+0xf4>)
 8000d0a:	687b      	ldr	r3, [r7, #4]
 8000d0c:	6013      	str	r3, [r2, #0]
 8000d0e:	e002      	b.n	8000d16 <HAL_InitTick+0xda>
      }
      else
      {
        status = HAL_ERROR;
 8000d10:	2301      	movs	r3, #1
 8000d12:	f887 3033 	strb.w	r3, [r7, #51]	@ 0x33
      }
    }
  }

 /* Return function status */
  return status;
 8000d16:	f897 3033 	ldrb.w	r3, [r7, #51]	@ 0x33
}
 8000d1a:	4618      	mov	r0, r3
 8000d1c:	3738      	adds	r7, #56	@ 0x38
 8000d1e:	46bd      	mov	sp, r7
 8000d20:	bd80      	pop	{r7, pc}
 8000d22:	bf00      	nop
 8000d24:	40023800 	.word	0x40023800
 8000d28:	431bde83 	.word	0x431bde83
 8000d2c:	200003cc 	.word	0x200003cc
 8000d30:	20000004 	.word	0x20000004

08000d34 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8000d34:	b480      	push	{r7}
 8000d36:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
   while (1)
 8000d38:	bf00      	nop
 8000d3a:	e7fd      	b.n	8000d38 <NMI_Handler+0x4>

08000d3c <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8000d3c:	b480      	push	{r7}
 8000d3e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8000d40:	bf00      	nop
 8000d42:	e7fd      	b.n	8000d40 <HardFault_Handler+0x4>

08000d44 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8000d44:	b480      	push	{r7}
 8000d46:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8000d48:	bf00      	nop
 8000d4a:	e7fd      	b.n	8000d48 <MemManage_Handler+0x4>

08000d4c <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8000d4c:	b480      	push	{r7}
 8000d4e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8000d50:	bf00      	nop
 8000d52:	e7fd      	b.n	8000d50 <BusFault_Handler+0x4>

08000d54 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8000d54:	b480      	push	{r7}
 8000d56:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8000d58:	bf00      	nop
 8000d5a:	e7fd      	b.n	8000d58 <UsageFault_Handler+0x4>

08000d5c <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8000d5c:	b480      	push	{r7}
 8000d5e:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8000d60:	bf00      	nop
 8000d62:	46bd      	mov	sp, r7
 8000d64:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000d68:	4770      	bx	lr
	...

08000d6c <TIM1_CC_IRQHandler>:

/**
  * @brief This function handles TIM1 capture compare interrupt.
  */
void TIM1_CC_IRQHandler(void)
{
 8000d6c:	b580      	push	{r7, lr}
 8000d6e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM1_CC_IRQn 0 */

  /* USER CODE END TIM1_CC_IRQn 0 */
  HAL_TIM_IRQHandler(&htim1);
 8000d70:	4802      	ldr	r0, [pc, #8]	@ (8000d7c <TIM1_CC_IRQHandler+0x10>)
 8000d72:	f003 fe6f 	bl	8004a54 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM1_CC_IRQn 1 */

  /* USER CODE END TIM1_CC_IRQn 1 */
}
 8000d76:	bf00      	nop
 8000d78:	bd80      	pop	{r7, pc}
 8000d7a:	bf00      	nop
 8000d7c:	20000370 	.word	0x20000370

08000d80 <TIM2_IRQHandler>:

/**
  * @brief This function handles TIM2 global interrupt.
  */
void TIM2_IRQHandler(void)
{
 8000d80:	b580      	push	{r7, lr}
 8000d82:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM2_IRQn 0 */

  /* USER CODE END TIM2_IRQn 0 */
  HAL_TIM_IRQHandler(&htim2);
 8000d84:	4802      	ldr	r0, [pc, #8]	@ (8000d90 <TIM2_IRQHandler+0x10>)
 8000d86:	f003 fe65 	bl	8004a54 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM2_IRQn 1 */

  /* USER CODE END TIM2_IRQn 1 */
}
 8000d8a:	bf00      	nop
 8000d8c:	bd80      	pop	{r7, pc}
 8000d8e:	bf00      	nop
 8000d90:	200003cc 	.word	0x200003cc

08000d94 <I2C1_EV_IRQHandler>:

/**
  * @brief This function handles I2C1 event interrupt.
  */
void I2C1_EV_IRQHandler(void)
{
 8000d94:	b580      	push	{r7, lr}
 8000d96:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN I2C1_EV_IRQn 0 */

  /* USER CODE END I2C1_EV_IRQn 0 */
  HAL_I2C_EV_IRQHandler(&hi2c1);
 8000d98:	4802      	ldr	r0, [pc, #8]	@ (8000da4 <I2C1_EV_IRQHandler+0x10>)
 8000d9a:	f001 f833 	bl	8001e04 <HAL_I2C_EV_IRQHandler>
  /* USER CODE BEGIN I2C1_EV_IRQn 1 */

  /* USER CODE END I2C1_EV_IRQn 1 */
}
 8000d9e:	bf00      	nop
 8000da0:	bd80      	pop	{r7, pc}
 8000da2:	bf00      	nop
 8000da4:	2000031c 	.word	0x2000031c

08000da8 <I2C1_ER_IRQHandler>:

/**
  * @brief This function handles I2C1 error interrupt.
  */
void I2C1_ER_IRQHandler(void)
{
 8000da8:	b580      	push	{r7, lr}
 8000daa:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN I2C1_ER_IRQn 0 */

  /* USER CODE END I2C1_ER_IRQn 0 */
  HAL_I2C_ER_IRQHandler(&hi2c1);
 8000dac:	4802      	ldr	r0, [pc, #8]	@ (8000db8 <I2C1_ER_IRQHandler+0x10>)
 8000dae:	f001 f97c 	bl	80020aa <HAL_I2C_ER_IRQHandler>
  /* USER CODE BEGIN I2C1_ER_IRQn 1 */

  /* USER CODE END I2C1_ER_IRQn 1 */
}
 8000db2:	bf00      	nop
 8000db4:	bd80      	pop	{r7, pc}
 8000db6:	bf00      	nop
 8000db8:	2000031c 	.word	0x2000031c

08000dbc <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8000dbc:	b480      	push	{r7}
 8000dbe:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8000dc0:	4b06      	ldr	r3, [pc, #24]	@ (8000ddc <SystemInit+0x20>)
 8000dc2:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8000dc6:	4a05      	ldr	r2, [pc, #20]	@ (8000ddc <SystemInit+0x20>)
 8000dc8:	f443 0370 	orr.w	r3, r3, #15728640	@ 0xf00000
 8000dcc:	f8c2 3088 	str.w	r3, [r2, #136]	@ 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8000dd0:	bf00      	nop
 8000dd2:	46bd      	mov	sp, r7
 8000dd4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000dd8:	4770      	bx	lr
 8000dda:	bf00      	nop
 8000ddc:	e000ed00 	.word	0xe000ed00

08000de0 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack      /* set stack pointer */
 8000de0:	f8df d034 	ldr.w	sp, [pc, #52]	@ 8000e18 <LoopFillZerobss+0xe>
  
/* Call the clock system initialization function.*/
  bl  SystemInit  
 8000de4:	f7ff ffea 	bl	8000dbc <SystemInit>

/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
 8000de8:	480c      	ldr	r0, [pc, #48]	@ (8000e1c <LoopFillZerobss+0x12>)
  ldr r1, =_edata
 8000dea:	490d      	ldr	r1, [pc, #52]	@ (8000e20 <LoopFillZerobss+0x16>)
  ldr r2, =_sidata
 8000dec:	4a0d      	ldr	r2, [pc, #52]	@ (8000e24 <LoopFillZerobss+0x1a>)
  movs r3, #0
 8000dee:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8000df0:	e002      	b.n	8000df8 <LoopCopyDataInit>

08000df2 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8000df2:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8000df4:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8000df6:	3304      	adds	r3, #4

08000df8 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8000df8:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8000dfa:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8000dfc:	d3f9      	bcc.n	8000df2 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8000dfe:	4a0a      	ldr	r2, [pc, #40]	@ (8000e28 <LoopFillZerobss+0x1e>)
  ldr r4, =_ebss
 8000e00:	4c0a      	ldr	r4, [pc, #40]	@ (8000e2c <LoopFillZerobss+0x22>)
  movs r3, #0
 8000e02:	2300      	movs	r3, #0
  b LoopFillZerobss
 8000e04:	e001      	b.n	8000e0a <LoopFillZerobss>

08000e06 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8000e06:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8000e08:	3204      	adds	r2, #4

08000e0a <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8000e0a:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8000e0c:	d3fb      	bcc.n	8000e06 <FillZerobss>
  
/* Call static constructors */
    bl __libc_init_array
 8000e0e:	f006 fcd7 	bl	80077c0 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 8000e12:	f7ff fb9d 	bl	8000550 <main>
  bx  lr    
 8000e16:	4770      	bx	lr
  ldr   sp, =_estack      /* set stack pointer */
 8000e18:	20020000 	.word	0x20020000
  ldr r0, =_sdata
 8000e1c:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8000e20:	20000060 	.word	0x20000060
  ldr r2, =_sidata
 8000e24:	08007994 	.word	0x08007994
  ldr r2, =_sbss
 8000e28:	20000060 	.word	0x20000060
  ldr r4, =_ebss
 8000e2c:	200042ac 	.word	0x200042ac

08000e30 <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8000e30:	e7fe      	b.n	8000e30 <ADC_IRQHandler>
	...

08000e34 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8000e34:	b580      	push	{r7, lr}
 8000e36:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 8000e38:	4b0e      	ldr	r3, [pc, #56]	@ (8000e74 <HAL_Init+0x40>)
 8000e3a:	681b      	ldr	r3, [r3, #0]
 8000e3c:	4a0d      	ldr	r2, [pc, #52]	@ (8000e74 <HAL_Init+0x40>)
 8000e3e:	f443 7300 	orr.w	r3, r3, #512	@ 0x200
 8000e42:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 8000e44:	4b0b      	ldr	r3, [pc, #44]	@ (8000e74 <HAL_Init+0x40>)
 8000e46:	681b      	ldr	r3, [r3, #0]
 8000e48:	4a0a      	ldr	r2, [pc, #40]	@ (8000e74 <HAL_Init+0x40>)
 8000e4a:	f443 6380 	orr.w	r3, r3, #1024	@ 0x400
 8000e4e:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8000e50:	4b08      	ldr	r3, [pc, #32]	@ (8000e74 <HAL_Init+0x40>)
 8000e52:	681b      	ldr	r3, [r3, #0]
 8000e54:	4a07      	ldr	r2, [pc, #28]	@ (8000e74 <HAL_Init+0x40>)
 8000e56:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8000e5a:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8000e5c:	2003      	movs	r0, #3
 8000e5e:	f000 f8fc 	bl	800105a <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8000e62:	200f      	movs	r0, #15
 8000e64:	f7ff feea 	bl	8000c3c <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8000e68:	f7ff fdea 	bl	8000a40 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8000e6c:	2300      	movs	r3, #0
}
 8000e6e:	4618      	mov	r0, r3
 8000e70:	bd80      	pop	{r7, pc}
 8000e72:	bf00      	nop
 8000e74:	40023c00 	.word	0x40023c00

08000e78 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8000e78:	b480      	push	{r7}
 8000e7a:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8000e7c:	4b06      	ldr	r3, [pc, #24]	@ (8000e98 <HAL_IncTick+0x20>)
 8000e7e:	781b      	ldrb	r3, [r3, #0]
 8000e80:	461a      	mov	r2, r3
 8000e82:	4b06      	ldr	r3, [pc, #24]	@ (8000e9c <HAL_IncTick+0x24>)
 8000e84:	681b      	ldr	r3, [r3, #0]
 8000e86:	4413      	add	r3, r2
 8000e88:	4a04      	ldr	r2, [pc, #16]	@ (8000e9c <HAL_IncTick+0x24>)
 8000e8a:	6013      	str	r3, [r2, #0]
}
 8000e8c:	bf00      	nop
 8000e8e:	46bd      	mov	sp, r7
 8000e90:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000e94:	4770      	bx	lr
 8000e96:	bf00      	nop
 8000e98:	20000008 	.word	0x20000008
 8000e9c:	20000414 	.word	0x20000414

08000ea0 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8000ea0:	b480      	push	{r7}
 8000ea2:	af00      	add	r7, sp, #0
  return uwTick;
 8000ea4:	4b03      	ldr	r3, [pc, #12]	@ (8000eb4 <HAL_GetTick+0x14>)
 8000ea6:	681b      	ldr	r3, [r3, #0]
}
 8000ea8:	4618      	mov	r0, r3
 8000eaa:	46bd      	mov	sp, r7
 8000eac:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000eb0:	4770      	bx	lr
 8000eb2:	bf00      	nop
 8000eb4:	20000414 	.word	0x20000414

08000eb8 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8000eb8:	b480      	push	{r7}
 8000eba:	b085      	sub	sp, #20
 8000ebc:	af00      	add	r7, sp, #0
 8000ebe:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8000ec0:	687b      	ldr	r3, [r7, #4]
 8000ec2:	f003 0307 	and.w	r3, r3, #7
 8000ec6:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8000ec8:	4b0c      	ldr	r3, [pc, #48]	@ (8000efc <__NVIC_SetPriorityGrouping+0x44>)
 8000eca:	68db      	ldr	r3, [r3, #12]
 8000ecc:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8000ece:	68ba      	ldr	r2, [r7, #8]
 8000ed0:	f64f 03ff 	movw	r3, #63743	@ 0xf8ff
 8000ed4:	4013      	ands	r3, r2
 8000ed6:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8000ed8:	68fb      	ldr	r3, [r7, #12]
 8000eda:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8000edc:	68bb      	ldr	r3, [r7, #8]
 8000ede:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8000ee0:	f043 63bf 	orr.w	r3, r3, #100139008	@ 0x5f80000
 8000ee4:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8000ee8:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8000eea:	4a04      	ldr	r2, [pc, #16]	@ (8000efc <__NVIC_SetPriorityGrouping+0x44>)
 8000eec:	68bb      	ldr	r3, [r7, #8]
 8000eee:	60d3      	str	r3, [r2, #12]
}
 8000ef0:	bf00      	nop
 8000ef2:	3714      	adds	r7, #20
 8000ef4:	46bd      	mov	sp, r7
 8000ef6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000efa:	4770      	bx	lr
 8000efc:	e000ed00 	.word	0xe000ed00

08000f00 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8000f00:	b480      	push	{r7}
 8000f02:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8000f04:	4b04      	ldr	r3, [pc, #16]	@ (8000f18 <__NVIC_GetPriorityGrouping+0x18>)
 8000f06:	68db      	ldr	r3, [r3, #12]
 8000f08:	0a1b      	lsrs	r3, r3, #8
 8000f0a:	f003 0307 	and.w	r3, r3, #7
}
 8000f0e:	4618      	mov	r0, r3
 8000f10:	46bd      	mov	sp, r7
 8000f12:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000f16:	4770      	bx	lr
 8000f18:	e000ed00 	.word	0xe000ed00

08000f1c <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8000f1c:	b480      	push	{r7}
 8000f1e:	b083      	sub	sp, #12
 8000f20:	af00      	add	r7, sp, #0
 8000f22:	4603      	mov	r3, r0
 8000f24:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8000f26:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000f2a:	2b00      	cmp	r3, #0
 8000f2c:	db0b      	blt.n	8000f46 <__NVIC_EnableIRQ+0x2a>
  {
    __COMPILER_BARRIER();
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8000f2e:	79fb      	ldrb	r3, [r7, #7]
 8000f30:	f003 021f 	and.w	r2, r3, #31
 8000f34:	4907      	ldr	r1, [pc, #28]	@ (8000f54 <__NVIC_EnableIRQ+0x38>)
 8000f36:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000f3a:	095b      	lsrs	r3, r3, #5
 8000f3c:	2001      	movs	r0, #1
 8000f3e:	fa00 f202 	lsl.w	r2, r0, r2
 8000f42:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    __COMPILER_BARRIER();
  }
}
 8000f46:	bf00      	nop
 8000f48:	370c      	adds	r7, #12
 8000f4a:	46bd      	mov	sp, r7
 8000f4c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000f50:	4770      	bx	lr
 8000f52:	bf00      	nop
 8000f54:	e000e100 	.word	0xe000e100

08000f58 <__NVIC_DisableIRQ>:
  \details Disables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_DisableIRQ(IRQn_Type IRQn)
{
 8000f58:	b480      	push	{r7}
 8000f5a:	b083      	sub	sp, #12
 8000f5c:	af00      	add	r7, sp, #0
 8000f5e:	4603      	mov	r3, r0
 8000f60:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8000f62:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000f66:	2b00      	cmp	r3, #0
 8000f68:	db12      	blt.n	8000f90 <__NVIC_DisableIRQ+0x38>
  {
    NVIC->ICER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8000f6a:	79fb      	ldrb	r3, [r7, #7]
 8000f6c:	f003 021f 	and.w	r2, r3, #31
 8000f70:	490a      	ldr	r1, [pc, #40]	@ (8000f9c <__NVIC_DisableIRQ+0x44>)
 8000f72:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000f76:	095b      	lsrs	r3, r3, #5
 8000f78:	2001      	movs	r0, #1
 8000f7a:	fa00 f202 	lsl.w	r2, r0, r2
 8000f7e:	3320      	adds	r3, #32
 8000f80:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  __ASM volatile ("dsb 0xF":::"memory");
 8000f84:	f3bf 8f4f 	dsb	sy
}
 8000f88:	bf00      	nop
  __ASM volatile ("isb 0xF":::"memory");
 8000f8a:	f3bf 8f6f 	isb	sy
}
 8000f8e:	bf00      	nop
    __DSB();
    __ISB();
  }
}
 8000f90:	bf00      	nop
 8000f92:	370c      	adds	r7, #12
 8000f94:	46bd      	mov	sp, r7
 8000f96:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000f9a:	4770      	bx	lr
 8000f9c:	e000e100 	.word	0xe000e100

08000fa0 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8000fa0:	b480      	push	{r7}
 8000fa2:	b083      	sub	sp, #12
 8000fa4:	af00      	add	r7, sp, #0
 8000fa6:	4603      	mov	r3, r0
 8000fa8:	6039      	str	r1, [r7, #0]
 8000faa:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8000fac:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000fb0:	2b00      	cmp	r3, #0
 8000fb2:	db0a      	blt.n	8000fca <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000fb4:	683b      	ldr	r3, [r7, #0]
 8000fb6:	b2da      	uxtb	r2, r3
 8000fb8:	490c      	ldr	r1, [pc, #48]	@ (8000fec <__NVIC_SetPriority+0x4c>)
 8000fba:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000fbe:	0112      	lsls	r2, r2, #4
 8000fc0:	b2d2      	uxtb	r2, r2
 8000fc2:	440b      	add	r3, r1
 8000fc4:	f883 2300 	strb.w	r2, [r3, #768]	@ 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8000fc8:	e00a      	b.n	8000fe0 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000fca:	683b      	ldr	r3, [r7, #0]
 8000fcc:	b2da      	uxtb	r2, r3
 8000fce:	4908      	ldr	r1, [pc, #32]	@ (8000ff0 <__NVIC_SetPriority+0x50>)
 8000fd0:	79fb      	ldrb	r3, [r7, #7]
 8000fd2:	f003 030f 	and.w	r3, r3, #15
 8000fd6:	3b04      	subs	r3, #4
 8000fd8:	0112      	lsls	r2, r2, #4
 8000fda:	b2d2      	uxtb	r2, r2
 8000fdc:	440b      	add	r3, r1
 8000fde:	761a      	strb	r2, [r3, #24]
}
 8000fe0:	bf00      	nop
 8000fe2:	370c      	adds	r7, #12
 8000fe4:	46bd      	mov	sp, r7
 8000fe6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000fea:	4770      	bx	lr
 8000fec:	e000e100 	.word	0xe000e100
 8000ff0:	e000ed00 	.word	0xe000ed00

08000ff4 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8000ff4:	b480      	push	{r7}
 8000ff6:	b089      	sub	sp, #36	@ 0x24
 8000ff8:	af00      	add	r7, sp, #0
 8000ffa:	60f8      	str	r0, [r7, #12]
 8000ffc:	60b9      	str	r1, [r7, #8]
 8000ffe:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8001000:	68fb      	ldr	r3, [r7, #12]
 8001002:	f003 0307 	and.w	r3, r3, #7
 8001006:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8001008:	69fb      	ldr	r3, [r7, #28]
 800100a:	f1c3 0307 	rsb	r3, r3, #7
 800100e:	2b04      	cmp	r3, #4
 8001010:	bf28      	it	cs
 8001012:	2304      	movcs	r3, #4
 8001014:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8001016:	69fb      	ldr	r3, [r7, #28]
 8001018:	3304      	adds	r3, #4
 800101a:	2b06      	cmp	r3, #6
 800101c:	d902      	bls.n	8001024 <NVIC_EncodePriority+0x30>
 800101e:	69fb      	ldr	r3, [r7, #28]
 8001020:	3b03      	subs	r3, #3
 8001022:	e000      	b.n	8001026 <NVIC_EncodePriority+0x32>
 8001024:	2300      	movs	r3, #0
 8001026:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001028:	f04f 32ff 	mov.w	r2, #4294967295
 800102c:	69bb      	ldr	r3, [r7, #24]
 800102e:	fa02 f303 	lsl.w	r3, r2, r3
 8001032:	43da      	mvns	r2, r3
 8001034:	68bb      	ldr	r3, [r7, #8]
 8001036:	401a      	ands	r2, r3
 8001038:	697b      	ldr	r3, [r7, #20]
 800103a:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 800103c:	f04f 31ff 	mov.w	r1, #4294967295
 8001040:	697b      	ldr	r3, [r7, #20]
 8001042:	fa01 f303 	lsl.w	r3, r1, r3
 8001046:	43d9      	mvns	r1, r3
 8001048:	687b      	ldr	r3, [r7, #4]
 800104a:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 800104c:	4313      	orrs	r3, r2
         );
}
 800104e:	4618      	mov	r0, r3
 8001050:	3724      	adds	r7, #36	@ 0x24
 8001052:	46bd      	mov	sp, r7
 8001054:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001058:	4770      	bx	lr

0800105a <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 800105a:	b580      	push	{r7, lr}
 800105c:	b082      	sub	sp, #8
 800105e:	af00      	add	r7, sp, #0
 8001060:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8001062:	6878      	ldr	r0, [r7, #4]
 8001064:	f7ff ff28 	bl	8000eb8 <__NVIC_SetPriorityGrouping>
}
 8001068:	bf00      	nop
 800106a:	3708      	adds	r7, #8
 800106c:	46bd      	mov	sp, r7
 800106e:	bd80      	pop	{r7, pc}

08001070 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8001070:	b580      	push	{r7, lr}
 8001072:	b086      	sub	sp, #24
 8001074:	af00      	add	r7, sp, #0
 8001076:	4603      	mov	r3, r0
 8001078:	60b9      	str	r1, [r7, #8]
 800107a:	607a      	str	r2, [r7, #4]
 800107c:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 800107e:	2300      	movs	r3, #0
 8001080:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8001082:	f7ff ff3d 	bl	8000f00 <__NVIC_GetPriorityGrouping>
 8001086:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8001088:	687a      	ldr	r2, [r7, #4]
 800108a:	68b9      	ldr	r1, [r7, #8]
 800108c:	6978      	ldr	r0, [r7, #20]
 800108e:	f7ff ffb1 	bl	8000ff4 <NVIC_EncodePriority>
 8001092:	4602      	mov	r2, r0
 8001094:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8001098:	4611      	mov	r1, r2
 800109a:	4618      	mov	r0, r3
 800109c:	f7ff ff80 	bl	8000fa0 <__NVIC_SetPriority>
}
 80010a0:	bf00      	nop
 80010a2:	3718      	adds	r7, #24
 80010a4:	46bd      	mov	sp, r7
 80010a6:	bd80      	pop	{r7, pc}

080010a8 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80010a8:	b580      	push	{r7, lr}
 80010aa:	b082      	sub	sp, #8
 80010ac:	af00      	add	r7, sp, #0
 80010ae:	4603      	mov	r3, r0
 80010b0:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 80010b2:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80010b6:	4618      	mov	r0, r3
 80010b8:	f7ff ff30 	bl	8000f1c <__NVIC_EnableIRQ>
}
 80010bc:	bf00      	nop
 80010be:	3708      	adds	r7, #8
 80010c0:	46bd      	mov	sp, r7
 80010c2:	bd80      	pop	{r7, pc}

080010c4 <HAL_NVIC_DisableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f4xxxx.h))
  * @retval None
  */
void HAL_NVIC_DisableIRQ(IRQn_Type IRQn)
{
 80010c4:	b580      	push	{r7, lr}
 80010c6:	b082      	sub	sp, #8
 80010c8:	af00      	add	r7, sp, #0
 80010ca:	4603      	mov	r3, r0
 80010cc:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Disable interrupt */
  NVIC_DisableIRQ(IRQn);
 80010ce:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80010d2:	4618      	mov	r0, r3
 80010d4:	f7ff ff40 	bl	8000f58 <__NVIC_DisableIRQ>
}
 80010d8:	bf00      	nop
 80010da:	3708      	adds	r7, #8
 80010dc:	46bd      	mov	sp, r7
 80010de:	bd80      	pop	{r7, pc}

080010e0 <HAL_DMA_Abort_IT>:
  * @param  hdma   pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{
 80010e0:	b480      	push	{r7}
 80010e2:	b083      	sub	sp, #12
 80010e4:	af00      	add	r7, sp, #0
 80010e6:	6078      	str	r0, [r7, #4]
  if(hdma->State != HAL_DMA_STATE_BUSY)
 80010e8:	687b      	ldr	r3, [r7, #4]
 80010ea:	f893 3035 	ldrb.w	r3, [r3, #53]	@ 0x35
 80010ee:	b2db      	uxtb	r3, r3
 80010f0:	2b02      	cmp	r3, #2
 80010f2:	d004      	beq.n	80010fe <HAL_DMA_Abort_IT+0x1e>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 80010f4:	687b      	ldr	r3, [r7, #4]
 80010f6:	2280      	movs	r2, #128	@ 0x80
 80010f8:	655a      	str	r2, [r3, #84]	@ 0x54
    return HAL_ERROR;
 80010fa:	2301      	movs	r3, #1
 80010fc:	e00c      	b.n	8001118 <HAL_DMA_Abort_IT+0x38>
  }
  else
  {
    /* Set Abort State  */
    hdma->State = HAL_DMA_STATE_ABORT;
 80010fe:	687b      	ldr	r3, [r7, #4]
 8001100:	2205      	movs	r2, #5
 8001102:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35
    
    /* Disable the stream */
    __HAL_DMA_DISABLE(hdma);
 8001106:	687b      	ldr	r3, [r7, #4]
 8001108:	681b      	ldr	r3, [r3, #0]
 800110a:	681a      	ldr	r2, [r3, #0]
 800110c:	687b      	ldr	r3, [r7, #4]
 800110e:	681b      	ldr	r3, [r3, #0]
 8001110:	f022 0201 	bic.w	r2, r2, #1
 8001114:	601a      	str	r2, [r3, #0]
  }

  return HAL_OK;
 8001116:	2300      	movs	r3, #0
}
 8001118:	4618      	mov	r0, r3
 800111a:	370c      	adds	r7, #12
 800111c:	46bd      	mov	sp, r7
 800111e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001122:	4770      	bx	lr

08001124 <HAL_DMA_GetState>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.
  * @retval HAL state
  */
HAL_DMA_StateTypeDef HAL_DMA_GetState(DMA_HandleTypeDef *hdma)
{
 8001124:	b480      	push	{r7}
 8001126:	b083      	sub	sp, #12
 8001128:	af00      	add	r7, sp, #0
 800112a:	6078      	str	r0, [r7, #4]
  return hdma->State;
 800112c:	687b      	ldr	r3, [r7, #4]
 800112e:	f893 3035 	ldrb.w	r3, [r3, #53]	@ 0x35
 8001132:	b2db      	uxtb	r3, r3
}
 8001134:	4618      	mov	r0, r3
 8001136:	370c      	adds	r7, #12
 8001138:	46bd      	mov	sp, r7
 800113a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800113e:	4770      	bx	lr

08001140 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8001140:	b480      	push	{r7}
 8001142:	b089      	sub	sp, #36	@ 0x24
 8001144:	af00      	add	r7, sp, #0
 8001146:	6078      	str	r0, [r7, #4]
 8001148:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 800114a:	2300      	movs	r3, #0
 800114c:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 800114e:	2300      	movs	r3, #0
 8001150:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 8001152:	2300      	movs	r3, #0
 8001154:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 8001156:	2300      	movs	r3, #0
 8001158:	61fb      	str	r3, [r7, #28]
 800115a:	e165      	b.n	8001428 <HAL_GPIO_Init+0x2e8>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 800115c:	2201      	movs	r2, #1
 800115e:	69fb      	ldr	r3, [r7, #28]
 8001160:	fa02 f303 	lsl.w	r3, r2, r3
 8001164:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8001166:	683b      	ldr	r3, [r7, #0]
 8001168:	681b      	ldr	r3, [r3, #0]
 800116a:	697a      	ldr	r2, [r7, #20]
 800116c:	4013      	ands	r3, r2
 800116e:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 8001170:	693a      	ldr	r2, [r7, #16]
 8001172:	697b      	ldr	r3, [r7, #20]
 8001174:	429a      	cmp	r2, r3
 8001176:	f040 8154 	bne.w	8001422 <HAL_GPIO_Init+0x2e2>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 800117a:	683b      	ldr	r3, [r7, #0]
 800117c:	685b      	ldr	r3, [r3, #4]
 800117e:	f003 0303 	and.w	r3, r3, #3
 8001182:	2b01      	cmp	r3, #1
 8001184:	d005      	beq.n	8001192 <HAL_GPIO_Init+0x52>
          (GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8001186:	683b      	ldr	r3, [r7, #0]
 8001188:	685b      	ldr	r3, [r3, #4]
 800118a:	f003 0303 	and.w	r3, r3, #3
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 800118e:	2b02      	cmp	r3, #2
 8001190:	d130      	bne.n	80011f4 <HAL_GPIO_Init+0xb4>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 8001192:	687b      	ldr	r3, [r7, #4]
 8001194:	689b      	ldr	r3, [r3, #8]
 8001196:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 8001198:	69fb      	ldr	r3, [r7, #28]
 800119a:	005b      	lsls	r3, r3, #1
 800119c:	2203      	movs	r2, #3
 800119e:	fa02 f303 	lsl.w	r3, r2, r3
 80011a2:	43db      	mvns	r3, r3
 80011a4:	69ba      	ldr	r2, [r7, #24]
 80011a6:	4013      	ands	r3, r2
 80011a8:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 80011aa:	683b      	ldr	r3, [r7, #0]
 80011ac:	68da      	ldr	r2, [r3, #12]
 80011ae:	69fb      	ldr	r3, [r7, #28]
 80011b0:	005b      	lsls	r3, r3, #1
 80011b2:	fa02 f303 	lsl.w	r3, r2, r3
 80011b6:	69ba      	ldr	r2, [r7, #24]
 80011b8:	4313      	orrs	r3, r2
 80011ba:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 80011bc:	687b      	ldr	r3, [r7, #4]
 80011be:	69ba      	ldr	r2, [r7, #24]
 80011c0:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 80011c2:	687b      	ldr	r3, [r7, #4]
 80011c4:	685b      	ldr	r3, [r3, #4]
 80011c6:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 80011c8:	2201      	movs	r2, #1
 80011ca:	69fb      	ldr	r3, [r7, #28]
 80011cc:	fa02 f303 	lsl.w	r3, r2, r3
 80011d0:	43db      	mvns	r3, r3
 80011d2:	69ba      	ldr	r2, [r7, #24]
 80011d4:	4013      	ands	r3, r2
 80011d6:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 80011d8:	683b      	ldr	r3, [r7, #0]
 80011da:	685b      	ldr	r3, [r3, #4]
 80011dc:	091b      	lsrs	r3, r3, #4
 80011de:	f003 0201 	and.w	r2, r3, #1
 80011e2:	69fb      	ldr	r3, [r7, #28]
 80011e4:	fa02 f303 	lsl.w	r3, r2, r3
 80011e8:	69ba      	ldr	r2, [r7, #24]
 80011ea:	4313      	orrs	r3, r2
 80011ec:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 80011ee:	687b      	ldr	r3, [r7, #4]
 80011f0:	69ba      	ldr	r2, [r7, #24]
 80011f2:	605a      	str	r2, [r3, #4]
       }

      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 80011f4:	683b      	ldr	r3, [r7, #0]
 80011f6:	685b      	ldr	r3, [r3, #4]
 80011f8:	f003 0303 	and.w	r3, r3, #3
 80011fc:	2b03      	cmp	r3, #3
 80011fe:	d017      	beq.n	8001230 <HAL_GPIO_Init+0xf0>
      {
        /* Check the parameters */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));
        
        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 8001200:	687b      	ldr	r3, [r7, #4]
 8001202:	68db      	ldr	r3, [r3, #12]
 8001204:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 8001206:	69fb      	ldr	r3, [r7, #28]
 8001208:	005b      	lsls	r3, r3, #1
 800120a:	2203      	movs	r2, #3
 800120c:	fa02 f303 	lsl.w	r3, r2, r3
 8001210:	43db      	mvns	r3, r3
 8001212:	69ba      	ldr	r2, [r7, #24]
 8001214:	4013      	ands	r3, r2
 8001216:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 8001218:	683b      	ldr	r3, [r7, #0]
 800121a:	689a      	ldr	r2, [r3, #8]
 800121c:	69fb      	ldr	r3, [r7, #28]
 800121e:	005b      	lsls	r3, r3, #1
 8001220:	fa02 f303 	lsl.w	r3, r2, r3
 8001224:	69ba      	ldr	r2, [r7, #24]
 8001226:	4313      	orrs	r3, r2
 8001228:	61bb      	str	r3, [r7, #24]
        GPIOx->PUPDR = temp;
 800122a:	687b      	ldr	r3, [r7, #4]
 800122c:	69ba      	ldr	r2, [r7, #24]
 800122e:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8001230:	683b      	ldr	r3, [r7, #0]
 8001232:	685b      	ldr	r3, [r3, #4]
 8001234:	f003 0303 	and.w	r3, r3, #3
 8001238:	2b02      	cmp	r3, #2
 800123a:	d123      	bne.n	8001284 <HAL_GPIO_Init+0x144>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 800123c:	69fb      	ldr	r3, [r7, #28]
 800123e:	08da      	lsrs	r2, r3, #3
 8001240:	687b      	ldr	r3, [r7, #4]
 8001242:	3208      	adds	r2, #8
 8001244:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8001248:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 800124a:	69fb      	ldr	r3, [r7, #28]
 800124c:	f003 0307 	and.w	r3, r3, #7
 8001250:	009b      	lsls	r3, r3, #2
 8001252:	220f      	movs	r2, #15
 8001254:	fa02 f303 	lsl.w	r3, r2, r3
 8001258:	43db      	mvns	r3, r3
 800125a:	69ba      	ldr	r2, [r7, #24]
 800125c:	4013      	ands	r3, r2
 800125e:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 8001260:	683b      	ldr	r3, [r7, #0]
 8001262:	691a      	ldr	r2, [r3, #16]
 8001264:	69fb      	ldr	r3, [r7, #28]
 8001266:	f003 0307 	and.w	r3, r3, #7
 800126a:	009b      	lsls	r3, r3, #2
 800126c:	fa02 f303 	lsl.w	r3, r2, r3
 8001270:	69ba      	ldr	r2, [r7, #24]
 8001272:	4313      	orrs	r3, r2
 8001274:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 8001276:	69fb      	ldr	r3, [r7, #28]
 8001278:	08da      	lsrs	r2, r3, #3
 800127a:	687b      	ldr	r3, [r7, #4]
 800127c:	3208      	adds	r2, #8
 800127e:	69b9      	ldr	r1, [r7, #24]
 8001280:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8001284:	687b      	ldr	r3, [r7, #4]
 8001286:	681b      	ldr	r3, [r3, #0]
 8001288:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 800128a:	69fb      	ldr	r3, [r7, #28]
 800128c:	005b      	lsls	r3, r3, #1
 800128e:	2203      	movs	r2, #3
 8001290:	fa02 f303 	lsl.w	r3, r2, r3
 8001294:	43db      	mvns	r3, r3
 8001296:	69ba      	ldr	r2, [r7, #24]
 8001298:	4013      	ands	r3, r2
 800129a:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 800129c:	683b      	ldr	r3, [r7, #0]
 800129e:	685b      	ldr	r3, [r3, #4]
 80012a0:	f003 0203 	and.w	r2, r3, #3
 80012a4:	69fb      	ldr	r3, [r7, #28]
 80012a6:	005b      	lsls	r3, r3, #1
 80012a8:	fa02 f303 	lsl.w	r3, r2, r3
 80012ac:	69ba      	ldr	r2, [r7, #24]
 80012ae:	4313      	orrs	r3, r2
 80012b0:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 80012b2:	687b      	ldr	r3, [r7, #4]
 80012b4:	69ba      	ldr	r2, [r7, #24]
 80012b6:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 80012b8:	683b      	ldr	r3, [r7, #0]
 80012ba:	685b      	ldr	r3, [r3, #4]
 80012bc:	f403 3340 	and.w	r3, r3, #196608	@ 0x30000
 80012c0:	2b00      	cmp	r3, #0
 80012c2:	f000 80ae 	beq.w	8001422 <HAL_GPIO_Init+0x2e2>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 80012c6:	2300      	movs	r3, #0
 80012c8:	60fb      	str	r3, [r7, #12]
 80012ca:	4b5d      	ldr	r3, [pc, #372]	@ (8001440 <HAL_GPIO_Init+0x300>)
 80012cc:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80012ce:	4a5c      	ldr	r2, [pc, #368]	@ (8001440 <HAL_GPIO_Init+0x300>)
 80012d0:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 80012d4:	6453      	str	r3, [r2, #68]	@ 0x44
 80012d6:	4b5a      	ldr	r3, [pc, #360]	@ (8001440 <HAL_GPIO_Init+0x300>)
 80012d8:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80012da:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 80012de:	60fb      	str	r3, [r7, #12]
 80012e0:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 80012e2:	4a58      	ldr	r2, [pc, #352]	@ (8001444 <HAL_GPIO_Init+0x304>)
 80012e4:	69fb      	ldr	r3, [r7, #28]
 80012e6:	089b      	lsrs	r3, r3, #2
 80012e8:	3302      	adds	r3, #2
 80012ea:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80012ee:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 80012f0:	69fb      	ldr	r3, [r7, #28]
 80012f2:	f003 0303 	and.w	r3, r3, #3
 80012f6:	009b      	lsls	r3, r3, #2
 80012f8:	220f      	movs	r2, #15
 80012fa:	fa02 f303 	lsl.w	r3, r2, r3
 80012fe:	43db      	mvns	r3, r3
 8001300:	69ba      	ldr	r2, [r7, #24]
 8001302:	4013      	ands	r3, r2
 8001304:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 8001306:	687b      	ldr	r3, [r7, #4]
 8001308:	4a4f      	ldr	r2, [pc, #316]	@ (8001448 <HAL_GPIO_Init+0x308>)
 800130a:	4293      	cmp	r3, r2
 800130c:	d025      	beq.n	800135a <HAL_GPIO_Init+0x21a>
 800130e:	687b      	ldr	r3, [r7, #4]
 8001310:	4a4e      	ldr	r2, [pc, #312]	@ (800144c <HAL_GPIO_Init+0x30c>)
 8001312:	4293      	cmp	r3, r2
 8001314:	d01f      	beq.n	8001356 <HAL_GPIO_Init+0x216>
 8001316:	687b      	ldr	r3, [r7, #4]
 8001318:	4a4d      	ldr	r2, [pc, #308]	@ (8001450 <HAL_GPIO_Init+0x310>)
 800131a:	4293      	cmp	r3, r2
 800131c:	d019      	beq.n	8001352 <HAL_GPIO_Init+0x212>
 800131e:	687b      	ldr	r3, [r7, #4]
 8001320:	4a4c      	ldr	r2, [pc, #304]	@ (8001454 <HAL_GPIO_Init+0x314>)
 8001322:	4293      	cmp	r3, r2
 8001324:	d013      	beq.n	800134e <HAL_GPIO_Init+0x20e>
 8001326:	687b      	ldr	r3, [r7, #4]
 8001328:	4a4b      	ldr	r2, [pc, #300]	@ (8001458 <HAL_GPIO_Init+0x318>)
 800132a:	4293      	cmp	r3, r2
 800132c:	d00d      	beq.n	800134a <HAL_GPIO_Init+0x20a>
 800132e:	687b      	ldr	r3, [r7, #4]
 8001330:	4a4a      	ldr	r2, [pc, #296]	@ (800145c <HAL_GPIO_Init+0x31c>)
 8001332:	4293      	cmp	r3, r2
 8001334:	d007      	beq.n	8001346 <HAL_GPIO_Init+0x206>
 8001336:	687b      	ldr	r3, [r7, #4]
 8001338:	4a49      	ldr	r2, [pc, #292]	@ (8001460 <HAL_GPIO_Init+0x320>)
 800133a:	4293      	cmp	r3, r2
 800133c:	d101      	bne.n	8001342 <HAL_GPIO_Init+0x202>
 800133e:	2306      	movs	r3, #6
 8001340:	e00c      	b.n	800135c <HAL_GPIO_Init+0x21c>
 8001342:	2307      	movs	r3, #7
 8001344:	e00a      	b.n	800135c <HAL_GPIO_Init+0x21c>
 8001346:	2305      	movs	r3, #5
 8001348:	e008      	b.n	800135c <HAL_GPIO_Init+0x21c>
 800134a:	2304      	movs	r3, #4
 800134c:	e006      	b.n	800135c <HAL_GPIO_Init+0x21c>
 800134e:	2303      	movs	r3, #3
 8001350:	e004      	b.n	800135c <HAL_GPIO_Init+0x21c>
 8001352:	2302      	movs	r3, #2
 8001354:	e002      	b.n	800135c <HAL_GPIO_Init+0x21c>
 8001356:	2301      	movs	r3, #1
 8001358:	e000      	b.n	800135c <HAL_GPIO_Init+0x21c>
 800135a:	2300      	movs	r3, #0
 800135c:	69fa      	ldr	r2, [r7, #28]
 800135e:	f002 0203 	and.w	r2, r2, #3
 8001362:	0092      	lsls	r2, r2, #2
 8001364:	4093      	lsls	r3, r2
 8001366:	69ba      	ldr	r2, [r7, #24]
 8001368:	4313      	orrs	r3, r2
 800136a:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 800136c:	4935      	ldr	r1, [pc, #212]	@ (8001444 <HAL_GPIO_Init+0x304>)
 800136e:	69fb      	ldr	r3, [r7, #28]
 8001370:	089b      	lsrs	r3, r3, #2
 8001372:	3302      	adds	r3, #2
 8001374:	69ba      	ldr	r2, [r7, #24]
 8001376:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 800137a:	4b3a      	ldr	r3, [pc, #232]	@ (8001464 <HAL_GPIO_Init+0x324>)
 800137c:	689b      	ldr	r3, [r3, #8]
 800137e:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8001380:	693b      	ldr	r3, [r7, #16]
 8001382:	43db      	mvns	r3, r3
 8001384:	69ba      	ldr	r2, [r7, #24]
 8001386:	4013      	ands	r3, r2
 8001388:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 800138a:	683b      	ldr	r3, [r7, #0]
 800138c:	685b      	ldr	r3, [r3, #4]
 800138e:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 8001392:	2b00      	cmp	r3, #0
 8001394:	d003      	beq.n	800139e <HAL_GPIO_Init+0x25e>
        {
          temp |= iocurrent;
 8001396:	69ba      	ldr	r2, [r7, #24]
 8001398:	693b      	ldr	r3, [r7, #16]
 800139a:	4313      	orrs	r3, r2
 800139c:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 800139e:	4a31      	ldr	r2, [pc, #196]	@ (8001464 <HAL_GPIO_Init+0x324>)
 80013a0:	69bb      	ldr	r3, [r7, #24]
 80013a2:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 80013a4:	4b2f      	ldr	r3, [pc, #188]	@ (8001464 <HAL_GPIO_Init+0x324>)
 80013a6:	68db      	ldr	r3, [r3, #12]
 80013a8:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80013aa:	693b      	ldr	r3, [r7, #16]
 80013ac:	43db      	mvns	r3, r3
 80013ae:	69ba      	ldr	r2, [r7, #24]
 80013b0:	4013      	ands	r3, r2
 80013b2:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 80013b4:	683b      	ldr	r3, [r7, #0]
 80013b6:	685b      	ldr	r3, [r3, #4]
 80013b8:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 80013bc:	2b00      	cmp	r3, #0
 80013be:	d003      	beq.n	80013c8 <HAL_GPIO_Init+0x288>
        {
          temp |= iocurrent;
 80013c0:	69ba      	ldr	r2, [r7, #24]
 80013c2:	693b      	ldr	r3, [r7, #16]
 80013c4:	4313      	orrs	r3, r2
 80013c6:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 80013c8:	4a26      	ldr	r2, [pc, #152]	@ (8001464 <HAL_GPIO_Init+0x324>)
 80013ca:	69bb      	ldr	r3, [r7, #24]
 80013cc:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR;
 80013ce:	4b25      	ldr	r3, [pc, #148]	@ (8001464 <HAL_GPIO_Init+0x324>)
 80013d0:	685b      	ldr	r3, [r3, #4]
 80013d2:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80013d4:	693b      	ldr	r3, [r7, #16]
 80013d6:	43db      	mvns	r3, r3
 80013d8:	69ba      	ldr	r2, [r7, #24]
 80013da:	4013      	ands	r3, r2
 80013dc:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 80013de:	683b      	ldr	r3, [r7, #0]
 80013e0:	685b      	ldr	r3, [r3, #4]
 80013e2:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80013e6:	2b00      	cmp	r3, #0
 80013e8:	d003      	beq.n	80013f2 <HAL_GPIO_Init+0x2b2>
        {
          temp |= iocurrent;
 80013ea:	69ba      	ldr	r2, [r7, #24]
 80013ec:	693b      	ldr	r3, [r7, #16]
 80013ee:	4313      	orrs	r3, r2
 80013f0:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 80013f2:	4a1c      	ldr	r2, [pc, #112]	@ (8001464 <HAL_GPIO_Init+0x324>)
 80013f4:	69bb      	ldr	r3, [r7, #24]
 80013f6:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 80013f8:	4b1a      	ldr	r3, [pc, #104]	@ (8001464 <HAL_GPIO_Init+0x324>)
 80013fa:	681b      	ldr	r3, [r3, #0]
 80013fc:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80013fe:	693b      	ldr	r3, [r7, #16]
 8001400:	43db      	mvns	r3, r3
 8001402:	69ba      	ldr	r2, [r7, #24]
 8001404:	4013      	ands	r3, r2
 8001406:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 8001408:	683b      	ldr	r3, [r7, #0]
 800140a:	685b      	ldr	r3, [r3, #4]
 800140c:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8001410:	2b00      	cmp	r3, #0
 8001412:	d003      	beq.n	800141c <HAL_GPIO_Init+0x2dc>
        {
          temp |= iocurrent;
 8001414:	69ba      	ldr	r2, [r7, #24]
 8001416:	693b      	ldr	r3, [r7, #16]
 8001418:	4313      	orrs	r3, r2
 800141a:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 800141c:	4a11      	ldr	r2, [pc, #68]	@ (8001464 <HAL_GPIO_Init+0x324>)
 800141e:	69bb      	ldr	r3, [r7, #24]
 8001420:	6013      	str	r3, [r2, #0]
  for(position = 0U; position < GPIO_NUMBER; position++)
 8001422:	69fb      	ldr	r3, [r7, #28]
 8001424:	3301      	adds	r3, #1
 8001426:	61fb      	str	r3, [r7, #28]
 8001428:	69fb      	ldr	r3, [r7, #28]
 800142a:	2b0f      	cmp	r3, #15
 800142c:	f67f ae96 	bls.w	800115c <HAL_GPIO_Init+0x1c>
      }
    }
  }
}
 8001430:	bf00      	nop
 8001432:	bf00      	nop
 8001434:	3724      	adds	r7, #36	@ 0x24
 8001436:	46bd      	mov	sp, r7
 8001438:	f85d 7b04 	ldr.w	r7, [sp], #4
 800143c:	4770      	bx	lr
 800143e:	bf00      	nop
 8001440:	40023800 	.word	0x40023800
 8001444:	40013800 	.word	0x40013800
 8001448:	40020000 	.word	0x40020000
 800144c:	40020400 	.word	0x40020400
 8001450:	40020800 	.word	0x40020800
 8001454:	40020c00 	.word	0x40020c00
 8001458:	40021000 	.word	0x40021000
 800145c:	40021400 	.word	0x40021400
 8001460:	40021800 	.word	0x40021800
 8001464:	40013c00 	.word	0x40013c00

08001468 <HAL_GPIO_DeInit>:
  * @param  GPIO_Pin specifies the port bit to be written.
  *          This parameter can be one of GPIO_PIN_x where x can be (0..15).
  * @retval None
  */
void HAL_GPIO_DeInit(GPIO_TypeDef  *GPIOx, uint32_t GPIO_Pin)
{
 8001468:	b480      	push	{r7}
 800146a:	b087      	sub	sp, #28
 800146c:	af00      	add	r7, sp, #0
 800146e:	6078      	str	r0, [r7, #4]
 8001470:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 8001472:	2300      	movs	r3, #0
 8001474:	613b      	str	r3, [r7, #16]
  uint32_t iocurrent = 0x00U;
 8001476:	2300      	movs	r3, #0
 8001478:	60fb      	str	r3, [r7, #12]
  uint32_t tmp = 0x00U;
 800147a:	2300      	movs	r3, #0
 800147c:	60bb      	str	r3, [r7, #8]

  /* Check the parameters */
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  
  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 800147e:	2300      	movs	r3, #0
 8001480:	617b      	str	r3, [r7, #20]
 8001482:	e0c7      	b.n	8001614 <HAL_GPIO_DeInit+0x1ac>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 8001484:	2201      	movs	r2, #1
 8001486:	697b      	ldr	r3, [r7, #20]
 8001488:	fa02 f303 	lsl.w	r3, r2, r3
 800148c:	613b      	str	r3, [r7, #16]
    /* Get the current IO position */
    iocurrent = (GPIO_Pin) & ioposition;
 800148e:	683a      	ldr	r2, [r7, #0]
 8001490:	693b      	ldr	r3, [r7, #16]
 8001492:	4013      	ands	r3, r2
 8001494:	60fb      	str	r3, [r7, #12]

    if(iocurrent == ioposition)
 8001496:	68fa      	ldr	r2, [r7, #12]
 8001498:	693b      	ldr	r3, [r7, #16]
 800149a:	429a      	cmp	r2, r3
 800149c:	f040 80b7 	bne.w	800160e <HAL_GPIO_DeInit+0x1a6>
    {
      /*------------------------- EXTI Mode Configuration --------------------*/
      tmp = SYSCFG->EXTICR[position >> 2U];
 80014a0:	4a62      	ldr	r2, [pc, #392]	@ (800162c <HAL_GPIO_DeInit+0x1c4>)
 80014a2:	697b      	ldr	r3, [r7, #20]
 80014a4:	089b      	lsrs	r3, r3, #2
 80014a6:	3302      	adds	r3, #2
 80014a8:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80014ac:	60bb      	str	r3, [r7, #8]
      tmp &= (0x0FU << (4U * (position & 0x03U)));
 80014ae:	697b      	ldr	r3, [r7, #20]
 80014b0:	f003 0303 	and.w	r3, r3, #3
 80014b4:	009b      	lsls	r3, r3, #2
 80014b6:	220f      	movs	r2, #15
 80014b8:	fa02 f303 	lsl.w	r3, r2, r3
 80014bc:	68ba      	ldr	r2, [r7, #8]
 80014be:	4013      	ands	r3, r2
 80014c0:	60bb      	str	r3, [r7, #8]
      if(tmp == ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U))))
 80014c2:	687b      	ldr	r3, [r7, #4]
 80014c4:	4a5a      	ldr	r2, [pc, #360]	@ (8001630 <HAL_GPIO_DeInit+0x1c8>)
 80014c6:	4293      	cmp	r3, r2
 80014c8:	d025      	beq.n	8001516 <HAL_GPIO_DeInit+0xae>
 80014ca:	687b      	ldr	r3, [r7, #4]
 80014cc:	4a59      	ldr	r2, [pc, #356]	@ (8001634 <HAL_GPIO_DeInit+0x1cc>)
 80014ce:	4293      	cmp	r3, r2
 80014d0:	d01f      	beq.n	8001512 <HAL_GPIO_DeInit+0xaa>
 80014d2:	687b      	ldr	r3, [r7, #4]
 80014d4:	4a58      	ldr	r2, [pc, #352]	@ (8001638 <HAL_GPIO_DeInit+0x1d0>)
 80014d6:	4293      	cmp	r3, r2
 80014d8:	d019      	beq.n	800150e <HAL_GPIO_DeInit+0xa6>
 80014da:	687b      	ldr	r3, [r7, #4]
 80014dc:	4a57      	ldr	r2, [pc, #348]	@ (800163c <HAL_GPIO_DeInit+0x1d4>)
 80014de:	4293      	cmp	r3, r2
 80014e0:	d013      	beq.n	800150a <HAL_GPIO_DeInit+0xa2>
 80014e2:	687b      	ldr	r3, [r7, #4]
 80014e4:	4a56      	ldr	r2, [pc, #344]	@ (8001640 <HAL_GPIO_DeInit+0x1d8>)
 80014e6:	4293      	cmp	r3, r2
 80014e8:	d00d      	beq.n	8001506 <HAL_GPIO_DeInit+0x9e>
 80014ea:	687b      	ldr	r3, [r7, #4]
 80014ec:	4a55      	ldr	r2, [pc, #340]	@ (8001644 <HAL_GPIO_DeInit+0x1dc>)
 80014ee:	4293      	cmp	r3, r2
 80014f0:	d007      	beq.n	8001502 <HAL_GPIO_DeInit+0x9a>
 80014f2:	687b      	ldr	r3, [r7, #4]
 80014f4:	4a54      	ldr	r2, [pc, #336]	@ (8001648 <HAL_GPIO_DeInit+0x1e0>)
 80014f6:	4293      	cmp	r3, r2
 80014f8:	d101      	bne.n	80014fe <HAL_GPIO_DeInit+0x96>
 80014fa:	2306      	movs	r3, #6
 80014fc:	e00c      	b.n	8001518 <HAL_GPIO_DeInit+0xb0>
 80014fe:	2307      	movs	r3, #7
 8001500:	e00a      	b.n	8001518 <HAL_GPIO_DeInit+0xb0>
 8001502:	2305      	movs	r3, #5
 8001504:	e008      	b.n	8001518 <HAL_GPIO_DeInit+0xb0>
 8001506:	2304      	movs	r3, #4
 8001508:	e006      	b.n	8001518 <HAL_GPIO_DeInit+0xb0>
 800150a:	2303      	movs	r3, #3
 800150c:	e004      	b.n	8001518 <HAL_GPIO_DeInit+0xb0>
 800150e:	2302      	movs	r3, #2
 8001510:	e002      	b.n	8001518 <HAL_GPIO_DeInit+0xb0>
 8001512:	2301      	movs	r3, #1
 8001514:	e000      	b.n	8001518 <HAL_GPIO_DeInit+0xb0>
 8001516:	2300      	movs	r3, #0
 8001518:	697a      	ldr	r2, [r7, #20]
 800151a:	f002 0203 	and.w	r2, r2, #3
 800151e:	0092      	lsls	r2, r2, #2
 8001520:	4093      	lsls	r3, r2
 8001522:	68ba      	ldr	r2, [r7, #8]
 8001524:	429a      	cmp	r2, r3
 8001526:	d132      	bne.n	800158e <HAL_GPIO_DeInit+0x126>
      {
        /* Clear EXTI line configuration */
        EXTI->IMR &= ~((uint32_t)iocurrent);
 8001528:	4b48      	ldr	r3, [pc, #288]	@ (800164c <HAL_GPIO_DeInit+0x1e4>)
 800152a:	681a      	ldr	r2, [r3, #0]
 800152c:	68fb      	ldr	r3, [r7, #12]
 800152e:	43db      	mvns	r3, r3
 8001530:	4946      	ldr	r1, [pc, #280]	@ (800164c <HAL_GPIO_DeInit+0x1e4>)
 8001532:	4013      	ands	r3, r2
 8001534:	600b      	str	r3, [r1, #0]
        EXTI->EMR &= ~((uint32_t)iocurrent);
 8001536:	4b45      	ldr	r3, [pc, #276]	@ (800164c <HAL_GPIO_DeInit+0x1e4>)
 8001538:	685a      	ldr	r2, [r3, #4]
 800153a:	68fb      	ldr	r3, [r7, #12]
 800153c:	43db      	mvns	r3, r3
 800153e:	4943      	ldr	r1, [pc, #268]	@ (800164c <HAL_GPIO_DeInit+0x1e4>)
 8001540:	4013      	ands	r3, r2
 8001542:	604b      	str	r3, [r1, #4]
        
        /* Clear Rising Falling edge configuration */
        EXTI->FTSR &= ~((uint32_t)iocurrent);
 8001544:	4b41      	ldr	r3, [pc, #260]	@ (800164c <HAL_GPIO_DeInit+0x1e4>)
 8001546:	68da      	ldr	r2, [r3, #12]
 8001548:	68fb      	ldr	r3, [r7, #12]
 800154a:	43db      	mvns	r3, r3
 800154c:	493f      	ldr	r1, [pc, #252]	@ (800164c <HAL_GPIO_DeInit+0x1e4>)
 800154e:	4013      	ands	r3, r2
 8001550:	60cb      	str	r3, [r1, #12]
        EXTI->RTSR &= ~((uint32_t)iocurrent);
 8001552:	4b3e      	ldr	r3, [pc, #248]	@ (800164c <HAL_GPIO_DeInit+0x1e4>)
 8001554:	689a      	ldr	r2, [r3, #8]
 8001556:	68fb      	ldr	r3, [r7, #12]
 8001558:	43db      	mvns	r3, r3
 800155a:	493c      	ldr	r1, [pc, #240]	@ (800164c <HAL_GPIO_DeInit+0x1e4>)
 800155c:	4013      	ands	r3, r2
 800155e:	608b      	str	r3, [r1, #8]

        /* Configure the External Interrupt or event for the current IO */
        tmp = 0x0FU << (4U * (position & 0x03U));
 8001560:	697b      	ldr	r3, [r7, #20]
 8001562:	f003 0303 	and.w	r3, r3, #3
 8001566:	009b      	lsls	r3, r3, #2
 8001568:	220f      	movs	r2, #15
 800156a:	fa02 f303 	lsl.w	r3, r2, r3
 800156e:	60bb      	str	r3, [r7, #8]
        SYSCFG->EXTICR[position >> 2U] &= ~tmp;
 8001570:	4a2e      	ldr	r2, [pc, #184]	@ (800162c <HAL_GPIO_DeInit+0x1c4>)
 8001572:	697b      	ldr	r3, [r7, #20]
 8001574:	089b      	lsrs	r3, r3, #2
 8001576:	3302      	adds	r3, #2
 8001578:	f852 1023 	ldr.w	r1, [r2, r3, lsl #2]
 800157c:	68bb      	ldr	r3, [r7, #8]
 800157e:	43da      	mvns	r2, r3
 8001580:	482a      	ldr	r0, [pc, #168]	@ (800162c <HAL_GPIO_DeInit+0x1c4>)
 8001582:	697b      	ldr	r3, [r7, #20]
 8001584:	089b      	lsrs	r3, r3, #2
 8001586:	400a      	ands	r2, r1
 8001588:	3302      	adds	r3, #2
 800158a:	f840 2023 	str.w	r2, [r0, r3, lsl #2]
      }

      /*------------------------- GPIO Mode Configuration --------------------*/
      /* Configure IO Direction in Input Floating Mode */
      GPIOx->MODER &= ~(GPIO_MODER_MODER0 << (position * 2U));
 800158e:	687b      	ldr	r3, [r7, #4]
 8001590:	681a      	ldr	r2, [r3, #0]
 8001592:	697b      	ldr	r3, [r7, #20]
 8001594:	005b      	lsls	r3, r3, #1
 8001596:	2103      	movs	r1, #3
 8001598:	fa01 f303 	lsl.w	r3, r1, r3
 800159c:	43db      	mvns	r3, r3
 800159e:	401a      	ands	r2, r3
 80015a0:	687b      	ldr	r3, [r7, #4]
 80015a2:	601a      	str	r2, [r3, #0]

      /* Configure the default Alternate Function in current IO */
      GPIOx->AFR[position >> 3U] &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 80015a4:	697b      	ldr	r3, [r7, #20]
 80015a6:	08da      	lsrs	r2, r3, #3
 80015a8:	687b      	ldr	r3, [r7, #4]
 80015aa:	3208      	adds	r2, #8
 80015ac:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 80015b0:	697b      	ldr	r3, [r7, #20]
 80015b2:	f003 0307 	and.w	r3, r3, #7
 80015b6:	009b      	lsls	r3, r3, #2
 80015b8:	220f      	movs	r2, #15
 80015ba:	fa02 f303 	lsl.w	r3, r2, r3
 80015be:	43db      	mvns	r3, r3
 80015c0:	697a      	ldr	r2, [r7, #20]
 80015c2:	08d2      	lsrs	r2, r2, #3
 80015c4:	4019      	ands	r1, r3
 80015c6:	687b      	ldr	r3, [r7, #4]
 80015c8:	3208      	adds	r2, #8
 80015ca:	f843 1022 	str.w	r1, [r3, r2, lsl #2]

      /* Deactivate the Pull-up and Pull-down resistor for the current IO */
      GPIOx->PUPDR &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 80015ce:	687b      	ldr	r3, [r7, #4]
 80015d0:	68da      	ldr	r2, [r3, #12]
 80015d2:	697b      	ldr	r3, [r7, #20]
 80015d4:	005b      	lsls	r3, r3, #1
 80015d6:	2103      	movs	r1, #3
 80015d8:	fa01 f303 	lsl.w	r3, r1, r3
 80015dc:	43db      	mvns	r3, r3
 80015de:	401a      	ands	r2, r3
 80015e0:	687b      	ldr	r3, [r7, #4]
 80015e2:	60da      	str	r2, [r3, #12]

      /* Configure the default value IO Output Type */
      GPIOx->OTYPER  &= ~(GPIO_OTYPER_OT_0 << position) ;
 80015e4:	687b      	ldr	r3, [r7, #4]
 80015e6:	685a      	ldr	r2, [r3, #4]
 80015e8:	2101      	movs	r1, #1
 80015ea:	697b      	ldr	r3, [r7, #20]
 80015ec:	fa01 f303 	lsl.w	r3, r1, r3
 80015f0:	43db      	mvns	r3, r3
 80015f2:	401a      	ands	r2, r3
 80015f4:	687b      	ldr	r3, [r7, #4]
 80015f6:	605a      	str	r2, [r3, #4]

      /* Configure the default value for IO Speed */
      GPIOx->OSPEEDR &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 80015f8:	687b      	ldr	r3, [r7, #4]
 80015fa:	689a      	ldr	r2, [r3, #8]
 80015fc:	697b      	ldr	r3, [r7, #20]
 80015fe:	005b      	lsls	r3, r3, #1
 8001600:	2103      	movs	r1, #3
 8001602:	fa01 f303 	lsl.w	r3, r1, r3
 8001606:	43db      	mvns	r3, r3
 8001608:	401a      	ands	r2, r3
 800160a:	687b      	ldr	r3, [r7, #4]
 800160c:	609a      	str	r2, [r3, #8]
  for(position = 0U; position < GPIO_NUMBER; position++)
 800160e:	697b      	ldr	r3, [r7, #20]
 8001610:	3301      	adds	r3, #1
 8001612:	617b      	str	r3, [r7, #20]
 8001614:	697b      	ldr	r3, [r7, #20]
 8001616:	2b0f      	cmp	r3, #15
 8001618:	f67f af34 	bls.w	8001484 <HAL_GPIO_DeInit+0x1c>
    }
  }
}
 800161c:	bf00      	nop
 800161e:	bf00      	nop
 8001620:	371c      	adds	r7, #28
 8001622:	46bd      	mov	sp, r7
 8001624:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001628:	4770      	bx	lr
 800162a:	bf00      	nop
 800162c:	40013800 	.word	0x40013800
 8001630:	40020000 	.word	0x40020000
 8001634:	40020400 	.word	0x40020400
 8001638:	40020800 	.word	0x40020800
 800163c:	40020c00 	.word	0x40020c00
 8001640:	40021000 	.word	0x40021000
 8001644:	40021400 	.word	0x40021400
 8001648:	40021800 	.word	0x40021800
 800164c:	40013c00 	.word	0x40013c00

08001650 <HAL_GPIO_ReadPin>:
  * @param  GPIO_Pin specifies the port bit to read.
  *         This parameter can be GPIO_PIN_x where x can be (0..15).
  * @retval The input port pin value.
  */
GPIO_PinState HAL_GPIO_ReadPin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 8001650:	b480      	push	{r7}
 8001652:	b085      	sub	sp, #20
 8001654:	af00      	add	r7, sp, #0
 8001656:	6078      	str	r0, [r7, #4]
 8001658:	460b      	mov	r3, r1
 800165a:	807b      	strh	r3, [r7, #2]
  GPIO_PinState bitstatus;

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if((GPIOx->IDR & GPIO_Pin) != (uint32_t)GPIO_PIN_RESET)
 800165c:	687b      	ldr	r3, [r7, #4]
 800165e:	691a      	ldr	r2, [r3, #16]
 8001660:	887b      	ldrh	r3, [r7, #2]
 8001662:	4013      	ands	r3, r2
 8001664:	2b00      	cmp	r3, #0
 8001666:	d002      	beq.n	800166e <HAL_GPIO_ReadPin+0x1e>
  {
    bitstatus = GPIO_PIN_SET;
 8001668:	2301      	movs	r3, #1
 800166a:	73fb      	strb	r3, [r7, #15]
 800166c:	e001      	b.n	8001672 <HAL_GPIO_ReadPin+0x22>
  }
  else
  {
    bitstatus = GPIO_PIN_RESET;
 800166e:	2300      	movs	r3, #0
 8001670:	73fb      	strb	r3, [r7, #15]
  }
  return bitstatus;
 8001672:	7bfb      	ldrb	r3, [r7, #15]
}
 8001674:	4618      	mov	r0, r3
 8001676:	3714      	adds	r7, #20
 8001678:	46bd      	mov	sp, r7
 800167a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800167e:	4770      	bx	lr

08001680 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8001680:	b480      	push	{r7}
 8001682:	b083      	sub	sp, #12
 8001684:	af00      	add	r7, sp, #0
 8001686:	6078      	str	r0, [r7, #4]
 8001688:	460b      	mov	r3, r1
 800168a:	807b      	strh	r3, [r7, #2]
 800168c:	4613      	mov	r3, r2
 800168e:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 8001690:	787b      	ldrb	r3, [r7, #1]
 8001692:	2b00      	cmp	r3, #0
 8001694:	d003      	beq.n	800169e <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 8001696:	887a      	ldrh	r2, [r7, #2]
 8001698:	687b      	ldr	r3, [r7, #4]
 800169a:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
  }
}
 800169c:	e003      	b.n	80016a6 <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
 800169e:	887b      	ldrh	r3, [r7, #2]
 80016a0:	041a      	lsls	r2, r3, #16
 80016a2:	687b      	ldr	r3, [r7, #4]
 80016a4:	619a      	str	r2, [r3, #24]
}
 80016a6:	bf00      	nop
 80016a8:	370c      	adds	r7, #12
 80016aa:	46bd      	mov	sp, r7
 80016ac:	f85d 7b04 	ldr.w	r7, [sp], #4
 80016b0:	4770      	bx	lr
	...

080016b4 <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 80016b4:	b580      	push	{r7, lr}
 80016b6:	b084      	sub	sp, #16
 80016b8:	af00      	add	r7, sp, #0
 80016ba:	6078      	str	r0, [r7, #4]
  uint32_t freqrange;
  uint32_t pclk1;

  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 80016bc:	687b      	ldr	r3, [r7, #4]
 80016be:	2b00      	cmp	r3, #0
 80016c0:	d101      	bne.n	80016c6 <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 80016c2:	2301      	movs	r3, #1
 80016c4:	e12b      	b.n	800191e <HAL_I2C_Init+0x26a>
  assert_param(IS_I2C_DUAL_ADDRESS(hi2c->Init.DualAddressMode));
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 80016c6:	687b      	ldr	r3, [r7, #4]
 80016c8:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 80016cc:	b2db      	uxtb	r3, r3
 80016ce:	2b00      	cmp	r3, #0
 80016d0:	d106      	bne.n	80016e0 <HAL_I2C_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 80016d2:	687b      	ldr	r3, [r7, #4]
 80016d4:	2200      	movs	r2, #0
 80016d6:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_I2C_MspInit(hi2c);
 80016da:	6878      	ldr	r0, [r7, #4]
 80016dc:	f7ff f9dc 	bl	8000a98 <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 80016e0:	687b      	ldr	r3, [r7, #4]
 80016e2:	2224      	movs	r2, #36	@ 0x24
 80016e4:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 80016e8:	687b      	ldr	r3, [r7, #4]
 80016ea:	681b      	ldr	r3, [r3, #0]
 80016ec:	681a      	ldr	r2, [r3, #0]
 80016ee:	687b      	ldr	r3, [r7, #4]
 80016f0:	681b      	ldr	r3, [r3, #0]
 80016f2:	f022 0201 	bic.w	r2, r2, #1
 80016f6:	601a      	str	r2, [r3, #0]

  /*Reset I2C*/
  hi2c->Instance->CR1 |= I2C_CR1_SWRST;
 80016f8:	687b      	ldr	r3, [r7, #4]
 80016fa:	681b      	ldr	r3, [r3, #0]
 80016fc:	681a      	ldr	r2, [r3, #0]
 80016fe:	687b      	ldr	r3, [r7, #4]
 8001700:	681b      	ldr	r3, [r3, #0]
 8001702:	f442 4200 	orr.w	r2, r2, #32768	@ 0x8000
 8001706:	601a      	str	r2, [r3, #0]
  hi2c->Instance->CR1 &= ~I2C_CR1_SWRST;
 8001708:	687b      	ldr	r3, [r7, #4]
 800170a:	681b      	ldr	r3, [r3, #0]
 800170c:	681a      	ldr	r2, [r3, #0]
 800170e:	687b      	ldr	r3, [r7, #4]
 8001710:	681b      	ldr	r3, [r3, #0]
 8001712:	f422 4200 	bic.w	r2, r2, #32768	@ 0x8000
 8001716:	601a      	str	r2, [r3, #0]

  /* Get PCLK1 frequency */
  pclk1 = HAL_RCC_GetPCLK1Freq();
 8001718:	f002 facc 	bl	8003cb4 <HAL_RCC_GetPCLK1Freq>
 800171c:	60f8      	str	r0, [r7, #12]

  /* Check the minimum allowed PCLK1 frequency */
  if (I2C_MIN_PCLK_FREQ(pclk1, hi2c->Init.ClockSpeed) == 1U)
 800171e:	687b      	ldr	r3, [r7, #4]
 8001720:	685b      	ldr	r3, [r3, #4]
 8001722:	4a81      	ldr	r2, [pc, #516]	@ (8001928 <HAL_I2C_Init+0x274>)
 8001724:	4293      	cmp	r3, r2
 8001726:	d807      	bhi.n	8001738 <HAL_I2C_Init+0x84>
 8001728:	68fb      	ldr	r3, [r7, #12]
 800172a:	4a80      	ldr	r2, [pc, #512]	@ (800192c <HAL_I2C_Init+0x278>)
 800172c:	4293      	cmp	r3, r2
 800172e:	bf94      	ite	ls
 8001730:	2301      	movls	r3, #1
 8001732:	2300      	movhi	r3, #0
 8001734:	b2db      	uxtb	r3, r3
 8001736:	e006      	b.n	8001746 <HAL_I2C_Init+0x92>
 8001738:	68fb      	ldr	r3, [r7, #12]
 800173a:	4a7d      	ldr	r2, [pc, #500]	@ (8001930 <HAL_I2C_Init+0x27c>)
 800173c:	4293      	cmp	r3, r2
 800173e:	bf94      	ite	ls
 8001740:	2301      	movls	r3, #1
 8001742:	2300      	movhi	r3, #0
 8001744:	b2db      	uxtb	r3, r3
 8001746:	2b00      	cmp	r3, #0
 8001748:	d001      	beq.n	800174e <HAL_I2C_Init+0x9a>
  {
    return HAL_ERROR;
 800174a:	2301      	movs	r3, #1
 800174c:	e0e7      	b.n	800191e <HAL_I2C_Init+0x26a>
  }

  /* Calculate frequency range */
  freqrange = I2C_FREQRANGE(pclk1);
 800174e:	68fb      	ldr	r3, [r7, #12]
 8001750:	4a78      	ldr	r2, [pc, #480]	@ (8001934 <HAL_I2C_Init+0x280>)
 8001752:	fba2 2303 	umull	r2, r3, r2, r3
 8001756:	0c9b      	lsrs	r3, r3, #18
 8001758:	60bb      	str	r3, [r7, #8]

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Frequency range */
  MODIFY_REG(hi2c->Instance->CR2, I2C_CR2_FREQ, freqrange);
 800175a:	687b      	ldr	r3, [r7, #4]
 800175c:	681b      	ldr	r3, [r3, #0]
 800175e:	685b      	ldr	r3, [r3, #4]
 8001760:	f023 013f 	bic.w	r1, r3, #63	@ 0x3f
 8001764:	687b      	ldr	r3, [r7, #4]
 8001766:	681b      	ldr	r3, [r3, #0]
 8001768:	68ba      	ldr	r2, [r7, #8]
 800176a:	430a      	orrs	r2, r1
 800176c:	605a      	str	r2, [r3, #4]

  /*---------------------------- I2Cx TRISE Configuration --------------------*/
  /* Configure I2Cx: Rise Time */
  MODIFY_REG(hi2c->Instance->TRISE, I2C_TRISE_TRISE, I2C_RISE_TIME(freqrange, hi2c->Init.ClockSpeed));
 800176e:	687b      	ldr	r3, [r7, #4]
 8001770:	681b      	ldr	r3, [r3, #0]
 8001772:	6a1b      	ldr	r3, [r3, #32]
 8001774:	f023 013f 	bic.w	r1, r3, #63	@ 0x3f
 8001778:	687b      	ldr	r3, [r7, #4]
 800177a:	685b      	ldr	r3, [r3, #4]
 800177c:	4a6a      	ldr	r2, [pc, #424]	@ (8001928 <HAL_I2C_Init+0x274>)
 800177e:	4293      	cmp	r3, r2
 8001780:	d802      	bhi.n	8001788 <HAL_I2C_Init+0xd4>
 8001782:	68bb      	ldr	r3, [r7, #8]
 8001784:	3301      	adds	r3, #1
 8001786:	e009      	b.n	800179c <HAL_I2C_Init+0xe8>
 8001788:	68bb      	ldr	r3, [r7, #8]
 800178a:	f44f 7296 	mov.w	r2, #300	@ 0x12c
 800178e:	fb02 f303 	mul.w	r3, r2, r3
 8001792:	4a69      	ldr	r2, [pc, #420]	@ (8001938 <HAL_I2C_Init+0x284>)
 8001794:	fba2 2303 	umull	r2, r3, r2, r3
 8001798:	099b      	lsrs	r3, r3, #6
 800179a:	3301      	adds	r3, #1
 800179c:	687a      	ldr	r2, [r7, #4]
 800179e:	6812      	ldr	r2, [r2, #0]
 80017a0:	430b      	orrs	r3, r1
 80017a2:	6213      	str	r3, [r2, #32]

  /*---------------------------- I2Cx CCR Configuration ----------------------*/
  /* Configure I2Cx: Speed */
  MODIFY_REG(hi2c->Instance->CCR, (I2C_CCR_FS | I2C_CCR_DUTY | I2C_CCR_CCR), I2C_SPEED(pclk1, hi2c->Init.ClockSpeed, hi2c->Init.DutyCycle));
 80017a4:	687b      	ldr	r3, [r7, #4]
 80017a6:	681b      	ldr	r3, [r3, #0]
 80017a8:	69db      	ldr	r3, [r3, #28]
 80017aa:	f423 424f 	bic.w	r2, r3, #52992	@ 0xcf00
 80017ae:	f022 02ff 	bic.w	r2, r2, #255	@ 0xff
 80017b2:	687b      	ldr	r3, [r7, #4]
 80017b4:	685b      	ldr	r3, [r3, #4]
 80017b6:	495c      	ldr	r1, [pc, #368]	@ (8001928 <HAL_I2C_Init+0x274>)
 80017b8:	428b      	cmp	r3, r1
 80017ba:	d819      	bhi.n	80017f0 <HAL_I2C_Init+0x13c>
 80017bc:	68fb      	ldr	r3, [r7, #12]
 80017be:	1e59      	subs	r1, r3, #1
 80017c0:	687b      	ldr	r3, [r7, #4]
 80017c2:	685b      	ldr	r3, [r3, #4]
 80017c4:	005b      	lsls	r3, r3, #1
 80017c6:	fbb1 f3f3 	udiv	r3, r1, r3
 80017ca:	1c59      	adds	r1, r3, #1
 80017cc:	f640 73fc 	movw	r3, #4092	@ 0xffc
 80017d0:	400b      	ands	r3, r1
 80017d2:	2b00      	cmp	r3, #0
 80017d4:	d00a      	beq.n	80017ec <HAL_I2C_Init+0x138>
 80017d6:	68fb      	ldr	r3, [r7, #12]
 80017d8:	1e59      	subs	r1, r3, #1
 80017da:	687b      	ldr	r3, [r7, #4]
 80017dc:	685b      	ldr	r3, [r3, #4]
 80017de:	005b      	lsls	r3, r3, #1
 80017e0:	fbb1 f3f3 	udiv	r3, r1, r3
 80017e4:	3301      	adds	r3, #1
 80017e6:	f3c3 030b 	ubfx	r3, r3, #0, #12
 80017ea:	e051      	b.n	8001890 <HAL_I2C_Init+0x1dc>
 80017ec:	2304      	movs	r3, #4
 80017ee:	e04f      	b.n	8001890 <HAL_I2C_Init+0x1dc>
 80017f0:	687b      	ldr	r3, [r7, #4]
 80017f2:	689b      	ldr	r3, [r3, #8]
 80017f4:	2b00      	cmp	r3, #0
 80017f6:	d111      	bne.n	800181c <HAL_I2C_Init+0x168>
 80017f8:	68fb      	ldr	r3, [r7, #12]
 80017fa:	1e58      	subs	r0, r3, #1
 80017fc:	687b      	ldr	r3, [r7, #4]
 80017fe:	6859      	ldr	r1, [r3, #4]
 8001800:	460b      	mov	r3, r1
 8001802:	005b      	lsls	r3, r3, #1
 8001804:	440b      	add	r3, r1
 8001806:	fbb0 f3f3 	udiv	r3, r0, r3
 800180a:	3301      	adds	r3, #1
 800180c:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8001810:	2b00      	cmp	r3, #0
 8001812:	bf0c      	ite	eq
 8001814:	2301      	moveq	r3, #1
 8001816:	2300      	movne	r3, #0
 8001818:	b2db      	uxtb	r3, r3
 800181a:	e012      	b.n	8001842 <HAL_I2C_Init+0x18e>
 800181c:	68fb      	ldr	r3, [r7, #12]
 800181e:	1e58      	subs	r0, r3, #1
 8001820:	687b      	ldr	r3, [r7, #4]
 8001822:	6859      	ldr	r1, [r3, #4]
 8001824:	460b      	mov	r3, r1
 8001826:	009b      	lsls	r3, r3, #2
 8001828:	440b      	add	r3, r1
 800182a:	0099      	lsls	r1, r3, #2
 800182c:	440b      	add	r3, r1
 800182e:	fbb0 f3f3 	udiv	r3, r0, r3
 8001832:	3301      	adds	r3, #1
 8001834:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8001838:	2b00      	cmp	r3, #0
 800183a:	bf0c      	ite	eq
 800183c:	2301      	moveq	r3, #1
 800183e:	2300      	movne	r3, #0
 8001840:	b2db      	uxtb	r3, r3
 8001842:	2b00      	cmp	r3, #0
 8001844:	d001      	beq.n	800184a <HAL_I2C_Init+0x196>
 8001846:	2301      	movs	r3, #1
 8001848:	e022      	b.n	8001890 <HAL_I2C_Init+0x1dc>
 800184a:	687b      	ldr	r3, [r7, #4]
 800184c:	689b      	ldr	r3, [r3, #8]
 800184e:	2b00      	cmp	r3, #0
 8001850:	d10e      	bne.n	8001870 <HAL_I2C_Init+0x1bc>
 8001852:	68fb      	ldr	r3, [r7, #12]
 8001854:	1e58      	subs	r0, r3, #1
 8001856:	687b      	ldr	r3, [r7, #4]
 8001858:	6859      	ldr	r1, [r3, #4]
 800185a:	460b      	mov	r3, r1
 800185c:	005b      	lsls	r3, r3, #1
 800185e:	440b      	add	r3, r1
 8001860:	fbb0 f3f3 	udiv	r3, r0, r3
 8001864:	3301      	adds	r3, #1
 8001866:	f3c3 030b 	ubfx	r3, r3, #0, #12
 800186a:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 800186e:	e00f      	b.n	8001890 <HAL_I2C_Init+0x1dc>
 8001870:	68fb      	ldr	r3, [r7, #12]
 8001872:	1e58      	subs	r0, r3, #1
 8001874:	687b      	ldr	r3, [r7, #4]
 8001876:	6859      	ldr	r1, [r3, #4]
 8001878:	460b      	mov	r3, r1
 800187a:	009b      	lsls	r3, r3, #2
 800187c:	440b      	add	r3, r1
 800187e:	0099      	lsls	r1, r3, #2
 8001880:	440b      	add	r3, r1
 8001882:	fbb0 f3f3 	udiv	r3, r0, r3
 8001886:	3301      	adds	r3, #1
 8001888:	f3c3 030b 	ubfx	r3, r3, #0, #12
 800188c:	f443 4340 	orr.w	r3, r3, #49152	@ 0xc000
 8001890:	6879      	ldr	r1, [r7, #4]
 8001892:	6809      	ldr	r1, [r1, #0]
 8001894:	4313      	orrs	r3, r2
 8001896:	61cb      	str	r3, [r1, #28]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  MODIFY_REG(hi2c->Instance->CR1, (I2C_CR1_ENGC | I2C_CR1_NOSTRETCH), (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode));
 8001898:	687b      	ldr	r3, [r7, #4]
 800189a:	681b      	ldr	r3, [r3, #0]
 800189c:	681b      	ldr	r3, [r3, #0]
 800189e:	f023 01c0 	bic.w	r1, r3, #192	@ 0xc0
 80018a2:	687b      	ldr	r3, [r7, #4]
 80018a4:	69da      	ldr	r2, [r3, #28]
 80018a6:	687b      	ldr	r3, [r7, #4]
 80018a8:	6a1b      	ldr	r3, [r3, #32]
 80018aa:	431a      	orrs	r2, r3
 80018ac:	687b      	ldr	r3, [r7, #4]
 80018ae:	681b      	ldr	r3, [r3, #0]
 80018b0:	430a      	orrs	r2, r1
 80018b2:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Configure I2Cx: Own Address1 and addressing mode */
  MODIFY_REG(hi2c->Instance->OAR1, (I2C_OAR1_ADDMODE | I2C_OAR1_ADD8_9 | I2C_OAR1_ADD1_7 | I2C_OAR1_ADD0), (hi2c->Init.AddressingMode | hi2c->Init.OwnAddress1));
 80018b4:	687b      	ldr	r3, [r7, #4]
 80018b6:	681b      	ldr	r3, [r3, #0]
 80018b8:	689b      	ldr	r3, [r3, #8]
 80018ba:	f423 4303 	bic.w	r3, r3, #33536	@ 0x8300
 80018be:	f023 03ff 	bic.w	r3, r3, #255	@ 0xff
 80018c2:	687a      	ldr	r2, [r7, #4]
 80018c4:	6911      	ldr	r1, [r2, #16]
 80018c6:	687a      	ldr	r2, [r7, #4]
 80018c8:	68d2      	ldr	r2, [r2, #12]
 80018ca:	4311      	orrs	r1, r2
 80018cc:	687a      	ldr	r2, [r7, #4]
 80018ce:	6812      	ldr	r2, [r2, #0]
 80018d0:	430b      	orrs	r3, r1
 80018d2:	6093      	str	r3, [r2, #8]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Configure I2Cx: Dual mode and Own Address2 */
  MODIFY_REG(hi2c->Instance->OAR2, (I2C_OAR2_ENDUAL | I2C_OAR2_ADD2), (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2));
 80018d4:	687b      	ldr	r3, [r7, #4]
 80018d6:	681b      	ldr	r3, [r3, #0]
 80018d8:	68db      	ldr	r3, [r3, #12]
 80018da:	f023 01ff 	bic.w	r1, r3, #255	@ 0xff
 80018de:	687b      	ldr	r3, [r7, #4]
 80018e0:	695a      	ldr	r2, [r3, #20]
 80018e2:	687b      	ldr	r3, [r7, #4]
 80018e4:	699b      	ldr	r3, [r3, #24]
 80018e6:	431a      	orrs	r2, r3
 80018e8:	687b      	ldr	r3, [r7, #4]
 80018ea:	681b      	ldr	r3, [r3, #0]
 80018ec:	430a      	orrs	r2, r1
 80018ee:	60da      	str	r2, [r3, #12]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 80018f0:	687b      	ldr	r3, [r7, #4]
 80018f2:	681b      	ldr	r3, [r3, #0]
 80018f4:	681a      	ldr	r2, [r3, #0]
 80018f6:	687b      	ldr	r3, [r7, #4]
 80018f8:	681b      	ldr	r3, [r3, #0]
 80018fa:	f042 0201 	orr.w	r2, r2, #1
 80018fe:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8001900:	687b      	ldr	r3, [r7, #4]
 8001902:	2200      	movs	r2, #0
 8001904:	641a      	str	r2, [r3, #64]	@ 0x40
  hi2c->State = HAL_I2C_STATE_READY;
 8001906:	687b      	ldr	r3, [r7, #4]
 8001908:	2220      	movs	r2, #32
 800190a:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
  hi2c->PreviousState = I2C_STATE_NONE;
 800190e:	687b      	ldr	r3, [r7, #4]
 8001910:	2200      	movs	r2, #0
 8001912:	631a      	str	r2, [r3, #48]	@ 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 8001914:	687b      	ldr	r3, [r7, #4]
 8001916:	2200      	movs	r2, #0
 8001918:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e

  return HAL_OK;
 800191c:	2300      	movs	r3, #0
}
 800191e:	4618      	mov	r0, r3
 8001920:	3710      	adds	r7, #16
 8001922:	46bd      	mov	sp, r7
 8001924:	bd80      	pop	{r7, pc}
 8001926:	bf00      	nop
 8001928:	000186a0 	.word	0x000186a0
 800192c:	001e847f 	.word	0x001e847f
 8001930:	003d08ff 	.word	0x003d08ff
 8001934:	431bde83 	.word	0x431bde83
 8001938:	10624dd3 	.word	0x10624dd3

0800193c <HAL_I2C_DeInit>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_DeInit(I2C_HandleTypeDef *hi2c)
{
 800193c:	b580      	push	{r7, lr}
 800193e:	b082      	sub	sp, #8
 8001940:	af00      	add	r7, sp, #0
 8001942:	6078      	str	r0, [r7, #4]
  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 8001944:	687b      	ldr	r3, [r7, #4]
 8001946:	2b00      	cmp	r3, #0
 8001948:	d101      	bne.n	800194e <HAL_I2C_DeInit+0x12>
  {
    return HAL_ERROR;
 800194a:	2301      	movs	r3, #1
 800194c:	e021      	b.n	8001992 <HAL_I2C_DeInit+0x56>
  }

  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));

  hi2c->State = HAL_I2C_STATE_BUSY;
 800194e:	687b      	ldr	r3, [r7, #4]
 8001950:	2224      	movs	r2, #36	@ 0x24
 8001952:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Disable the I2C Peripheral Clock */
  __HAL_I2C_DISABLE(hi2c);
 8001956:	687b      	ldr	r3, [r7, #4]
 8001958:	681b      	ldr	r3, [r3, #0]
 800195a:	681a      	ldr	r2, [r3, #0]
 800195c:	687b      	ldr	r3, [r7, #4]
 800195e:	681b      	ldr	r3, [r3, #0]
 8001960:	f022 0201 	bic.w	r2, r2, #1
 8001964:	601a      	str	r2, [r3, #0]

  /* DeInit the low level hardware: GPIO, CLOCK, NVIC */
  hi2c->MspDeInitCallback(hi2c);
#else
  /* DeInit the low level hardware: GPIO, CLOCK, NVIC */
  HAL_I2C_MspDeInit(hi2c);
 8001966:	6878      	ldr	r0, [r7, #4]
 8001968:	f7ff f8ee 	bl	8000b48 <HAL_I2C_MspDeInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */

  hi2c->ErrorCode     = HAL_I2C_ERROR_NONE;
 800196c:	687b      	ldr	r3, [r7, #4]
 800196e:	2200      	movs	r2, #0
 8001970:	641a      	str	r2, [r3, #64]	@ 0x40
  hi2c->State         = HAL_I2C_STATE_RESET;
 8001972:	687b      	ldr	r3, [r7, #4]
 8001974:	2200      	movs	r2, #0
 8001976:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
  hi2c->PreviousState = I2C_STATE_NONE;
 800197a:	687b      	ldr	r3, [r7, #4]
 800197c:	2200      	movs	r2, #0
 800197e:	631a      	str	r2, [r3, #48]	@ 0x30
  hi2c->Mode          = HAL_I2C_MODE_NONE;
 8001980:	687b      	ldr	r3, [r7, #4]
 8001982:	2200      	movs	r2, #0
 8001984:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e

  /* Release Lock */
  __HAL_UNLOCK(hi2c);
 8001988:	687b      	ldr	r3, [r7, #4]
 800198a:	2200      	movs	r2, #0
 800198c:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return HAL_OK;
 8001990:	2300      	movs	r3, #0
}
 8001992:	4618      	mov	r0, r3
 8001994:	3708      	adds	r7, #8
 8001996:	46bd      	mov	sp, r7
 8001998:	bd80      	pop	{r7, pc}

0800199a <I2C_Flush_DR>:
  * @brief  I2C data register flush process.
  * @param  hi2c I2C handle.
  * @retval None
  */
static void I2C_Flush_DR(I2C_HandleTypeDef *hi2c)
{
 800199a:	b480      	push	{r7}
 800199c:	b083      	sub	sp, #12
 800199e:	af00      	add	r7, sp, #0
 80019a0:	6078      	str	r0, [r7, #4]
  /* Write a dummy data in DR to clear TXE flag */
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) != RESET)
 80019a2:	687b      	ldr	r3, [r7, #4]
 80019a4:	681b      	ldr	r3, [r3, #0]
 80019a6:	695b      	ldr	r3, [r3, #20]
 80019a8:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 80019ac:	2b80      	cmp	r3, #128	@ 0x80
 80019ae:	d103      	bne.n	80019b8 <I2C_Flush_DR+0x1e>
  {
    hi2c->Instance->DR = 0x00U;
 80019b0:	687b      	ldr	r3, [r7, #4]
 80019b2:	681b      	ldr	r3, [r3, #0]
 80019b4:	2200      	movs	r2, #0
 80019b6:	611a      	str	r2, [r3, #16]
  }
}
 80019b8:	bf00      	nop
 80019ba:	370c      	adds	r7, #12
 80019bc:	46bd      	mov	sp, r7
 80019be:	f85d 7b04 	ldr.w	r7, [sp], #4
 80019c2:	4770      	bx	lr

080019c4 <HAL_I2C_Slave_Transmit>:
  * @param  Size Amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Slave_Transmit(I2C_HandleTypeDef *hi2c, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 80019c4:	b580      	push	{r7, lr}
 80019c6:	b08a      	sub	sp, #40	@ 0x28
 80019c8:	af02      	add	r7, sp, #8
 80019ca:	60f8      	str	r0, [r7, #12]
 80019cc:	60b9      	str	r1, [r7, #8]
 80019ce:	603b      	str	r3, [r7, #0]
 80019d0:	4613      	mov	r3, r2
 80019d2:	80fb      	strh	r3, [r7, #6]
  /* Init tickstart for timeout management*/
  uint32_t tickstart = HAL_GetTick();
 80019d4:	f7ff fa64 	bl	8000ea0 <HAL_GetTick>
 80019d8:	61f8      	str	r0, [r7, #28]

  if (hi2c->State == HAL_I2C_STATE_READY)
 80019da:	68fb      	ldr	r3, [r7, #12]
 80019dc:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 80019e0:	b2db      	uxtb	r3, r3
 80019e2:	2b20      	cmp	r3, #32
 80019e4:	f040 80fb 	bne.w	8001bde <HAL_I2C_Slave_Transmit+0x21a>
  {
    if ((pData == NULL) || (Size == 0U))
 80019e8:	68bb      	ldr	r3, [r7, #8]
 80019ea:	2b00      	cmp	r3, #0
 80019ec:	d002      	beq.n	80019f4 <HAL_I2C_Slave_Transmit+0x30>
 80019ee:	88fb      	ldrh	r3, [r7, #6]
 80019f0:	2b00      	cmp	r3, #0
 80019f2:	d101      	bne.n	80019f8 <HAL_I2C_Slave_Transmit+0x34>
    {
      return  HAL_ERROR;
 80019f4:	2301      	movs	r3, #1
 80019f6:	e0f3      	b.n	8001be0 <HAL_I2C_Slave_Transmit+0x21c>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 80019f8:	68fb      	ldr	r3, [r7, #12]
 80019fa:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 80019fe:	2b01      	cmp	r3, #1
 8001a00:	d101      	bne.n	8001a06 <HAL_I2C_Slave_Transmit+0x42>
 8001a02:	2302      	movs	r3, #2
 8001a04:	e0ec      	b.n	8001be0 <HAL_I2C_Slave_Transmit+0x21c>
 8001a06:	68fb      	ldr	r3, [r7, #12]
 8001a08:	2201      	movs	r2, #1
 8001a0a:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    /* Check if the I2C is already enabled */
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 8001a0e:	68fb      	ldr	r3, [r7, #12]
 8001a10:	681b      	ldr	r3, [r3, #0]
 8001a12:	681b      	ldr	r3, [r3, #0]
 8001a14:	f003 0301 	and.w	r3, r3, #1
 8001a18:	2b01      	cmp	r3, #1
 8001a1a:	d007      	beq.n	8001a2c <HAL_I2C_Slave_Transmit+0x68>
    {
      /* Enable I2C peripheral */
      __HAL_I2C_ENABLE(hi2c);
 8001a1c:	68fb      	ldr	r3, [r7, #12]
 8001a1e:	681b      	ldr	r3, [r3, #0]
 8001a20:	681a      	ldr	r2, [r3, #0]
 8001a22:	68fb      	ldr	r3, [r7, #12]
 8001a24:	681b      	ldr	r3, [r3, #0]
 8001a26:	f042 0201 	orr.w	r2, r2, #1
 8001a2a:	601a      	str	r2, [r3, #0]
    }

    /* Disable Pos */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 8001a2c:	68fb      	ldr	r3, [r7, #12]
 8001a2e:	681b      	ldr	r3, [r3, #0]
 8001a30:	681a      	ldr	r2, [r3, #0]
 8001a32:	68fb      	ldr	r3, [r7, #12]
 8001a34:	681b      	ldr	r3, [r3, #0]
 8001a36:	f422 6200 	bic.w	r2, r2, #2048	@ 0x800
 8001a3a:	601a      	str	r2, [r3, #0]

    hi2c->State       = HAL_I2C_STATE_BUSY_TX;
 8001a3c:	68fb      	ldr	r3, [r7, #12]
 8001a3e:	2221      	movs	r2, #33	@ 0x21
 8001a40:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
    hi2c->Mode        = HAL_I2C_MODE_SLAVE;
 8001a44:	68fb      	ldr	r3, [r7, #12]
 8001a46:	2220      	movs	r2, #32
 8001a48:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
    hi2c->ErrorCode   = HAL_I2C_ERROR_NONE;
 8001a4c:	68fb      	ldr	r3, [r7, #12]
 8001a4e:	2200      	movs	r2, #0
 8001a50:	641a      	str	r2, [r3, #64]	@ 0x40

    /* Prepare transfer parameters */
    hi2c->pBuffPtr    = pData;
 8001a52:	68fb      	ldr	r3, [r7, #12]
 8001a54:	68ba      	ldr	r2, [r7, #8]
 8001a56:	625a      	str	r2, [r3, #36]	@ 0x24
    hi2c->XferCount   = Size;
 8001a58:	68fb      	ldr	r3, [r7, #12]
 8001a5a:	88fa      	ldrh	r2, [r7, #6]
 8001a5c:	855a      	strh	r2, [r3, #42]	@ 0x2a
    hi2c->XferSize    = hi2c->XferCount;
 8001a5e:	68fb      	ldr	r3, [r7, #12]
 8001a60:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8001a62:	b29a      	uxth	r2, r3
 8001a64:	68fb      	ldr	r3, [r7, #12]
 8001a66:	851a      	strh	r2, [r3, #40]	@ 0x28
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 8001a68:	68fb      	ldr	r3, [r7, #12]
 8001a6a:	4a5f      	ldr	r2, [pc, #380]	@ (8001be8 <HAL_I2C_Slave_Transmit+0x224>)
 8001a6c:	62da      	str	r2, [r3, #44]	@ 0x2c

    /* Enable Address Acknowledge */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8001a6e:	68fb      	ldr	r3, [r7, #12]
 8001a70:	681b      	ldr	r3, [r3, #0]
 8001a72:	681a      	ldr	r2, [r3, #0]
 8001a74:	68fb      	ldr	r3, [r7, #12]
 8001a76:	681b      	ldr	r3, [r3, #0]
 8001a78:	f442 6280 	orr.w	r2, r2, #1024	@ 0x400
 8001a7c:	601a      	str	r2, [r3, #0]

    /* Wait until ADDR flag is set */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, RESET, Timeout, tickstart) != HAL_OK)
 8001a7e:	69fb      	ldr	r3, [r7, #28]
 8001a80:	9300      	str	r3, [sp, #0]
 8001a82:	683b      	ldr	r3, [r7, #0]
 8001a84:	2200      	movs	r2, #0
 8001a86:	4959      	ldr	r1, [pc, #356]	@ (8001bec <HAL_I2C_Slave_Transmit+0x228>)
 8001a88:	68f8      	ldr	r0, [r7, #12]
 8001a8a:	f001 fe41 	bl	8003710 <I2C_WaitOnFlagUntilTimeout>
 8001a8e:	4603      	mov	r3, r0
 8001a90:	2b00      	cmp	r3, #0
 8001a92:	d001      	beq.n	8001a98 <HAL_I2C_Slave_Transmit+0xd4>
    {
      return HAL_ERROR;
 8001a94:	2301      	movs	r3, #1
 8001a96:	e0a3      	b.n	8001be0 <HAL_I2C_Slave_Transmit+0x21c>
    }

    /* Clear ADDR flag */
    __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8001a98:	2300      	movs	r3, #0
 8001a9a:	61bb      	str	r3, [r7, #24]
 8001a9c:	68fb      	ldr	r3, [r7, #12]
 8001a9e:	681b      	ldr	r3, [r3, #0]
 8001aa0:	695b      	ldr	r3, [r3, #20]
 8001aa2:	61bb      	str	r3, [r7, #24]
 8001aa4:	68fb      	ldr	r3, [r7, #12]
 8001aa6:	681b      	ldr	r3, [r3, #0]
 8001aa8:	699b      	ldr	r3, [r3, #24]
 8001aaa:	61bb      	str	r3, [r7, #24]
 8001aac:	69bb      	ldr	r3, [r7, #24]

    /* If 10bit addressing mode is selected */
    if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_10BIT)
 8001aae:	68fb      	ldr	r3, [r7, #12]
 8001ab0:	691b      	ldr	r3, [r3, #16]
 8001ab2:	f5b3 4f40 	cmp.w	r3, #49152	@ 0xc000
 8001ab6:	d165      	bne.n	8001b84 <HAL_I2C_Slave_Transmit+0x1c0>
    {
      /* Wait until ADDR flag is set */
      if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, RESET, Timeout, tickstart) != HAL_OK)
 8001ab8:	69fb      	ldr	r3, [r7, #28]
 8001aba:	9300      	str	r3, [sp, #0]
 8001abc:	683b      	ldr	r3, [r7, #0]
 8001abe:	2200      	movs	r2, #0
 8001ac0:	494a      	ldr	r1, [pc, #296]	@ (8001bec <HAL_I2C_Slave_Transmit+0x228>)
 8001ac2:	68f8      	ldr	r0, [r7, #12]
 8001ac4:	f001 fe24 	bl	8003710 <I2C_WaitOnFlagUntilTimeout>
 8001ac8:	4603      	mov	r3, r0
 8001aca:	2b00      	cmp	r3, #0
 8001acc:	d001      	beq.n	8001ad2 <HAL_I2C_Slave_Transmit+0x10e>
      {
        return HAL_ERROR;
 8001ace:	2301      	movs	r3, #1
 8001ad0:	e086      	b.n	8001be0 <HAL_I2C_Slave_Transmit+0x21c>
      }

      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8001ad2:	2300      	movs	r3, #0
 8001ad4:	617b      	str	r3, [r7, #20]
 8001ad6:	68fb      	ldr	r3, [r7, #12]
 8001ad8:	681b      	ldr	r3, [r3, #0]
 8001ada:	695b      	ldr	r3, [r3, #20]
 8001adc:	617b      	str	r3, [r7, #20]
 8001ade:	68fb      	ldr	r3, [r7, #12]
 8001ae0:	681b      	ldr	r3, [r3, #0]
 8001ae2:	699b      	ldr	r3, [r3, #24]
 8001ae4:	617b      	str	r3, [r7, #20]
 8001ae6:	697b      	ldr	r3, [r7, #20]
    }

    while (hi2c->XferSize > 0U)
 8001ae8:	e04c      	b.n	8001b84 <HAL_I2C_Slave_Transmit+0x1c0>
    {
      /* Wait until TXE flag is set */
      if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8001aea:	69fa      	ldr	r2, [r7, #28]
 8001aec:	6839      	ldr	r1, [r7, #0]
 8001aee:	68f8      	ldr	r0, [r7, #12]
 8001af0:	f001 fe88 	bl	8003804 <I2C_WaitOnTXEFlagUntilTimeout>
 8001af4:	4603      	mov	r3, r0
 8001af6:	2b00      	cmp	r3, #0
 8001af8:	d009      	beq.n	8001b0e <HAL_I2C_Slave_Transmit+0x14a>
      {
        /* Disable Address Acknowledge */
        CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8001afa:	68fb      	ldr	r3, [r7, #12]
 8001afc:	681b      	ldr	r3, [r3, #0]
 8001afe:	681a      	ldr	r2, [r3, #0]
 8001b00:	68fb      	ldr	r3, [r7, #12]
 8001b02:	681b      	ldr	r3, [r3, #0]
 8001b04:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 8001b08:	601a      	str	r2, [r3, #0]

        return HAL_ERROR;
 8001b0a:	2301      	movs	r3, #1
 8001b0c:	e068      	b.n	8001be0 <HAL_I2C_Slave_Transmit+0x21c>
      }

      /* Write data to DR */
      hi2c->Instance->DR = *hi2c->pBuffPtr;
 8001b0e:	68fb      	ldr	r3, [r7, #12]
 8001b10:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8001b12:	781a      	ldrb	r2, [r3, #0]
 8001b14:	68fb      	ldr	r3, [r7, #12]
 8001b16:	681b      	ldr	r3, [r3, #0]
 8001b18:	611a      	str	r2, [r3, #16]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 8001b1a:	68fb      	ldr	r3, [r7, #12]
 8001b1c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8001b1e:	1c5a      	adds	r2, r3, #1
 8001b20:	68fb      	ldr	r3, [r7, #12]
 8001b22:	625a      	str	r2, [r3, #36]	@ 0x24

      /* Update counter */
      hi2c->XferCount--;
 8001b24:	68fb      	ldr	r3, [r7, #12]
 8001b26:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8001b28:	b29b      	uxth	r3, r3
 8001b2a:	3b01      	subs	r3, #1
 8001b2c:	b29a      	uxth	r2, r3
 8001b2e:	68fb      	ldr	r3, [r7, #12]
 8001b30:	855a      	strh	r2, [r3, #42]	@ 0x2a
      hi2c->XferSize--;
 8001b32:	68fb      	ldr	r3, [r7, #12]
 8001b34:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8001b36:	3b01      	subs	r3, #1
 8001b38:	b29a      	uxth	r2, r3
 8001b3a:	68fb      	ldr	r3, [r7, #12]
 8001b3c:	851a      	strh	r2, [r3, #40]	@ 0x28

      if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == SET) && (hi2c->XferSize != 0U))
 8001b3e:	68fb      	ldr	r3, [r7, #12]
 8001b40:	681b      	ldr	r3, [r3, #0]
 8001b42:	695b      	ldr	r3, [r3, #20]
 8001b44:	f003 0304 	and.w	r3, r3, #4
 8001b48:	2b04      	cmp	r3, #4
 8001b4a:	d11b      	bne.n	8001b84 <HAL_I2C_Slave_Transmit+0x1c0>
 8001b4c:	68fb      	ldr	r3, [r7, #12]
 8001b4e:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8001b50:	2b00      	cmp	r3, #0
 8001b52:	d017      	beq.n	8001b84 <HAL_I2C_Slave_Transmit+0x1c0>
      {
        /* Write data to DR */
        hi2c->Instance->DR = *hi2c->pBuffPtr;
 8001b54:	68fb      	ldr	r3, [r7, #12]
 8001b56:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8001b58:	781a      	ldrb	r2, [r3, #0]
 8001b5a:	68fb      	ldr	r3, [r7, #12]
 8001b5c:	681b      	ldr	r3, [r3, #0]
 8001b5e:	611a      	str	r2, [r3, #16]

        /* Increment Buffer pointer */
        hi2c->pBuffPtr++;
 8001b60:	68fb      	ldr	r3, [r7, #12]
 8001b62:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8001b64:	1c5a      	adds	r2, r3, #1
 8001b66:	68fb      	ldr	r3, [r7, #12]
 8001b68:	625a      	str	r2, [r3, #36]	@ 0x24

        /* Update counter */
        hi2c->XferCount--;
 8001b6a:	68fb      	ldr	r3, [r7, #12]
 8001b6c:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8001b6e:	b29b      	uxth	r3, r3
 8001b70:	3b01      	subs	r3, #1
 8001b72:	b29a      	uxth	r2, r3
 8001b74:	68fb      	ldr	r3, [r7, #12]
 8001b76:	855a      	strh	r2, [r3, #42]	@ 0x2a
        hi2c->XferSize--;
 8001b78:	68fb      	ldr	r3, [r7, #12]
 8001b7a:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8001b7c:	3b01      	subs	r3, #1
 8001b7e:	b29a      	uxth	r2, r3
 8001b80:	68fb      	ldr	r3, [r7, #12]
 8001b82:	851a      	strh	r2, [r3, #40]	@ 0x28
    while (hi2c->XferSize > 0U)
 8001b84:	68fb      	ldr	r3, [r7, #12]
 8001b86:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8001b88:	2b00      	cmp	r3, #0
 8001b8a:	d1ae      	bne.n	8001aea <HAL_I2C_Slave_Transmit+0x126>
      }
    }

    /* Wait until AF flag is set */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_AF, RESET, Timeout, tickstart) != HAL_OK)
 8001b8c:	69fb      	ldr	r3, [r7, #28]
 8001b8e:	9300      	str	r3, [sp, #0]
 8001b90:	683b      	ldr	r3, [r7, #0]
 8001b92:	2200      	movs	r2, #0
 8001b94:	f44f 3182 	mov.w	r1, #66560	@ 0x10400
 8001b98:	68f8      	ldr	r0, [r7, #12]
 8001b9a:	f001 fdb9 	bl	8003710 <I2C_WaitOnFlagUntilTimeout>
 8001b9e:	4603      	mov	r3, r0
 8001ba0:	2b00      	cmp	r3, #0
 8001ba2:	d001      	beq.n	8001ba8 <HAL_I2C_Slave_Transmit+0x1e4>
    {
      return HAL_ERROR;
 8001ba4:	2301      	movs	r3, #1
 8001ba6:	e01b      	b.n	8001be0 <HAL_I2C_Slave_Transmit+0x21c>
    }

    /* Clear AF flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8001ba8:	68fb      	ldr	r3, [r7, #12]
 8001baa:	681b      	ldr	r3, [r3, #0]
 8001bac:	f46f 6280 	mvn.w	r2, #1024	@ 0x400
 8001bb0:	615a      	str	r2, [r3, #20]

    /* Disable Address Acknowledge */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8001bb2:	68fb      	ldr	r3, [r7, #12]
 8001bb4:	681b      	ldr	r3, [r3, #0]
 8001bb6:	681a      	ldr	r2, [r3, #0]
 8001bb8:	68fb      	ldr	r3, [r7, #12]
 8001bba:	681b      	ldr	r3, [r3, #0]
 8001bbc:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 8001bc0:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 8001bc2:	68fb      	ldr	r3, [r7, #12]
 8001bc4:	2220      	movs	r2, #32
 8001bc6:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
    hi2c->Mode = HAL_I2C_MODE_NONE;
 8001bca:	68fb      	ldr	r3, [r7, #12]
 8001bcc:	2200      	movs	r2, #0
 8001bce:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8001bd2:	68fb      	ldr	r3, [r7, #12]
 8001bd4:	2200      	movs	r2, #0
 8001bd6:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    return HAL_OK;
 8001bda:	2300      	movs	r3, #0
 8001bdc:	e000      	b.n	8001be0 <HAL_I2C_Slave_Transmit+0x21c>
  }
  else
  {
    return HAL_BUSY;
 8001bde:	2302      	movs	r3, #2
  }
}
 8001be0:	4618      	mov	r0, r3
 8001be2:	3720      	adds	r7, #32
 8001be4:	46bd      	mov	sp, r7
 8001be6:	bd80      	pop	{r7, pc}
 8001be8:	ffff0000 	.word	0xffff0000
 8001bec:	00010002 	.word	0x00010002

08001bf0 <HAL_I2C_Slave_Receive>:
  * @param  Size Amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Slave_Receive(I2C_HandleTypeDef *hi2c, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8001bf0:	b580      	push	{r7, lr}
 8001bf2:	b08a      	sub	sp, #40	@ 0x28
 8001bf4:	af02      	add	r7, sp, #8
 8001bf6:	60f8      	str	r0, [r7, #12]
 8001bf8:	60b9      	str	r1, [r7, #8]
 8001bfa:	603b      	str	r3, [r7, #0]
 8001bfc:	4613      	mov	r3, r2
 8001bfe:	80fb      	strh	r3, [r7, #6]
  /* Init tickstart for timeout management*/
  uint32_t tickstart = HAL_GetTick();
 8001c00:	f7ff f94e 	bl	8000ea0 <HAL_GetTick>
 8001c04:	61f8      	str	r0, [r7, #28]

  if (hi2c->State == HAL_I2C_STATE_READY)
 8001c06:	68fb      	ldr	r3, [r7, #12]
 8001c08:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8001c0c:	b2db      	uxtb	r3, r3
 8001c0e:	2b20      	cmp	r3, #32
 8001c10:	f040 80ee 	bne.w	8001df0 <HAL_I2C_Slave_Receive+0x200>
  {
    if ((pData == NULL) || (Size == (uint16_t)0))
 8001c14:	68bb      	ldr	r3, [r7, #8]
 8001c16:	2b00      	cmp	r3, #0
 8001c18:	d002      	beq.n	8001c20 <HAL_I2C_Slave_Receive+0x30>
 8001c1a:	88fb      	ldrh	r3, [r7, #6]
 8001c1c:	2b00      	cmp	r3, #0
 8001c1e:	d101      	bne.n	8001c24 <HAL_I2C_Slave_Receive+0x34>
    {
      return HAL_ERROR;
 8001c20:	2301      	movs	r3, #1
 8001c22:	e0e6      	b.n	8001df2 <HAL_I2C_Slave_Receive+0x202>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 8001c24:	68fb      	ldr	r3, [r7, #12]
 8001c26:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 8001c2a:	2b01      	cmp	r3, #1
 8001c2c:	d101      	bne.n	8001c32 <HAL_I2C_Slave_Receive+0x42>
 8001c2e:	2302      	movs	r3, #2
 8001c30:	e0df      	b.n	8001df2 <HAL_I2C_Slave_Receive+0x202>
 8001c32:	68fb      	ldr	r3, [r7, #12]
 8001c34:	2201      	movs	r2, #1
 8001c36:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    /* Check if the I2C is already enabled */
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 8001c3a:	68fb      	ldr	r3, [r7, #12]
 8001c3c:	681b      	ldr	r3, [r3, #0]
 8001c3e:	681b      	ldr	r3, [r3, #0]
 8001c40:	f003 0301 	and.w	r3, r3, #1
 8001c44:	2b01      	cmp	r3, #1
 8001c46:	d007      	beq.n	8001c58 <HAL_I2C_Slave_Receive+0x68>
    {
      /* Enable I2C peripheral */
      __HAL_I2C_ENABLE(hi2c);
 8001c48:	68fb      	ldr	r3, [r7, #12]
 8001c4a:	681b      	ldr	r3, [r3, #0]
 8001c4c:	681a      	ldr	r2, [r3, #0]
 8001c4e:	68fb      	ldr	r3, [r7, #12]
 8001c50:	681b      	ldr	r3, [r3, #0]
 8001c52:	f042 0201 	orr.w	r2, r2, #1
 8001c56:	601a      	str	r2, [r3, #0]
    }

    /* Disable Pos */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 8001c58:	68fb      	ldr	r3, [r7, #12]
 8001c5a:	681b      	ldr	r3, [r3, #0]
 8001c5c:	681a      	ldr	r2, [r3, #0]
 8001c5e:	68fb      	ldr	r3, [r7, #12]
 8001c60:	681b      	ldr	r3, [r3, #0]
 8001c62:	f422 6200 	bic.w	r2, r2, #2048	@ 0x800
 8001c66:	601a      	str	r2, [r3, #0]

    hi2c->State       = HAL_I2C_STATE_BUSY_RX;
 8001c68:	68fb      	ldr	r3, [r7, #12]
 8001c6a:	2222      	movs	r2, #34	@ 0x22
 8001c6c:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
    hi2c->Mode        = HAL_I2C_MODE_SLAVE;
 8001c70:	68fb      	ldr	r3, [r7, #12]
 8001c72:	2220      	movs	r2, #32
 8001c74:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
    hi2c->ErrorCode   = HAL_I2C_ERROR_NONE;
 8001c78:	68fb      	ldr	r3, [r7, #12]
 8001c7a:	2200      	movs	r2, #0
 8001c7c:	641a      	str	r2, [r3, #64]	@ 0x40

    /* Prepare transfer parameters */
    hi2c->pBuffPtr    = pData;
 8001c7e:	68fb      	ldr	r3, [r7, #12]
 8001c80:	68ba      	ldr	r2, [r7, #8]
 8001c82:	625a      	str	r2, [r3, #36]	@ 0x24
    hi2c->XferCount   = Size;
 8001c84:	68fb      	ldr	r3, [r7, #12]
 8001c86:	88fa      	ldrh	r2, [r7, #6]
 8001c88:	855a      	strh	r2, [r3, #42]	@ 0x2a
    hi2c->XferSize    = hi2c->XferCount;
 8001c8a:	68fb      	ldr	r3, [r7, #12]
 8001c8c:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8001c8e:	b29a      	uxth	r2, r3
 8001c90:	68fb      	ldr	r3, [r7, #12]
 8001c92:	851a      	strh	r2, [r3, #40]	@ 0x28
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 8001c94:	68fb      	ldr	r3, [r7, #12]
 8001c96:	4a59      	ldr	r2, [pc, #356]	@ (8001dfc <HAL_I2C_Slave_Receive+0x20c>)
 8001c98:	62da      	str	r2, [r3, #44]	@ 0x2c

    /* Enable Address Acknowledge */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8001c9a:	68fb      	ldr	r3, [r7, #12]
 8001c9c:	681b      	ldr	r3, [r3, #0]
 8001c9e:	681a      	ldr	r2, [r3, #0]
 8001ca0:	68fb      	ldr	r3, [r7, #12]
 8001ca2:	681b      	ldr	r3, [r3, #0]
 8001ca4:	f442 6280 	orr.w	r2, r2, #1024	@ 0x400
 8001ca8:	601a      	str	r2, [r3, #0]

    /* Wait until ADDR flag is set */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, RESET, Timeout, tickstart) != HAL_OK)
 8001caa:	69fb      	ldr	r3, [r7, #28]
 8001cac:	9300      	str	r3, [sp, #0]
 8001cae:	683b      	ldr	r3, [r7, #0]
 8001cb0:	2200      	movs	r2, #0
 8001cb2:	4953      	ldr	r1, [pc, #332]	@ (8001e00 <HAL_I2C_Slave_Receive+0x210>)
 8001cb4:	68f8      	ldr	r0, [r7, #12]
 8001cb6:	f001 fd2b 	bl	8003710 <I2C_WaitOnFlagUntilTimeout>
 8001cba:	4603      	mov	r3, r0
 8001cbc:	2b00      	cmp	r3, #0
 8001cbe:	d001      	beq.n	8001cc4 <HAL_I2C_Slave_Receive+0xd4>
    {
      return HAL_ERROR;
 8001cc0:	2301      	movs	r3, #1
 8001cc2:	e096      	b.n	8001df2 <HAL_I2C_Slave_Receive+0x202>
    }

    /* Clear ADDR flag */
    __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8001cc4:	2300      	movs	r3, #0
 8001cc6:	61bb      	str	r3, [r7, #24]
 8001cc8:	68fb      	ldr	r3, [r7, #12]
 8001cca:	681b      	ldr	r3, [r3, #0]
 8001ccc:	695b      	ldr	r3, [r3, #20]
 8001cce:	61bb      	str	r3, [r7, #24]
 8001cd0:	68fb      	ldr	r3, [r7, #12]
 8001cd2:	681b      	ldr	r3, [r3, #0]
 8001cd4:	699b      	ldr	r3, [r3, #24]
 8001cd6:	61bb      	str	r3, [r7, #24]
 8001cd8:	69bb      	ldr	r3, [r7, #24]

    while (hi2c->XferSize > 0U)
 8001cda:	e04e      	b.n	8001d7a <HAL_I2C_Slave_Receive+0x18a>
    {
      /* Wait until RXNE flag is set */
      if (I2C_WaitOnRXNEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8001cdc:	69fa      	ldr	r2, [r7, #28]
 8001cde:	6839      	ldr	r1, [r7, #0]
 8001ce0:	68f8      	ldr	r0, [r7, #12]
 8001ce2:	f001 fe4d 	bl	8003980 <I2C_WaitOnRXNEFlagUntilTimeout>
 8001ce6:	4603      	mov	r3, r0
 8001ce8:	2b00      	cmp	r3, #0
 8001cea:	d009      	beq.n	8001d00 <HAL_I2C_Slave_Receive+0x110>
      {
        /* Disable Address Acknowledge */
        CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8001cec:	68fb      	ldr	r3, [r7, #12]
 8001cee:	681b      	ldr	r3, [r3, #0]
 8001cf0:	681a      	ldr	r2, [r3, #0]
 8001cf2:	68fb      	ldr	r3, [r7, #12]
 8001cf4:	681b      	ldr	r3, [r3, #0]
 8001cf6:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 8001cfa:	601a      	str	r2, [r3, #0]

        return HAL_ERROR;
 8001cfc:	2301      	movs	r3, #1
 8001cfe:	e078      	b.n	8001df2 <HAL_I2C_Slave_Receive+0x202>
      }

      /* Read data from DR */
      *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8001d00:	68fb      	ldr	r3, [r7, #12]
 8001d02:	681b      	ldr	r3, [r3, #0]
 8001d04:	691a      	ldr	r2, [r3, #16]
 8001d06:	68fb      	ldr	r3, [r7, #12]
 8001d08:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8001d0a:	b2d2      	uxtb	r2, r2
 8001d0c:	701a      	strb	r2, [r3, #0]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 8001d0e:	68fb      	ldr	r3, [r7, #12]
 8001d10:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8001d12:	1c5a      	adds	r2, r3, #1
 8001d14:	68fb      	ldr	r3, [r7, #12]
 8001d16:	625a      	str	r2, [r3, #36]	@ 0x24

      /* Update counter */
      hi2c->XferSize--;
 8001d18:	68fb      	ldr	r3, [r7, #12]
 8001d1a:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8001d1c:	3b01      	subs	r3, #1
 8001d1e:	b29a      	uxth	r2, r3
 8001d20:	68fb      	ldr	r3, [r7, #12]
 8001d22:	851a      	strh	r2, [r3, #40]	@ 0x28
      hi2c->XferCount--;
 8001d24:	68fb      	ldr	r3, [r7, #12]
 8001d26:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8001d28:	b29b      	uxth	r3, r3
 8001d2a:	3b01      	subs	r3, #1
 8001d2c:	b29a      	uxth	r2, r3
 8001d2e:	68fb      	ldr	r3, [r7, #12]
 8001d30:	855a      	strh	r2, [r3, #42]	@ 0x2a

      if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == SET) && (hi2c->XferSize != 0U))
 8001d32:	68fb      	ldr	r3, [r7, #12]
 8001d34:	681b      	ldr	r3, [r3, #0]
 8001d36:	695b      	ldr	r3, [r3, #20]
 8001d38:	f003 0304 	and.w	r3, r3, #4
 8001d3c:	2b04      	cmp	r3, #4
 8001d3e:	d11c      	bne.n	8001d7a <HAL_I2C_Slave_Receive+0x18a>
 8001d40:	68fb      	ldr	r3, [r7, #12]
 8001d42:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8001d44:	2b00      	cmp	r3, #0
 8001d46:	d018      	beq.n	8001d7a <HAL_I2C_Slave_Receive+0x18a>
      {
        /* Read data from DR */
        *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8001d48:	68fb      	ldr	r3, [r7, #12]
 8001d4a:	681b      	ldr	r3, [r3, #0]
 8001d4c:	691a      	ldr	r2, [r3, #16]
 8001d4e:	68fb      	ldr	r3, [r7, #12]
 8001d50:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8001d52:	b2d2      	uxtb	r2, r2
 8001d54:	701a      	strb	r2, [r3, #0]

        /* Increment Buffer pointer */
        hi2c->pBuffPtr++;
 8001d56:	68fb      	ldr	r3, [r7, #12]
 8001d58:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8001d5a:	1c5a      	adds	r2, r3, #1
 8001d5c:	68fb      	ldr	r3, [r7, #12]
 8001d5e:	625a      	str	r2, [r3, #36]	@ 0x24

        /* Update counter */
        hi2c->XferSize--;
 8001d60:	68fb      	ldr	r3, [r7, #12]
 8001d62:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8001d64:	3b01      	subs	r3, #1
 8001d66:	b29a      	uxth	r2, r3
 8001d68:	68fb      	ldr	r3, [r7, #12]
 8001d6a:	851a      	strh	r2, [r3, #40]	@ 0x28
        hi2c->XferCount--;
 8001d6c:	68fb      	ldr	r3, [r7, #12]
 8001d6e:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8001d70:	b29b      	uxth	r3, r3
 8001d72:	3b01      	subs	r3, #1
 8001d74:	b29a      	uxth	r2, r3
 8001d76:	68fb      	ldr	r3, [r7, #12]
 8001d78:	855a      	strh	r2, [r3, #42]	@ 0x2a
    while (hi2c->XferSize > 0U)
 8001d7a:	68fb      	ldr	r3, [r7, #12]
 8001d7c:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8001d7e:	2b00      	cmp	r3, #0
 8001d80:	d1ac      	bne.n	8001cdc <HAL_I2C_Slave_Receive+0xec>
      }
    }

    /* Wait until STOP flag is set */
    if (I2C_WaitOnSTOPFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8001d82:	69fa      	ldr	r2, [r7, #28]
 8001d84:	6839      	ldr	r1, [r7, #0]
 8001d86:	68f8      	ldr	r0, [r7, #12]
 8001d88:	f001 fd84 	bl	8003894 <I2C_WaitOnSTOPFlagUntilTimeout>
 8001d8c:	4603      	mov	r3, r0
 8001d8e:	2b00      	cmp	r3, #0
 8001d90:	d009      	beq.n	8001da6 <HAL_I2C_Slave_Receive+0x1b6>
    {
      /* Disable Address Acknowledge */
      CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8001d92:	68fb      	ldr	r3, [r7, #12]
 8001d94:	681b      	ldr	r3, [r3, #0]
 8001d96:	681a      	ldr	r2, [r3, #0]
 8001d98:	68fb      	ldr	r3, [r7, #12]
 8001d9a:	681b      	ldr	r3, [r3, #0]
 8001d9c:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 8001da0:	601a      	str	r2, [r3, #0]

      return HAL_ERROR;
 8001da2:	2301      	movs	r3, #1
 8001da4:	e025      	b.n	8001df2 <HAL_I2C_Slave_Receive+0x202>
    }

    /* Clear STOP flag */
    __HAL_I2C_CLEAR_STOPFLAG(hi2c);
 8001da6:	2300      	movs	r3, #0
 8001da8:	617b      	str	r3, [r7, #20]
 8001daa:	68fb      	ldr	r3, [r7, #12]
 8001dac:	681b      	ldr	r3, [r3, #0]
 8001dae:	695b      	ldr	r3, [r3, #20]
 8001db0:	617b      	str	r3, [r7, #20]
 8001db2:	68fb      	ldr	r3, [r7, #12]
 8001db4:	681b      	ldr	r3, [r3, #0]
 8001db6:	681a      	ldr	r2, [r3, #0]
 8001db8:	68fb      	ldr	r3, [r7, #12]
 8001dba:	681b      	ldr	r3, [r3, #0]
 8001dbc:	f042 0201 	orr.w	r2, r2, #1
 8001dc0:	601a      	str	r2, [r3, #0]
 8001dc2:	697b      	ldr	r3, [r7, #20]

    /* Disable Address Acknowledge */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8001dc4:	68fb      	ldr	r3, [r7, #12]
 8001dc6:	681b      	ldr	r3, [r3, #0]
 8001dc8:	681a      	ldr	r2, [r3, #0]
 8001dca:	68fb      	ldr	r3, [r7, #12]
 8001dcc:	681b      	ldr	r3, [r3, #0]
 8001dce:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 8001dd2:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 8001dd4:	68fb      	ldr	r3, [r7, #12]
 8001dd6:	2220      	movs	r2, #32
 8001dd8:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
    hi2c->Mode = HAL_I2C_MODE_NONE;
 8001ddc:	68fb      	ldr	r3, [r7, #12]
 8001dde:	2200      	movs	r2, #0
 8001de0:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8001de4:	68fb      	ldr	r3, [r7, #12]
 8001de6:	2200      	movs	r2, #0
 8001de8:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    return HAL_OK;
 8001dec:	2300      	movs	r3, #0
 8001dee:	e000      	b.n	8001df2 <HAL_I2C_Slave_Receive+0x202>
  }
  else
  {
    return HAL_BUSY;
 8001df0:	2302      	movs	r3, #2
  }
}
 8001df2:	4618      	mov	r0, r3
 8001df4:	3720      	adds	r7, #32
 8001df6:	46bd      	mov	sp, r7
 8001df8:	bd80      	pop	{r7, pc}
 8001dfa:	bf00      	nop
 8001dfc:	ffff0000 	.word	0xffff0000
 8001e00:	00010002 	.word	0x00010002

08001e04 <HAL_I2C_EV_IRQHandler>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
void HAL_I2C_EV_IRQHandler(I2C_HandleTypeDef *hi2c)
{
 8001e04:	b580      	push	{r7, lr}
 8001e06:	b088      	sub	sp, #32
 8001e08:	af00      	add	r7, sp, #0
 8001e0a:	6078      	str	r0, [r7, #4]
  uint32_t sr1itflags;
  uint32_t sr2itflags               = 0U;
 8001e0c:	2300      	movs	r3, #0
 8001e0e:	61bb      	str	r3, [r7, #24]
  uint32_t itsources                = READ_REG(hi2c->Instance->CR2);
 8001e10:	687b      	ldr	r3, [r7, #4]
 8001e12:	681b      	ldr	r3, [r3, #0]
 8001e14:	685b      	ldr	r3, [r3, #4]
 8001e16:	617b      	str	r3, [r7, #20]
  uint32_t CurrentXferOptions       = hi2c->XferOptions;
 8001e18:	687b      	ldr	r3, [r7, #4]
 8001e1a:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8001e1c:	613b      	str	r3, [r7, #16]
  HAL_I2C_ModeTypeDef CurrentMode   = hi2c->Mode;
 8001e1e:	687b      	ldr	r3, [r7, #4]
 8001e20:	f893 303e 	ldrb.w	r3, [r3, #62]	@ 0x3e
 8001e24:	73fb      	strb	r3, [r7, #15]
  HAL_I2C_StateTypeDef CurrentState = hi2c->State;
 8001e26:	687b      	ldr	r3, [r7, #4]
 8001e28:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8001e2c:	73bb      	strb	r3, [r7, #14]

  /* Master or Memory mode selected */
  if ((CurrentMode == HAL_I2C_MODE_MASTER) || (CurrentMode == HAL_I2C_MODE_MEM))
 8001e2e:	7bfb      	ldrb	r3, [r7, #15]
 8001e30:	2b10      	cmp	r3, #16
 8001e32:	d003      	beq.n	8001e3c <HAL_I2C_EV_IRQHandler+0x38>
 8001e34:	7bfb      	ldrb	r3, [r7, #15]
 8001e36:	2b40      	cmp	r3, #64	@ 0x40
 8001e38:	f040 80b1 	bne.w	8001f9e <HAL_I2C_EV_IRQHandler+0x19a>
  {
    sr2itflags   = READ_REG(hi2c->Instance->SR2);
 8001e3c:	687b      	ldr	r3, [r7, #4]
 8001e3e:	681b      	ldr	r3, [r3, #0]
 8001e40:	699b      	ldr	r3, [r3, #24]
 8001e42:	61bb      	str	r3, [r7, #24]
    sr1itflags   = READ_REG(hi2c->Instance->SR1);
 8001e44:	687b      	ldr	r3, [r7, #4]
 8001e46:	681b      	ldr	r3, [r3, #0]
 8001e48:	695b      	ldr	r3, [r3, #20]
 8001e4a:	61fb      	str	r3, [r7, #28]

    /* Exit IRQ event until Start Bit detected in case of Other frame requested */
    if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_SB) == RESET) && (IS_I2C_TRANSFER_OTHER_OPTIONS_REQUEST(CurrentXferOptions) == 1U))
 8001e4c:	69fb      	ldr	r3, [r7, #28]
 8001e4e:	f003 0301 	and.w	r3, r3, #1
 8001e52:	2b00      	cmp	r3, #0
 8001e54:	d10d      	bne.n	8001e72 <HAL_I2C_EV_IRQHandler+0x6e>
 8001e56:	693b      	ldr	r3, [r7, #16]
 8001e58:	f5b3 0f2a 	cmp.w	r3, #11141120	@ 0xaa0000
 8001e5c:	d003      	beq.n	8001e66 <HAL_I2C_EV_IRQHandler+0x62>
 8001e5e:	693b      	ldr	r3, [r7, #16]
 8001e60:	f1b3 4f2a 	cmp.w	r3, #2852126720	@ 0xaa000000
 8001e64:	d101      	bne.n	8001e6a <HAL_I2C_EV_IRQHandler+0x66>
 8001e66:	2301      	movs	r3, #1
 8001e68:	e000      	b.n	8001e6c <HAL_I2C_EV_IRQHandler+0x68>
 8001e6a:	2300      	movs	r3, #0
 8001e6c:	2b01      	cmp	r3, #1
 8001e6e:	f000 8114 	beq.w	800209a <HAL_I2C_EV_IRQHandler+0x296>
    {
      return;
    }

    /* SB Set ----------------------------------------------------------------*/
    if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_SB) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 8001e72:	69fb      	ldr	r3, [r7, #28]
 8001e74:	f003 0301 	and.w	r3, r3, #1
 8001e78:	2b00      	cmp	r3, #0
 8001e7a:	d00b      	beq.n	8001e94 <HAL_I2C_EV_IRQHandler+0x90>
 8001e7c:	697b      	ldr	r3, [r7, #20]
 8001e7e:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 8001e82:	2b00      	cmp	r3, #0
 8001e84:	d006      	beq.n	8001e94 <HAL_I2C_EV_IRQHandler+0x90>
    {
      /* Convert OTHER_xxx XferOptions if any */
      I2C_ConvertOtherXferOptions(hi2c);
 8001e86:	6878      	ldr	r0, [r7, #4]
 8001e88:	f001 fe06 	bl	8003a98 <I2C_ConvertOtherXferOptions>

      I2C_Master_SB(hi2c);
 8001e8c:	6878      	ldr	r0, [r7, #4]
 8001e8e:	f000 fd7a 	bl	8002986 <I2C_Master_SB>
 8001e92:	e083      	b.n	8001f9c <HAL_I2C_EV_IRQHandler+0x198>
    }
    /* ADD10 Set -------------------------------------------------------------*/
    else if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_ADD10) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 8001e94:	69fb      	ldr	r3, [r7, #28]
 8001e96:	f003 0308 	and.w	r3, r3, #8
 8001e9a:	2b00      	cmp	r3, #0
 8001e9c:	d008      	beq.n	8001eb0 <HAL_I2C_EV_IRQHandler+0xac>
 8001e9e:	697b      	ldr	r3, [r7, #20]
 8001ea0:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 8001ea4:	2b00      	cmp	r3, #0
 8001ea6:	d003      	beq.n	8001eb0 <HAL_I2C_EV_IRQHandler+0xac>
    {
      I2C_Master_ADD10(hi2c);
 8001ea8:	6878      	ldr	r0, [r7, #4]
 8001eaa:	f000 fdf2 	bl	8002a92 <I2C_Master_ADD10>
 8001eae:	e075      	b.n	8001f9c <HAL_I2C_EV_IRQHandler+0x198>
    }
    /* ADDR Set --------------------------------------------------------------*/
    else if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_ADDR) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 8001eb0:	69fb      	ldr	r3, [r7, #28]
 8001eb2:	f003 0302 	and.w	r3, r3, #2
 8001eb6:	2b00      	cmp	r3, #0
 8001eb8:	d008      	beq.n	8001ecc <HAL_I2C_EV_IRQHandler+0xc8>
 8001eba:	697b      	ldr	r3, [r7, #20]
 8001ebc:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 8001ec0:	2b00      	cmp	r3, #0
 8001ec2:	d003      	beq.n	8001ecc <HAL_I2C_EV_IRQHandler+0xc8>
    {
      I2C_Master_ADDR(hi2c);
 8001ec4:	6878      	ldr	r0, [r7, #4]
 8001ec6:	f000 fe0e 	bl	8002ae6 <I2C_Master_ADDR>
 8001eca:	e067      	b.n	8001f9c <HAL_I2C_EV_IRQHandler+0x198>
    }
    /* I2C in mode Transmitter -----------------------------------------------*/
    else if (I2C_CHECK_FLAG(sr2itflags, I2C_FLAG_TRA) != RESET)
 8001ecc:	69bb      	ldr	r3, [r7, #24]
 8001ece:	f003 0304 	and.w	r3, r3, #4
 8001ed2:	2b00      	cmp	r3, #0
 8001ed4:	d036      	beq.n	8001f44 <HAL_I2C_EV_IRQHandler+0x140>
    {
      /* Do not check buffer and BTF flag if a Xfer DMA is on going */
      if (READ_BIT(hi2c->Instance->CR2, I2C_CR2_DMAEN) != I2C_CR2_DMAEN)
 8001ed6:	687b      	ldr	r3, [r7, #4]
 8001ed8:	681b      	ldr	r3, [r3, #0]
 8001eda:	685b      	ldr	r3, [r3, #4]
 8001edc:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 8001ee0:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 8001ee4:	f000 80db 	beq.w	800209e <HAL_I2C_EV_IRQHandler+0x29a>
      {
        /* TXE set and BTF reset -----------------------------------------------*/
        if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_TXE) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_BUF) != RESET) && (I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_BTF) == RESET))
 8001ee8:	69fb      	ldr	r3, [r7, #28]
 8001eea:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8001eee:	2b00      	cmp	r3, #0
 8001ef0:	d00d      	beq.n	8001f0e <HAL_I2C_EV_IRQHandler+0x10a>
 8001ef2:	697b      	ldr	r3, [r7, #20]
 8001ef4:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8001ef8:	2b00      	cmp	r3, #0
 8001efa:	d008      	beq.n	8001f0e <HAL_I2C_EV_IRQHandler+0x10a>
 8001efc:	69fb      	ldr	r3, [r7, #28]
 8001efe:	f003 0304 	and.w	r3, r3, #4
 8001f02:	2b00      	cmp	r3, #0
 8001f04:	d103      	bne.n	8001f0e <HAL_I2C_EV_IRQHandler+0x10a>
        {
          I2C_MasterTransmit_TXE(hi2c);
 8001f06:	6878      	ldr	r0, [r7, #4]
 8001f08:	f000 f9d6 	bl	80022b8 <I2C_MasterTransmit_TXE>
 8001f0c:	e046      	b.n	8001f9c <HAL_I2C_EV_IRQHandler+0x198>
        }
        /* BTF set -------------------------------------------------------------*/
        else if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_BTF) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 8001f0e:	69fb      	ldr	r3, [r7, #28]
 8001f10:	f003 0304 	and.w	r3, r3, #4
 8001f14:	2b00      	cmp	r3, #0
 8001f16:	f000 80c2 	beq.w	800209e <HAL_I2C_EV_IRQHandler+0x29a>
 8001f1a:	697b      	ldr	r3, [r7, #20]
 8001f1c:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 8001f20:	2b00      	cmp	r3, #0
 8001f22:	f000 80bc 	beq.w	800209e <HAL_I2C_EV_IRQHandler+0x29a>
        {
          if (CurrentState == HAL_I2C_STATE_BUSY_TX)
 8001f26:	7bbb      	ldrb	r3, [r7, #14]
 8001f28:	2b21      	cmp	r3, #33	@ 0x21
 8001f2a:	d103      	bne.n	8001f34 <HAL_I2C_EV_IRQHandler+0x130>
          {
            I2C_MasterTransmit_BTF(hi2c);
 8001f2c:	6878      	ldr	r0, [r7, #4]
 8001f2e:	f000 fa5f 	bl	80023f0 <I2C_MasterTransmit_BTF>
    if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_SB) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 8001f32:	e0b4      	b.n	800209e <HAL_I2C_EV_IRQHandler+0x29a>
          }
          else /* HAL_I2C_MODE_MEM */
          {
            if (CurrentMode == HAL_I2C_MODE_MEM)
 8001f34:	7bfb      	ldrb	r3, [r7, #15]
 8001f36:	2b40      	cmp	r3, #64	@ 0x40
 8001f38:	f040 80b1 	bne.w	800209e <HAL_I2C_EV_IRQHandler+0x29a>
            {
              I2C_MemoryTransmit_TXE_BTF(hi2c);
 8001f3c:	6878      	ldr	r0, [r7, #4]
 8001f3e:	f000 facd 	bl	80024dc <I2C_MemoryTransmit_TXE_BTF>
    if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_SB) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 8001f42:	e0ac      	b.n	800209e <HAL_I2C_EV_IRQHandler+0x29a>
    }
    /* I2C in mode Receiver --------------------------------------------------*/
    else
    {
      /* Do not check buffer and BTF flag if a Xfer DMA is on going */
      if (READ_BIT(hi2c->Instance->CR2, I2C_CR2_DMAEN) != I2C_CR2_DMAEN)
 8001f44:	687b      	ldr	r3, [r7, #4]
 8001f46:	681b      	ldr	r3, [r3, #0]
 8001f48:	685b      	ldr	r3, [r3, #4]
 8001f4a:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 8001f4e:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 8001f52:	f000 80a4 	beq.w	800209e <HAL_I2C_EV_IRQHandler+0x29a>
      {
        /* RXNE set and BTF reset -----------------------------------------------*/
        if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_RXNE) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_BUF) != RESET) && (I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_BTF) == RESET))
 8001f56:	69fb      	ldr	r3, [r7, #28]
 8001f58:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8001f5c:	2b00      	cmp	r3, #0
 8001f5e:	d00d      	beq.n	8001f7c <HAL_I2C_EV_IRQHandler+0x178>
 8001f60:	697b      	ldr	r3, [r7, #20]
 8001f62:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8001f66:	2b00      	cmp	r3, #0
 8001f68:	d008      	beq.n	8001f7c <HAL_I2C_EV_IRQHandler+0x178>
 8001f6a:	69fb      	ldr	r3, [r7, #28]
 8001f6c:	f003 0304 	and.w	r3, r3, #4
 8001f70:	2b00      	cmp	r3, #0
 8001f72:	d103      	bne.n	8001f7c <HAL_I2C_EV_IRQHandler+0x178>
        {
          I2C_MasterReceive_RXNE(hi2c);
 8001f74:	6878      	ldr	r0, [r7, #4]
 8001f76:	f000 fb49 	bl	800260c <I2C_MasterReceive_RXNE>
 8001f7a:	e00f      	b.n	8001f9c <HAL_I2C_EV_IRQHandler+0x198>
        }
        /* BTF set -------------------------------------------------------------*/
        else if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_BTF) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 8001f7c:	69fb      	ldr	r3, [r7, #28]
 8001f7e:	f003 0304 	and.w	r3, r3, #4
 8001f82:	2b00      	cmp	r3, #0
 8001f84:	f000 808b 	beq.w	800209e <HAL_I2C_EV_IRQHandler+0x29a>
 8001f88:	697b      	ldr	r3, [r7, #20]
 8001f8a:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 8001f8e:	2b00      	cmp	r3, #0
 8001f90:	f000 8085 	beq.w	800209e <HAL_I2C_EV_IRQHandler+0x29a>
        {
          I2C_MasterReceive_BTF(hi2c);
 8001f94:	6878      	ldr	r0, [r7, #4]
 8001f96:	f000 fc01 	bl	800279c <I2C_MasterReceive_BTF>
    if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_SB) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 8001f9a:	e080      	b.n	800209e <HAL_I2C_EV_IRQHandler+0x29a>
 8001f9c:	e07f      	b.n	800209e <HAL_I2C_EV_IRQHandler+0x29a>
  /* Slave mode selected */
  else
  {
    /* If an error is detected, read only SR1 register to prevent */
    /* a clear of ADDR flags by reading SR2 after reading SR1 in Error treatment */
    if (hi2c->ErrorCode != HAL_I2C_ERROR_NONE)
 8001f9e:	687b      	ldr	r3, [r7, #4]
 8001fa0:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001fa2:	2b00      	cmp	r3, #0
 8001fa4:	d004      	beq.n	8001fb0 <HAL_I2C_EV_IRQHandler+0x1ac>
    {
      sr1itflags   = READ_REG(hi2c->Instance->SR1);
 8001fa6:	687b      	ldr	r3, [r7, #4]
 8001fa8:	681b      	ldr	r3, [r3, #0]
 8001faa:	695b      	ldr	r3, [r3, #20]
 8001fac:	61fb      	str	r3, [r7, #28]
 8001fae:	e007      	b.n	8001fc0 <HAL_I2C_EV_IRQHandler+0x1bc>
    }
    else
    {
      sr2itflags   = READ_REG(hi2c->Instance->SR2);
 8001fb0:	687b      	ldr	r3, [r7, #4]
 8001fb2:	681b      	ldr	r3, [r3, #0]
 8001fb4:	699b      	ldr	r3, [r3, #24]
 8001fb6:	61bb      	str	r3, [r7, #24]
      sr1itflags   = READ_REG(hi2c->Instance->SR1);
 8001fb8:	687b      	ldr	r3, [r7, #4]
 8001fba:	681b      	ldr	r3, [r3, #0]
 8001fbc:	695b      	ldr	r3, [r3, #20]
 8001fbe:	61fb      	str	r3, [r7, #28]
    }

    /* ADDR set --------------------------------------------------------------*/
    if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_ADDR) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 8001fc0:	69fb      	ldr	r3, [r7, #28]
 8001fc2:	f003 0302 	and.w	r3, r3, #2
 8001fc6:	2b00      	cmp	r3, #0
 8001fc8:	d011      	beq.n	8001fee <HAL_I2C_EV_IRQHandler+0x1ea>
 8001fca:	697b      	ldr	r3, [r7, #20]
 8001fcc:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 8001fd0:	2b00      	cmp	r3, #0
 8001fd2:	d00c      	beq.n	8001fee <HAL_I2C_EV_IRQHandler+0x1ea>
    {
      /* Now time to read SR2, this will clear ADDR flag automatically */
      if (hi2c->ErrorCode != HAL_I2C_ERROR_NONE)
 8001fd4:	687b      	ldr	r3, [r7, #4]
 8001fd6:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001fd8:	2b00      	cmp	r3, #0
 8001fda:	d003      	beq.n	8001fe4 <HAL_I2C_EV_IRQHandler+0x1e0>
      {
        sr2itflags   = READ_REG(hi2c->Instance->SR2);
 8001fdc:	687b      	ldr	r3, [r7, #4]
 8001fde:	681b      	ldr	r3, [r3, #0]
 8001fe0:	699b      	ldr	r3, [r3, #24]
 8001fe2:	61bb      	str	r3, [r7, #24]
      }
      I2C_Slave_ADDR(hi2c, sr2itflags);
 8001fe4:	69b9      	ldr	r1, [r7, #24]
 8001fe6:	6878      	ldr	r0, [r7, #4]
 8001fe8:	f000 ffcc 	bl	8002f84 <I2C_Slave_ADDR>
 8001fec:	e05a      	b.n	80020a4 <HAL_I2C_EV_IRQHandler+0x2a0>
    }
    /* STOPF set --------------------------------------------------------------*/
    else if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_STOPF) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 8001fee:	69fb      	ldr	r3, [r7, #28]
 8001ff0:	f003 0310 	and.w	r3, r3, #16
 8001ff4:	2b00      	cmp	r3, #0
 8001ff6:	d008      	beq.n	800200a <HAL_I2C_EV_IRQHandler+0x206>
 8001ff8:	697b      	ldr	r3, [r7, #20]
 8001ffa:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 8001ffe:	2b00      	cmp	r3, #0
 8002000:	d003      	beq.n	800200a <HAL_I2C_EV_IRQHandler+0x206>
    {
      I2C_Slave_STOPF(hi2c);
 8002002:	6878      	ldr	r0, [r7, #4]
 8002004:	f001 f806 	bl	8003014 <I2C_Slave_STOPF>
 8002008:	e04c      	b.n	80020a4 <HAL_I2C_EV_IRQHandler+0x2a0>
    }
    /* I2C in mode Transmitter -----------------------------------------------*/
    else if ((CurrentState == HAL_I2C_STATE_BUSY_TX) || (CurrentState == HAL_I2C_STATE_BUSY_TX_LISTEN))
 800200a:	7bbb      	ldrb	r3, [r7, #14]
 800200c:	2b21      	cmp	r3, #33	@ 0x21
 800200e:	d002      	beq.n	8002016 <HAL_I2C_EV_IRQHandler+0x212>
 8002010:	7bbb      	ldrb	r3, [r7, #14]
 8002012:	2b29      	cmp	r3, #41	@ 0x29
 8002014:	d120      	bne.n	8002058 <HAL_I2C_EV_IRQHandler+0x254>
    {
      /* TXE set and BTF reset -----------------------------------------------*/
      if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_TXE) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_BUF) != RESET) && (I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_BTF) == RESET))
 8002016:	69fb      	ldr	r3, [r7, #28]
 8002018:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800201c:	2b00      	cmp	r3, #0
 800201e:	d00d      	beq.n	800203c <HAL_I2C_EV_IRQHandler+0x238>
 8002020:	697b      	ldr	r3, [r7, #20]
 8002022:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8002026:	2b00      	cmp	r3, #0
 8002028:	d008      	beq.n	800203c <HAL_I2C_EV_IRQHandler+0x238>
 800202a:	69fb      	ldr	r3, [r7, #28]
 800202c:	f003 0304 	and.w	r3, r3, #4
 8002030:	2b00      	cmp	r3, #0
 8002032:	d103      	bne.n	800203c <HAL_I2C_EV_IRQHandler+0x238>
      {
        I2C_SlaveTransmit_TXE(hi2c);
 8002034:	6878      	ldr	r0, [r7, #4]
 8002036:	f000 fee7 	bl	8002e08 <I2C_SlaveTransmit_TXE>
      if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_TXE) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_BUF) != RESET) && (I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_BTF) == RESET))
 800203a:	e032      	b.n	80020a2 <HAL_I2C_EV_IRQHandler+0x29e>
      }
      /* BTF set -------------------------------------------------------------*/
      else if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_BTF) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 800203c:	69fb      	ldr	r3, [r7, #28]
 800203e:	f003 0304 	and.w	r3, r3, #4
 8002042:	2b00      	cmp	r3, #0
 8002044:	d02d      	beq.n	80020a2 <HAL_I2C_EV_IRQHandler+0x29e>
 8002046:	697b      	ldr	r3, [r7, #20]
 8002048:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 800204c:	2b00      	cmp	r3, #0
 800204e:	d028      	beq.n	80020a2 <HAL_I2C_EV_IRQHandler+0x29e>
      {
        I2C_SlaveTransmit_BTF(hi2c);
 8002050:	6878      	ldr	r0, [r7, #4]
 8002052:	f000 ff16 	bl	8002e82 <I2C_SlaveTransmit_BTF>
      if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_TXE) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_BUF) != RESET) && (I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_BTF) == RESET))
 8002056:	e024      	b.n	80020a2 <HAL_I2C_EV_IRQHandler+0x29e>
    }
    /* I2C in mode Receiver --------------------------------------------------*/
    else
    {
      /* RXNE set and BTF reset ----------------------------------------------*/
      if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_RXNE) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_BUF) != RESET) && (I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_BTF) == RESET))
 8002058:	69fb      	ldr	r3, [r7, #28]
 800205a:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800205e:	2b00      	cmp	r3, #0
 8002060:	d00d      	beq.n	800207e <HAL_I2C_EV_IRQHandler+0x27a>
 8002062:	697b      	ldr	r3, [r7, #20]
 8002064:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8002068:	2b00      	cmp	r3, #0
 800206a:	d008      	beq.n	800207e <HAL_I2C_EV_IRQHandler+0x27a>
 800206c:	69fb      	ldr	r3, [r7, #28]
 800206e:	f003 0304 	and.w	r3, r3, #4
 8002072:	2b00      	cmp	r3, #0
 8002074:	d103      	bne.n	800207e <HAL_I2C_EV_IRQHandler+0x27a>
      {
        I2C_SlaveReceive_RXNE(hi2c);
 8002076:	6878      	ldr	r0, [r7, #4]
 8002078:	f000 ff24 	bl	8002ec4 <I2C_SlaveReceive_RXNE>
 800207c:	e012      	b.n	80020a4 <HAL_I2C_EV_IRQHandler+0x2a0>
      }
      /* BTF set -------------------------------------------------------------*/
      else if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_BTF) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 800207e:	69fb      	ldr	r3, [r7, #28]
 8002080:	f003 0304 	and.w	r3, r3, #4
 8002084:	2b00      	cmp	r3, #0
 8002086:	d00d      	beq.n	80020a4 <HAL_I2C_EV_IRQHandler+0x2a0>
 8002088:	697b      	ldr	r3, [r7, #20]
 800208a:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 800208e:	2b00      	cmp	r3, #0
 8002090:	d008      	beq.n	80020a4 <HAL_I2C_EV_IRQHandler+0x2a0>
      {
        I2C_SlaveReceive_BTF(hi2c);
 8002092:	6878      	ldr	r0, [r7, #4]
 8002094:	f000 ff54 	bl	8002f40 <I2C_SlaveReceive_BTF>
 8002098:	e004      	b.n	80020a4 <HAL_I2C_EV_IRQHandler+0x2a0>
      return;
 800209a:	bf00      	nop
 800209c:	e002      	b.n	80020a4 <HAL_I2C_EV_IRQHandler+0x2a0>
    if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_SB) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 800209e:	bf00      	nop
 80020a0:	e000      	b.n	80020a4 <HAL_I2C_EV_IRQHandler+0x2a0>
      if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_TXE) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_BUF) != RESET) && (I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_BTF) == RESET))
 80020a2:	bf00      	nop
      {
        /* Do nothing */
      }
    }
  }
}
 80020a4:	3720      	adds	r7, #32
 80020a6:	46bd      	mov	sp, r7
 80020a8:	bd80      	pop	{r7, pc}

080020aa <HAL_I2C_ER_IRQHandler>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
void HAL_I2C_ER_IRQHandler(I2C_HandleTypeDef *hi2c)
{
 80020aa:	b580      	push	{r7, lr}
 80020ac:	b08a      	sub	sp, #40	@ 0x28
 80020ae:	af00      	add	r7, sp, #0
 80020b0:	6078      	str	r0, [r7, #4]
  HAL_I2C_ModeTypeDef tmp1;
  uint32_t tmp2;
  HAL_I2C_StateTypeDef tmp3;
  uint32_t tmp4;
  uint32_t sr1itflags = READ_REG(hi2c->Instance->SR1);
 80020b2:	687b      	ldr	r3, [r7, #4]
 80020b4:	681b      	ldr	r3, [r3, #0]
 80020b6:	695b      	ldr	r3, [r3, #20]
 80020b8:	623b      	str	r3, [r7, #32]
  uint32_t itsources  = READ_REG(hi2c->Instance->CR2);
 80020ba:	687b      	ldr	r3, [r7, #4]
 80020bc:	681b      	ldr	r3, [r3, #0]
 80020be:	685b      	ldr	r3, [r3, #4]
 80020c0:	61fb      	str	r3, [r7, #28]
  uint32_t error      = HAL_I2C_ERROR_NONE;
 80020c2:	2300      	movs	r3, #0
 80020c4:	627b      	str	r3, [r7, #36]	@ 0x24
  HAL_I2C_ModeTypeDef CurrentMode   = hi2c->Mode;
 80020c6:	687b      	ldr	r3, [r7, #4]
 80020c8:	f893 303e 	ldrb.w	r3, [r3, #62]	@ 0x3e
 80020cc:	76fb      	strb	r3, [r7, #27]

  /* I2C Bus error interrupt occurred ----------------------------------------*/
  if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_BERR) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_ERR) != RESET))
 80020ce:	6a3b      	ldr	r3, [r7, #32]
 80020d0:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80020d4:	2b00      	cmp	r3, #0
 80020d6:	d00d      	beq.n	80020f4 <HAL_I2C_ER_IRQHandler+0x4a>
 80020d8:	69fb      	ldr	r3, [r7, #28]
 80020da:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80020de:	2b00      	cmp	r3, #0
 80020e0:	d008      	beq.n	80020f4 <HAL_I2C_ER_IRQHandler+0x4a>
  {
    error |= HAL_I2C_ERROR_BERR;
 80020e2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80020e4:	f043 0301 	orr.w	r3, r3, #1
 80020e8:	627b      	str	r3, [r7, #36]	@ 0x24

    /* Clear BERR flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_BERR);
 80020ea:	687b      	ldr	r3, [r7, #4]
 80020ec:	681b      	ldr	r3, [r3, #0]
 80020ee:	f46f 7280 	mvn.w	r2, #256	@ 0x100
 80020f2:	615a      	str	r2, [r3, #20]
  }

  /* I2C Arbitration Lost error interrupt occurred ---------------------------*/
  if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_ARLO) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_ERR) != RESET))
 80020f4:	6a3b      	ldr	r3, [r7, #32]
 80020f6:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 80020fa:	2b00      	cmp	r3, #0
 80020fc:	d00d      	beq.n	800211a <HAL_I2C_ER_IRQHandler+0x70>
 80020fe:	69fb      	ldr	r3, [r7, #28]
 8002100:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8002104:	2b00      	cmp	r3, #0
 8002106:	d008      	beq.n	800211a <HAL_I2C_ER_IRQHandler+0x70>
  {
    error |= HAL_I2C_ERROR_ARLO;
 8002108:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800210a:	f043 0302 	orr.w	r3, r3, #2
 800210e:	627b      	str	r3, [r7, #36]	@ 0x24

    /* Clear ARLO flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_ARLO);
 8002110:	687b      	ldr	r3, [r7, #4]
 8002112:	681b      	ldr	r3, [r3, #0]
 8002114:	f46f 7200 	mvn.w	r2, #512	@ 0x200
 8002118:	615a      	str	r2, [r3, #20]
  }

  /* I2C Acknowledge failure error interrupt occurred ------------------------*/
  if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_AF) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_ERR) != RESET))
 800211a:	6a3b      	ldr	r3, [r7, #32]
 800211c:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8002120:	2b00      	cmp	r3, #0
 8002122:	d03e      	beq.n	80021a2 <HAL_I2C_ER_IRQHandler+0xf8>
 8002124:	69fb      	ldr	r3, [r7, #28]
 8002126:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800212a:	2b00      	cmp	r3, #0
 800212c:	d039      	beq.n	80021a2 <HAL_I2C_ER_IRQHandler+0xf8>
  {
    tmp1 = CurrentMode;
 800212e:	7efb      	ldrb	r3, [r7, #27]
 8002130:	76bb      	strb	r3, [r7, #26]
    tmp2 = hi2c->XferCount;
 8002132:	687b      	ldr	r3, [r7, #4]
 8002134:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8002136:	b29b      	uxth	r3, r3
 8002138:	617b      	str	r3, [r7, #20]
    tmp3 = hi2c->State;
 800213a:	687b      	ldr	r3, [r7, #4]
 800213c:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8002140:	74fb      	strb	r3, [r7, #19]
    tmp4 = hi2c->PreviousState;
 8002142:	687b      	ldr	r3, [r7, #4]
 8002144:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002146:	60fb      	str	r3, [r7, #12]
    if ((tmp1 == HAL_I2C_MODE_SLAVE) && (tmp2 == 0U) && \
 8002148:	7ebb      	ldrb	r3, [r7, #26]
 800214a:	2b20      	cmp	r3, #32
 800214c:	d112      	bne.n	8002174 <HAL_I2C_ER_IRQHandler+0xca>
 800214e:	697b      	ldr	r3, [r7, #20]
 8002150:	2b00      	cmp	r3, #0
 8002152:	d10f      	bne.n	8002174 <HAL_I2C_ER_IRQHandler+0xca>
 8002154:	7cfb      	ldrb	r3, [r7, #19]
 8002156:	2b21      	cmp	r3, #33	@ 0x21
 8002158:	d008      	beq.n	800216c <HAL_I2C_ER_IRQHandler+0xc2>
        ((tmp3 == HAL_I2C_STATE_BUSY_TX) || (tmp3 == HAL_I2C_STATE_BUSY_TX_LISTEN) || \
 800215a:	7cfb      	ldrb	r3, [r7, #19]
 800215c:	2b29      	cmp	r3, #41	@ 0x29
 800215e:	d005      	beq.n	800216c <HAL_I2C_ER_IRQHandler+0xc2>
 8002160:	7cfb      	ldrb	r3, [r7, #19]
 8002162:	2b28      	cmp	r3, #40	@ 0x28
 8002164:	d106      	bne.n	8002174 <HAL_I2C_ER_IRQHandler+0xca>
         ((tmp3 == HAL_I2C_STATE_LISTEN) && (tmp4 == I2C_STATE_SLAVE_BUSY_TX))))
 8002166:	68fb      	ldr	r3, [r7, #12]
 8002168:	2b21      	cmp	r3, #33	@ 0x21
 800216a:	d103      	bne.n	8002174 <HAL_I2C_ER_IRQHandler+0xca>
    {
      I2C_Slave_AF(hi2c);
 800216c:	6878      	ldr	r0, [r7, #4]
 800216e:	f001 f881 	bl	8003274 <I2C_Slave_AF>
 8002172:	e016      	b.n	80021a2 <HAL_I2C_ER_IRQHandler+0xf8>
    }
    else
    {
      /* Clear AF flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8002174:	687b      	ldr	r3, [r7, #4]
 8002176:	681b      	ldr	r3, [r3, #0]
 8002178:	f46f 6280 	mvn.w	r2, #1024	@ 0x400
 800217c:	615a      	str	r2, [r3, #20]

      error |= HAL_I2C_ERROR_AF;
 800217e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002180:	f043 0304 	orr.w	r3, r3, #4
 8002184:	627b      	str	r3, [r7, #36]	@ 0x24

      /* Do not generate a STOP in case of Slave receive non acknowledge during transfer (mean not at the end of transfer) */
      if ((CurrentMode == HAL_I2C_MODE_MASTER) || (CurrentMode == HAL_I2C_MODE_MEM))
 8002186:	7efb      	ldrb	r3, [r7, #27]
 8002188:	2b10      	cmp	r3, #16
 800218a:	d002      	beq.n	8002192 <HAL_I2C_ER_IRQHandler+0xe8>
 800218c:	7efb      	ldrb	r3, [r7, #27]
 800218e:	2b40      	cmp	r3, #64	@ 0x40
 8002190:	d107      	bne.n	80021a2 <HAL_I2C_ER_IRQHandler+0xf8>
      {
        /* Generate Stop */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8002192:	687b      	ldr	r3, [r7, #4]
 8002194:	681b      	ldr	r3, [r3, #0]
 8002196:	681a      	ldr	r2, [r3, #0]
 8002198:	687b      	ldr	r3, [r7, #4]
 800219a:	681b      	ldr	r3, [r3, #0]
 800219c:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 80021a0:	601a      	str	r2, [r3, #0]
      }
    }
  }

  /* I2C Over-Run/Under-Run interrupt occurred -------------------------------*/
  if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_OVR) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_ERR) != RESET))
 80021a2:	6a3b      	ldr	r3, [r7, #32]
 80021a4:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 80021a8:	2b00      	cmp	r3, #0
 80021aa:	d00d      	beq.n	80021c8 <HAL_I2C_ER_IRQHandler+0x11e>
 80021ac:	69fb      	ldr	r3, [r7, #28]
 80021ae:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80021b2:	2b00      	cmp	r3, #0
 80021b4:	d008      	beq.n	80021c8 <HAL_I2C_ER_IRQHandler+0x11e>
  {
    error |= HAL_I2C_ERROR_OVR;
 80021b6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80021b8:	f043 0308 	orr.w	r3, r3, #8
 80021bc:	627b      	str	r3, [r7, #36]	@ 0x24
    /* Clear OVR flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_OVR);
 80021be:	687b      	ldr	r3, [r7, #4]
 80021c0:	681b      	ldr	r3, [r3, #0]
 80021c2:	f46f 6200 	mvn.w	r2, #2048	@ 0x800
 80021c6:	615a      	str	r2, [r3, #20]
  }

  /* Call the Error Callback in case of Error detected -----------------------*/
  if (error != HAL_I2C_ERROR_NONE)
 80021c8:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80021ca:	2b00      	cmp	r3, #0
 80021cc:	d008      	beq.n	80021e0 <HAL_I2C_ER_IRQHandler+0x136>
  {
    hi2c->ErrorCode |= error;
 80021ce:	687b      	ldr	r3, [r7, #4]
 80021d0:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 80021d2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80021d4:	431a      	orrs	r2, r3
 80021d6:	687b      	ldr	r3, [r7, #4]
 80021d8:	641a      	str	r2, [r3, #64]	@ 0x40
    I2C_ITError(hi2c);
 80021da:	6878      	ldr	r0, [r7, #4]
 80021dc:	f001 f8be 	bl	800335c <I2C_ITError>
  }
}
 80021e0:	bf00      	nop
 80021e2:	3728      	adds	r7, #40	@ 0x28
 80021e4:	46bd      	mov	sp, r7
 80021e6:	bd80      	pop	{r7, pc}

080021e8 <HAL_I2C_MasterTxCpltCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_MasterTxCpltCallback(I2C_HandleTypeDef *hi2c)
{
 80021e8:	b480      	push	{r7}
 80021ea:	b083      	sub	sp, #12
 80021ec:	af00      	add	r7, sp, #0
 80021ee:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_MasterTxCpltCallback could be implemented in the user file
   */
}
 80021f0:	bf00      	nop
 80021f2:	370c      	adds	r7, #12
 80021f4:	46bd      	mov	sp, r7
 80021f6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80021fa:	4770      	bx	lr

080021fc <HAL_I2C_MasterRxCpltCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_MasterRxCpltCallback(I2C_HandleTypeDef *hi2c)
{
 80021fc:	b480      	push	{r7}
 80021fe:	b083      	sub	sp, #12
 8002200:	af00      	add	r7, sp, #0
 8002202:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_MasterRxCpltCallback could be implemented in the user file
   */
}
 8002204:	bf00      	nop
 8002206:	370c      	adds	r7, #12
 8002208:	46bd      	mov	sp, r7
 800220a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800220e:	4770      	bx	lr

08002210 <HAL_I2C_SlaveTxCpltCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_SlaveTxCpltCallback(I2C_HandleTypeDef *hi2c)
{
 8002210:	b480      	push	{r7}
 8002212:	b083      	sub	sp, #12
 8002214:	af00      	add	r7, sp, #0
 8002216:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_SlaveTxCpltCallback could be implemented in the user file
   */
}
 8002218:	bf00      	nop
 800221a:	370c      	adds	r7, #12
 800221c:	46bd      	mov	sp, r7
 800221e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002222:	4770      	bx	lr

08002224 <HAL_I2C_SlaveRxCpltCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_SlaveRxCpltCallback(I2C_HandleTypeDef *hi2c)
{
 8002224:	b480      	push	{r7}
 8002226:	b083      	sub	sp, #12
 8002228:	af00      	add	r7, sp, #0
 800222a:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_SlaveRxCpltCallback could be implemented in the user file
   */
}
 800222c:	bf00      	nop
 800222e:	370c      	adds	r7, #12
 8002230:	46bd      	mov	sp, r7
 8002232:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002236:	4770      	bx	lr

08002238 <HAL_I2C_AddrCallback>:
  * @param  TransferDirection Master request Transfer Direction (Write/Read), value of @ref I2C_XferDirection_definition
  * @param  AddrMatchCode Address Match Code
  * @retval None
  */
__weak void HAL_I2C_AddrCallback(I2C_HandleTypeDef *hi2c, uint8_t TransferDirection, uint16_t AddrMatchCode)
{
 8002238:	b480      	push	{r7}
 800223a:	b083      	sub	sp, #12
 800223c:	af00      	add	r7, sp, #0
 800223e:	6078      	str	r0, [r7, #4]
 8002240:	460b      	mov	r3, r1
 8002242:	70fb      	strb	r3, [r7, #3]
 8002244:	4613      	mov	r3, r2
 8002246:	803b      	strh	r3, [r7, #0]
  UNUSED(AddrMatchCode);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_AddrCallback() could be implemented in the user file
   */
}
 8002248:	bf00      	nop
 800224a:	370c      	adds	r7, #12
 800224c:	46bd      	mov	sp, r7
 800224e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002252:	4770      	bx	lr

08002254 <HAL_I2C_ListenCpltCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_ListenCpltCallback(I2C_HandleTypeDef *hi2c)
{
 8002254:	b480      	push	{r7}
 8002256:	b083      	sub	sp, #12
 8002258:	af00      	add	r7, sp, #0
 800225a:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_ListenCpltCallback() could be implemented in the user file
  */
}
 800225c:	bf00      	nop
 800225e:	370c      	adds	r7, #12
 8002260:	46bd      	mov	sp, r7
 8002262:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002266:	4770      	bx	lr

08002268 <HAL_I2C_MemTxCpltCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_MemTxCpltCallback(I2C_HandleTypeDef *hi2c)
{
 8002268:	b480      	push	{r7}
 800226a:	b083      	sub	sp, #12
 800226c:	af00      	add	r7, sp, #0
 800226e:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_MemTxCpltCallback could be implemented in the user file
   */
}
 8002270:	bf00      	nop
 8002272:	370c      	adds	r7, #12
 8002274:	46bd      	mov	sp, r7
 8002276:	f85d 7b04 	ldr.w	r7, [sp], #4
 800227a:	4770      	bx	lr

0800227c <HAL_I2C_MemRxCpltCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_MemRxCpltCallback(I2C_HandleTypeDef *hi2c)
{
 800227c:	b480      	push	{r7}
 800227e:	b083      	sub	sp, #12
 8002280:	af00      	add	r7, sp, #0
 8002282:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_MemRxCpltCallback could be implemented in the user file
   */
}
 8002284:	bf00      	nop
 8002286:	370c      	adds	r7, #12
 8002288:	46bd      	mov	sp, r7
 800228a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800228e:	4770      	bx	lr

08002290 <HAL_I2C_ErrorCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_ErrorCallback(I2C_HandleTypeDef *hi2c)
{
 8002290:	b480      	push	{r7}
 8002292:	b083      	sub	sp, #12
 8002294:	af00      	add	r7, sp, #0
 8002296:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_ErrorCallback could be implemented in the user file
   */
}
 8002298:	bf00      	nop
 800229a:	370c      	adds	r7, #12
 800229c:	46bd      	mov	sp, r7
 800229e:	f85d 7b04 	ldr.w	r7, [sp], #4
 80022a2:	4770      	bx	lr

080022a4 <HAL_I2C_AbortCpltCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_AbortCpltCallback(I2C_HandleTypeDef *hi2c)
{
 80022a4:	b480      	push	{r7}
 80022a6:	b083      	sub	sp, #12
 80022a8:	af00      	add	r7, sp, #0
 80022aa:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_AbortCpltCallback could be implemented in the user file
   */
}
 80022ac:	bf00      	nop
 80022ae:	370c      	adds	r7, #12
 80022b0:	46bd      	mov	sp, r7
 80022b2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80022b6:	4770      	bx	lr

080022b8 <I2C_MasterTransmit_TXE>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_MasterTransmit_TXE(I2C_HandleTypeDef *hi2c)
{
 80022b8:	b580      	push	{r7, lr}
 80022ba:	b084      	sub	sp, #16
 80022bc:	af00      	add	r7, sp, #0
 80022be:	6078      	str	r0, [r7, #4]
  /* Declaration of temporary variables to prevent undefined behavior of volatile usage */
  HAL_I2C_StateTypeDef CurrentState = hi2c->State;
 80022c0:	687b      	ldr	r3, [r7, #4]
 80022c2:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 80022c6:	73fb      	strb	r3, [r7, #15]
  HAL_I2C_ModeTypeDef CurrentMode   = hi2c->Mode;
 80022c8:	687b      	ldr	r3, [r7, #4]
 80022ca:	f893 303e 	ldrb.w	r3, [r3, #62]	@ 0x3e
 80022ce:	73bb      	strb	r3, [r7, #14]
  uint32_t CurrentXferOptions       = hi2c->XferOptions;
 80022d0:	687b      	ldr	r3, [r7, #4]
 80022d2:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80022d4:	60bb      	str	r3, [r7, #8]

  if ((hi2c->XferSize == 0U) && (CurrentState == HAL_I2C_STATE_BUSY_TX))
 80022d6:	687b      	ldr	r3, [r7, #4]
 80022d8:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 80022da:	2b00      	cmp	r3, #0
 80022dc:	d150      	bne.n	8002380 <I2C_MasterTransmit_TXE+0xc8>
 80022de:	7bfb      	ldrb	r3, [r7, #15]
 80022e0:	2b21      	cmp	r3, #33	@ 0x21
 80022e2:	d14d      	bne.n	8002380 <I2C_MasterTransmit_TXE+0xc8>
  {
    /* Call TxCpltCallback() directly if no stop mode is set */
    if ((CurrentXferOptions != I2C_FIRST_AND_LAST_FRAME) && (CurrentXferOptions != I2C_LAST_FRAME) && (CurrentXferOptions != I2C_NO_OPTION_FRAME))
 80022e4:	68bb      	ldr	r3, [r7, #8]
 80022e6:	2b08      	cmp	r3, #8
 80022e8:	d01d      	beq.n	8002326 <I2C_MasterTransmit_TXE+0x6e>
 80022ea:	68bb      	ldr	r3, [r7, #8]
 80022ec:	2b20      	cmp	r3, #32
 80022ee:	d01a      	beq.n	8002326 <I2C_MasterTransmit_TXE+0x6e>
 80022f0:	68bb      	ldr	r3, [r7, #8]
 80022f2:	f513 3f80 	cmn.w	r3, #65536	@ 0x10000
 80022f6:	d016      	beq.n	8002326 <I2C_MasterTransmit_TXE+0x6e>
    {
      __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_BUF | I2C_IT_ERR);
 80022f8:	687b      	ldr	r3, [r7, #4]
 80022fa:	681b      	ldr	r3, [r3, #0]
 80022fc:	685a      	ldr	r2, [r3, #4]
 80022fe:	687b      	ldr	r3, [r7, #4]
 8002300:	681b      	ldr	r3, [r3, #0]
 8002302:	f422 62e0 	bic.w	r2, r2, #1792	@ 0x700
 8002306:	605a      	str	r2, [r3, #4]

      hi2c->PreviousState = I2C_STATE_MASTER_BUSY_TX;
 8002308:	687b      	ldr	r3, [r7, #4]
 800230a:	2211      	movs	r2, #17
 800230c:	631a      	str	r2, [r3, #48]	@ 0x30
      hi2c->Mode = HAL_I2C_MODE_NONE;
 800230e:	687b      	ldr	r3, [r7, #4]
 8002310:	2200      	movs	r2, #0
 8002312:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
      hi2c->State = HAL_I2C_STATE_READY;
 8002316:	687b      	ldr	r3, [r7, #4]
 8002318:	2220      	movs	r2, #32
 800231a:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
      hi2c->MasterTxCpltCallback(hi2c);
#else
      HAL_I2C_MasterTxCpltCallback(hi2c);
 800231e:	6878      	ldr	r0, [r7, #4]
 8002320:	f7ff ff62 	bl	80021e8 <HAL_I2C_MasterTxCpltCallback>
    if ((CurrentXferOptions != I2C_FIRST_AND_LAST_FRAME) && (CurrentXferOptions != I2C_LAST_FRAME) && (CurrentXferOptions != I2C_NO_OPTION_FRAME))
 8002324:	e060      	b.n	80023e8 <I2C_MasterTransmit_TXE+0x130>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
    }
    else /* Generate Stop condition then Call TxCpltCallback() */
    {
      /* Disable EVT, BUF and ERR interrupt */
      __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_BUF | I2C_IT_ERR);
 8002326:	687b      	ldr	r3, [r7, #4]
 8002328:	681b      	ldr	r3, [r3, #0]
 800232a:	685a      	ldr	r2, [r3, #4]
 800232c:	687b      	ldr	r3, [r7, #4]
 800232e:	681b      	ldr	r3, [r3, #0]
 8002330:	f422 62e0 	bic.w	r2, r2, #1792	@ 0x700
 8002334:	605a      	str	r2, [r3, #4]

      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8002336:	687b      	ldr	r3, [r7, #4]
 8002338:	681b      	ldr	r3, [r3, #0]
 800233a:	681a      	ldr	r2, [r3, #0]
 800233c:	687b      	ldr	r3, [r7, #4]
 800233e:	681b      	ldr	r3, [r3, #0]
 8002340:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8002344:	601a      	str	r2, [r3, #0]

      hi2c->PreviousState = I2C_STATE_NONE;
 8002346:	687b      	ldr	r3, [r7, #4]
 8002348:	2200      	movs	r2, #0
 800234a:	631a      	str	r2, [r3, #48]	@ 0x30
      hi2c->State = HAL_I2C_STATE_READY;
 800234c:	687b      	ldr	r3, [r7, #4]
 800234e:	2220      	movs	r2, #32
 8002350:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

      if (hi2c->Mode == HAL_I2C_MODE_MEM)
 8002354:	687b      	ldr	r3, [r7, #4]
 8002356:	f893 303e 	ldrb.w	r3, [r3, #62]	@ 0x3e
 800235a:	b2db      	uxtb	r3, r3
 800235c:	2b40      	cmp	r3, #64	@ 0x40
 800235e:	d107      	bne.n	8002370 <I2C_MasterTransmit_TXE+0xb8>
      {
        hi2c->Mode = HAL_I2C_MODE_NONE;
 8002360:	687b      	ldr	r3, [r7, #4]
 8002362:	2200      	movs	r2, #0
 8002364:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
        hi2c->MemTxCpltCallback(hi2c);
#else
        HAL_I2C_MemTxCpltCallback(hi2c);
 8002368:	6878      	ldr	r0, [r7, #4]
 800236a:	f7ff ff7d 	bl	8002268 <HAL_I2C_MemTxCpltCallback>
    if ((CurrentXferOptions != I2C_FIRST_AND_LAST_FRAME) && (CurrentXferOptions != I2C_LAST_FRAME) && (CurrentXferOptions != I2C_NO_OPTION_FRAME))
 800236e:	e03b      	b.n	80023e8 <I2C_MasterTransmit_TXE+0x130>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
      }
      else
      {
        hi2c->Mode = HAL_I2C_MODE_NONE;
 8002370:	687b      	ldr	r3, [r7, #4]
 8002372:	2200      	movs	r2, #0
 8002374:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
        hi2c->MasterTxCpltCallback(hi2c);
#else
        HAL_I2C_MasterTxCpltCallback(hi2c);
 8002378:	6878      	ldr	r0, [r7, #4]
 800237a:	f7ff ff35 	bl	80021e8 <HAL_I2C_MasterTxCpltCallback>
    if ((CurrentXferOptions != I2C_FIRST_AND_LAST_FRAME) && (CurrentXferOptions != I2C_LAST_FRAME) && (CurrentXferOptions != I2C_NO_OPTION_FRAME))
 800237e:	e033      	b.n	80023e8 <I2C_MasterTransmit_TXE+0x130>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
      }
    }
  }
  else if ((CurrentState == HAL_I2C_STATE_BUSY_TX) || \
 8002380:	7bfb      	ldrb	r3, [r7, #15]
 8002382:	2b21      	cmp	r3, #33	@ 0x21
 8002384:	d005      	beq.n	8002392 <I2C_MasterTransmit_TXE+0xda>
 8002386:	7bbb      	ldrb	r3, [r7, #14]
 8002388:	2b40      	cmp	r3, #64	@ 0x40
 800238a:	d12d      	bne.n	80023e8 <I2C_MasterTransmit_TXE+0x130>
           ((CurrentMode == HAL_I2C_MODE_MEM) && (CurrentState == HAL_I2C_STATE_BUSY_RX)))
 800238c:	7bfb      	ldrb	r3, [r7, #15]
 800238e:	2b22      	cmp	r3, #34	@ 0x22
 8002390:	d12a      	bne.n	80023e8 <I2C_MasterTransmit_TXE+0x130>
  {
    if (hi2c->XferCount == 0U)
 8002392:	687b      	ldr	r3, [r7, #4]
 8002394:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8002396:	b29b      	uxth	r3, r3
 8002398:	2b00      	cmp	r3, #0
 800239a:	d108      	bne.n	80023ae <I2C_MasterTransmit_TXE+0xf6>
    {
      /* Disable BUF interrupt */
      __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_BUF);
 800239c:	687b      	ldr	r3, [r7, #4]
 800239e:	681b      	ldr	r3, [r3, #0]
 80023a0:	685a      	ldr	r2, [r3, #4]
 80023a2:	687b      	ldr	r3, [r7, #4]
 80023a4:	681b      	ldr	r3, [r3, #0]
 80023a6:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 80023aa:	605a      	str	r2, [r3, #4]
  }
  else
  {
    /* Do nothing */
  }
}
 80023ac:	e01c      	b.n	80023e8 <I2C_MasterTransmit_TXE+0x130>
      if (hi2c->Mode == HAL_I2C_MODE_MEM)
 80023ae:	687b      	ldr	r3, [r7, #4]
 80023b0:	f893 303e 	ldrb.w	r3, [r3, #62]	@ 0x3e
 80023b4:	b2db      	uxtb	r3, r3
 80023b6:	2b40      	cmp	r3, #64	@ 0x40
 80023b8:	d103      	bne.n	80023c2 <I2C_MasterTransmit_TXE+0x10a>
        I2C_MemoryTransmit_TXE_BTF(hi2c);
 80023ba:	6878      	ldr	r0, [r7, #4]
 80023bc:	f000 f88e 	bl	80024dc <I2C_MemoryTransmit_TXE_BTF>
}
 80023c0:	e012      	b.n	80023e8 <I2C_MasterTransmit_TXE+0x130>
        hi2c->Instance->DR = *hi2c->pBuffPtr;
 80023c2:	687b      	ldr	r3, [r7, #4]
 80023c4:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80023c6:	781a      	ldrb	r2, [r3, #0]
 80023c8:	687b      	ldr	r3, [r7, #4]
 80023ca:	681b      	ldr	r3, [r3, #0]
 80023cc:	611a      	str	r2, [r3, #16]
        hi2c->pBuffPtr++;
 80023ce:	687b      	ldr	r3, [r7, #4]
 80023d0:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80023d2:	1c5a      	adds	r2, r3, #1
 80023d4:	687b      	ldr	r3, [r7, #4]
 80023d6:	625a      	str	r2, [r3, #36]	@ 0x24
        hi2c->XferCount--;
 80023d8:	687b      	ldr	r3, [r7, #4]
 80023da:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 80023dc:	b29b      	uxth	r3, r3
 80023de:	3b01      	subs	r3, #1
 80023e0:	b29a      	uxth	r2, r3
 80023e2:	687b      	ldr	r3, [r7, #4]
 80023e4:	855a      	strh	r2, [r3, #42]	@ 0x2a
}
 80023e6:	e7ff      	b.n	80023e8 <I2C_MasterTransmit_TXE+0x130>
 80023e8:	bf00      	nop
 80023ea:	3710      	adds	r7, #16
 80023ec:	46bd      	mov	sp, r7
 80023ee:	bd80      	pop	{r7, pc}

080023f0 <I2C_MasterTransmit_BTF>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_MasterTransmit_BTF(I2C_HandleTypeDef *hi2c)
{
 80023f0:	b580      	push	{r7, lr}
 80023f2:	b084      	sub	sp, #16
 80023f4:	af00      	add	r7, sp, #0
 80023f6:	6078      	str	r0, [r7, #4]
  /* Declaration of temporary variables to prevent undefined behavior of volatile usage */
  uint32_t CurrentXferOptions = hi2c->XferOptions;
 80023f8:	687b      	ldr	r3, [r7, #4]
 80023fa:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80023fc:	60fb      	str	r3, [r7, #12]

  if (hi2c->State == HAL_I2C_STATE_BUSY_TX)
 80023fe:	687b      	ldr	r3, [r7, #4]
 8002400:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8002404:	b2db      	uxtb	r3, r3
 8002406:	2b21      	cmp	r3, #33	@ 0x21
 8002408:	d164      	bne.n	80024d4 <I2C_MasterTransmit_BTF+0xe4>
  {
    if (hi2c->XferCount != 0U)
 800240a:	687b      	ldr	r3, [r7, #4]
 800240c:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 800240e:	b29b      	uxth	r3, r3
 8002410:	2b00      	cmp	r3, #0
 8002412:	d012      	beq.n	800243a <I2C_MasterTransmit_BTF+0x4a>
    {
      /* Write data to DR */
      hi2c->Instance->DR = *hi2c->pBuffPtr;
 8002414:	687b      	ldr	r3, [r7, #4]
 8002416:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002418:	781a      	ldrb	r2, [r3, #0]
 800241a:	687b      	ldr	r3, [r7, #4]
 800241c:	681b      	ldr	r3, [r3, #0]
 800241e:	611a      	str	r2, [r3, #16]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 8002420:	687b      	ldr	r3, [r7, #4]
 8002422:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002424:	1c5a      	adds	r2, r3, #1
 8002426:	687b      	ldr	r3, [r7, #4]
 8002428:	625a      	str	r2, [r3, #36]	@ 0x24

      /* Update counter */
      hi2c->XferCount--;
 800242a:	687b      	ldr	r3, [r7, #4]
 800242c:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 800242e:	b29b      	uxth	r3, r3
 8002430:	3b01      	subs	r3, #1
 8002432:	b29a      	uxth	r2, r3
 8002434:	687b      	ldr	r3, [r7, #4]
 8002436:	855a      	strh	r2, [r3, #42]	@ 0x2a
  }
  else
  {
    /* Do nothing */
  }
}
 8002438:	e04c      	b.n	80024d4 <I2C_MasterTransmit_BTF+0xe4>
      if ((CurrentXferOptions != I2C_FIRST_AND_LAST_FRAME) && (CurrentXferOptions != I2C_LAST_FRAME) && (CurrentXferOptions != I2C_NO_OPTION_FRAME))
 800243a:	68fb      	ldr	r3, [r7, #12]
 800243c:	2b08      	cmp	r3, #8
 800243e:	d01d      	beq.n	800247c <I2C_MasterTransmit_BTF+0x8c>
 8002440:	68fb      	ldr	r3, [r7, #12]
 8002442:	2b20      	cmp	r3, #32
 8002444:	d01a      	beq.n	800247c <I2C_MasterTransmit_BTF+0x8c>
 8002446:	68fb      	ldr	r3, [r7, #12]
 8002448:	f513 3f80 	cmn.w	r3, #65536	@ 0x10000
 800244c:	d016      	beq.n	800247c <I2C_MasterTransmit_BTF+0x8c>
        __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_BUF | I2C_IT_ERR);
 800244e:	687b      	ldr	r3, [r7, #4]
 8002450:	681b      	ldr	r3, [r3, #0]
 8002452:	685a      	ldr	r2, [r3, #4]
 8002454:	687b      	ldr	r3, [r7, #4]
 8002456:	681b      	ldr	r3, [r3, #0]
 8002458:	f422 62e0 	bic.w	r2, r2, #1792	@ 0x700
 800245c:	605a      	str	r2, [r3, #4]
        hi2c->PreviousState = I2C_STATE_MASTER_BUSY_TX;
 800245e:	687b      	ldr	r3, [r7, #4]
 8002460:	2211      	movs	r2, #17
 8002462:	631a      	str	r2, [r3, #48]	@ 0x30
        hi2c->Mode = HAL_I2C_MODE_NONE;
 8002464:	687b      	ldr	r3, [r7, #4]
 8002466:	2200      	movs	r2, #0
 8002468:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
        hi2c->State = HAL_I2C_STATE_READY;
 800246c:	687b      	ldr	r3, [r7, #4]
 800246e:	2220      	movs	r2, #32
 8002470:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
        HAL_I2C_MasterTxCpltCallback(hi2c);
 8002474:	6878      	ldr	r0, [r7, #4]
 8002476:	f7ff feb7 	bl	80021e8 <HAL_I2C_MasterTxCpltCallback>
}
 800247a:	e02b      	b.n	80024d4 <I2C_MasterTransmit_BTF+0xe4>
        __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_BUF | I2C_IT_ERR);
 800247c:	687b      	ldr	r3, [r7, #4]
 800247e:	681b      	ldr	r3, [r3, #0]
 8002480:	685a      	ldr	r2, [r3, #4]
 8002482:	687b      	ldr	r3, [r7, #4]
 8002484:	681b      	ldr	r3, [r3, #0]
 8002486:	f422 62e0 	bic.w	r2, r2, #1792	@ 0x700
 800248a:	605a      	str	r2, [r3, #4]
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 800248c:	687b      	ldr	r3, [r7, #4]
 800248e:	681b      	ldr	r3, [r3, #0]
 8002490:	681a      	ldr	r2, [r3, #0]
 8002492:	687b      	ldr	r3, [r7, #4]
 8002494:	681b      	ldr	r3, [r3, #0]
 8002496:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 800249a:	601a      	str	r2, [r3, #0]
        hi2c->PreviousState = I2C_STATE_NONE;
 800249c:	687b      	ldr	r3, [r7, #4]
 800249e:	2200      	movs	r2, #0
 80024a0:	631a      	str	r2, [r3, #48]	@ 0x30
        hi2c->State = HAL_I2C_STATE_READY;
 80024a2:	687b      	ldr	r3, [r7, #4]
 80024a4:	2220      	movs	r2, #32
 80024a6:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
        if (hi2c->Mode == HAL_I2C_MODE_MEM)
 80024aa:	687b      	ldr	r3, [r7, #4]
 80024ac:	f893 303e 	ldrb.w	r3, [r3, #62]	@ 0x3e
 80024b0:	b2db      	uxtb	r3, r3
 80024b2:	2b40      	cmp	r3, #64	@ 0x40
 80024b4:	d107      	bne.n	80024c6 <I2C_MasterTransmit_BTF+0xd6>
          hi2c->Mode = HAL_I2C_MODE_NONE;
 80024b6:	687b      	ldr	r3, [r7, #4]
 80024b8:	2200      	movs	r2, #0
 80024ba:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
          HAL_I2C_MemTxCpltCallback(hi2c);
 80024be:	6878      	ldr	r0, [r7, #4]
 80024c0:	f7ff fed2 	bl	8002268 <HAL_I2C_MemTxCpltCallback>
}
 80024c4:	e006      	b.n	80024d4 <I2C_MasterTransmit_BTF+0xe4>
          hi2c->Mode = HAL_I2C_MODE_NONE;
 80024c6:	687b      	ldr	r3, [r7, #4]
 80024c8:	2200      	movs	r2, #0
 80024ca:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
          HAL_I2C_MasterTxCpltCallback(hi2c);
 80024ce:	6878      	ldr	r0, [r7, #4]
 80024d0:	f7ff fe8a 	bl	80021e8 <HAL_I2C_MasterTxCpltCallback>
}
 80024d4:	bf00      	nop
 80024d6:	3710      	adds	r7, #16
 80024d8:	46bd      	mov	sp, r7
 80024da:	bd80      	pop	{r7, pc}

080024dc <I2C_MemoryTransmit_TXE_BTF>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_MemoryTransmit_TXE_BTF(I2C_HandleTypeDef *hi2c)
{
 80024dc:	b580      	push	{r7, lr}
 80024de:	b084      	sub	sp, #16
 80024e0:	af00      	add	r7, sp, #0
 80024e2:	6078      	str	r0, [r7, #4]
  /* Declaration of temporary variables to prevent undefined behavior of volatile usage */
  HAL_I2C_StateTypeDef CurrentState = hi2c->State;
 80024e4:	687b      	ldr	r3, [r7, #4]
 80024e6:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 80024ea:	73fb      	strb	r3, [r7, #15]

  if (hi2c->EventCount == 0U)
 80024ec:	687b      	ldr	r3, [r7, #4]
 80024ee:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 80024f0:	2b00      	cmp	r3, #0
 80024f2:	d11d      	bne.n	8002530 <I2C_MemoryTransmit_TXE_BTF+0x54>
  {
    /* If Memory address size is 8Bit */
    if (hi2c->MemaddSize == I2C_MEMADD_SIZE_8BIT)
 80024f4:	687b      	ldr	r3, [r7, #4]
 80024f6:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80024f8:	2b01      	cmp	r3, #1
 80024fa:	d10b      	bne.n	8002514 <I2C_MemoryTransmit_TXE_BTF+0x38>
    {
      /* Send Memory Address */
      hi2c->Instance->DR = I2C_MEM_ADD_LSB(hi2c->Memaddress);
 80024fc:	687b      	ldr	r3, [r7, #4]
 80024fe:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8002500:	b2da      	uxtb	r2, r3
 8002502:	687b      	ldr	r3, [r7, #4]
 8002504:	681b      	ldr	r3, [r3, #0]
 8002506:	611a      	str	r2, [r3, #16]

      hi2c->EventCount += 2U;
 8002508:	687b      	ldr	r3, [r7, #4]
 800250a:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 800250c:	1c9a      	adds	r2, r3, #2
 800250e:	687b      	ldr	r3, [r7, #4]
 8002510:	651a      	str	r2, [r3, #80]	@ 0x50
  else
  {
    /* Clear TXE and BTF flags */
    I2C_Flush_DR(hi2c);
  }
}
 8002512:	e077      	b.n	8002604 <I2C_MemoryTransmit_TXE_BTF+0x128>
      hi2c->Instance->DR = I2C_MEM_ADD_MSB(hi2c->Memaddress);
 8002514:	687b      	ldr	r3, [r7, #4]
 8002516:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8002518:	b29b      	uxth	r3, r3
 800251a:	121b      	asrs	r3, r3, #8
 800251c:	b2da      	uxtb	r2, r3
 800251e:	687b      	ldr	r3, [r7, #4]
 8002520:	681b      	ldr	r3, [r3, #0]
 8002522:	611a      	str	r2, [r3, #16]
      hi2c->EventCount++;
 8002524:	687b      	ldr	r3, [r7, #4]
 8002526:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8002528:	1c5a      	adds	r2, r3, #1
 800252a:	687b      	ldr	r3, [r7, #4]
 800252c:	651a      	str	r2, [r3, #80]	@ 0x50
}
 800252e:	e069      	b.n	8002604 <I2C_MemoryTransmit_TXE_BTF+0x128>
  else if (hi2c->EventCount == 1U)
 8002530:	687b      	ldr	r3, [r7, #4]
 8002532:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8002534:	2b01      	cmp	r3, #1
 8002536:	d10b      	bne.n	8002550 <I2C_MemoryTransmit_TXE_BTF+0x74>
    hi2c->Instance->DR = I2C_MEM_ADD_LSB(hi2c->Memaddress);
 8002538:	687b      	ldr	r3, [r7, #4]
 800253a:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 800253c:	b2da      	uxtb	r2, r3
 800253e:	687b      	ldr	r3, [r7, #4]
 8002540:	681b      	ldr	r3, [r3, #0]
 8002542:	611a      	str	r2, [r3, #16]
    hi2c->EventCount++;
 8002544:	687b      	ldr	r3, [r7, #4]
 8002546:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8002548:	1c5a      	adds	r2, r3, #1
 800254a:	687b      	ldr	r3, [r7, #4]
 800254c:	651a      	str	r2, [r3, #80]	@ 0x50
}
 800254e:	e059      	b.n	8002604 <I2C_MemoryTransmit_TXE_BTF+0x128>
  else if (hi2c->EventCount == 2U)
 8002550:	687b      	ldr	r3, [r7, #4]
 8002552:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8002554:	2b02      	cmp	r3, #2
 8002556:	d152      	bne.n	80025fe <I2C_MemoryTransmit_TXE_BTF+0x122>
    if (CurrentState == HAL_I2C_STATE_BUSY_RX)
 8002558:	7bfb      	ldrb	r3, [r7, #15]
 800255a:	2b22      	cmp	r3, #34	@ 0x22
 800255c:	d10d      	bne.n	800257a <I2C_MemoryTransmit_TXE_BTF+0x9e>
      hi2c->Instance->CR1 |= I2C_CR1_START;
 800255e:	687b      	ldr	r3, [r7, #4]
 8002560:	681b      	ldr	r3, [r3, #0]
 8002562:	681a      	ldr	r2, [r3, #0]
 8002564:	687b      	ldr	r3, [r7, #4]
 8002566:	681b      	ldr	r3, [r3, #0]
 8002568:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 800256c:	601a      	str	r2, [r3, #0]
      hi2c->EventCount++;
 800256e:	687b      	ldr	r3, [r7, #4]
 8002570:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8002572:	1c5a      	adds	r2, r3, #1
 8002574:	687b      	ldr	r3, [r7, #4]
 8002576:	651a      	str	r2, [r3, #80]	@ 0x50
}
 8002578:	e044      	b.n	8002604 <I2C_MemoryTransmit_TXE_BTF+0x128>
    else if ((hi2c->XferCount > 0U) && (CurrentState == HAL_I2C_STATE_BUSY_TX))
 800257a:	687b      	ldr	r3, [r7, #4]
 800257c:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 800257e:	b29b      	uxth	r3, r3
 8002580:	2b00      	cmp	r3, #0
 8002582:	d015      	beq.n	80025b0 <I2C_MemoryTransmit_TXE_BTF+0xd4>
 8002584:	7bfb      	ldrb	r3, [r7, #15]
 8002586:	2b21      	cmp	r3, #33	@ 0x21
 8002588:	d112      	bne.n	80025b0 <I2C_MemoryTransmit_TXE_BTF+0xd4>
      hi2c->Instance->DR = *hi2c->pBuffPtr;
 800258a:	687b      	ldr	r3, [r7, #4]
 800258c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800258e:	781a      	ldrb	r2, [r3, #0]
 8002590:	687b      	ldr	r3, [r7, #4]
 8002592:	681b      	ldr	r3, [r3, #0]
 8002594:	611a      	str	r2, [r3, #16]
      hi2c->pBuffPtr++;
 8002596:	687b      	ldr	r3, [r7, #4]
 8002598:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800259a:	1c5a      	adds	r2, r3, #1
 800259c:	687b      	ldr	r3, [r7, #4]
 800259e:	625a      	str	r2, [r3, #36]	@ 0x24
      hi2c->XferCount--;
 80025a0:	687b      	ldr	r3, [r7, #4]
 80025a2:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 80025a4:	b29b      	uxth	r3, r3
 80025a6:	3b01      	subs	r3, #1
 80025a8:	b29a      	uxth	r2, r3
 80025aa:	687b      	ldr	r3, [r7, #4]
 80025ac:	855a      	strh	r2, [r3, #42]	@ 0x2a
}
 80025ae:	e029      	b.n	8002604 <I2C_MemoryTransmit_TXE_BTF+0x128>
    else if ((hi2c->XferCount == 0U) && (CurrentState == HAL_I2C_STATE_BUSY_TX))
 80025b0:	687b      	ldr	r3, [r7, #4]
 80025b2:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 80025b4:	b29b      	uxth	r3, r3
 80025b6:	2b00      	cmp	r3, #0
 80025b8:	d124      	bne.n	8002604 <I2C_MemoryTransmit_TXE_BTF+0x128>
 80025ba:	7bfb      	ldrb	r3, [r7, #15]
 80025bc:	2b21      	cmp	r3, #33	@ 0x21
 80025be:	d121      	bne.n	8002604 <I2C_MemoryTransmit_TXE_BTF+0x128>
      __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_BUF | I2C_IT_ERR);
 80025c0:	687b      	ldr	r3, [r7, #4]
 80025c2:	681b      	ldr	r3, [r3, #0]
 80025c4:	685a      	ldr	r2, [r3, #4]
 80025c6:	687b      	ldr	r3, [r7, #4]
 80025c8:	681b      	ldr	r3, [r3, #0]
 80025ca:	f422 62e0 	bic.w	r2, r2, #1792	@ 0x700
 80025ce:	605a      	str	r2, [r3, #4]
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80025d0:	687b      	ldr	r3, [r7, #4]
 80025d2:	681b      	ldr	r3, [r3, #0]
 80025d4:	681a      	ldr	r2, [r3, #0]
 80025d6:	687b      	ldr	r3, [r7, #4]
 80025d8:	681b      	ldr	r3, [r3, #0]
 80025da:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 80025de:	601a      	str	r2, [r3, #0]
      hi2c->PreviousState = I2C_STATE_NONE;
 80025e0:	687b      	ldr	r3, [r7, #4]
 80025e2:	2200      	movs	r2, #0
 80025e4:	631a      	str	r2, [r3, #48]	@ 0x30
      hi2c->State = HAL_I2C_STATE_READY;
 80025e6:	687b      	ldr	r3, [r7, #4]
 80025e8:	2220      	movs	r2, #32
 80025ea:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
      hi2c->Mode = HAL_I2C_MODE_NONE;
 80025ee:	687b      	ldr	r3, [r7, #4]
 80025f0:	2200      	movs	r2, #0
 80025f2:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
      HAL_I2C_MemTxCpltCallback(hi2c);
 80025f6:	6878      	ldr	r0, [r7, #4]
 80025f8:	f7ff fe36 	bl	8002268 <HAL_I2C_MemTxCpltCallback>
}
 80025fc:	e002      	b.n	8002604 <I2C_MemoryTransmit_TXE_BTF+0x128>
    I2C_Flush_DR(hi2c);
 80025fe:	6878      	ldr	r0, [r7, #4]
 8002600:	f7ff f9cb 	bl	800199a <I2C_Flush_DR>
}
 8002604:	bf00      	nop
 8002606:	3710      	adds	r7, #16
 8002608:	46bd      	mov	sp, r7
 800260a:	bd80      	pop	{r7, pc}

0800260c <I2C_MasterReceive_RXNE>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_MasterReceive_RXNE(I2C_HandleTypeDef *hi2c)
{
 800260c:	b580      	push	{r7, lr}
 800260e:	b084      	sub	sp, #16
 8002610:	af00      	add	r7, sp, #0
 8002612:	6078      	str	r0, [r7, #4]
  if (hi2c->State == HAL_I2C_STATE_BUSY_RX)
 8002614:	687b      	ldr	r3, [r7, #4]
 8002616:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 800261a:	b2db      	uxtb	r3, r3
 800261c:	2b22      	cmp	r3, #34	@ 0x22
 800261e:	f040 80b9 	bne.w	8002794 <I2C_MasterReceive_RXNE+0x188>
  {
    uint32_t tmp;
    uint32_t CurrentXferOptions;

    CurrentXferOptions = hi2c->XferOptions;
 8002622:	687b      	ldr	r3, [r7, #4]
 8002624:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8002626:	60fb      	str	r3, [r7, #12]
    tmp = hi2c->XferCount;
 8002628:	687b      	ldr	r3, [r7, #4]
 800262a:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 800262c:	b29b      	uxth	r3, r3
 800262e:	60bb      	str	r3, [r7, #8]
    if (tmp > 3U)
 8002630:	68bb      	ldr	r3, [r7, #8]
 8002632:	2b03      	cmp	r3, #3
 8002634:	d921      	bls.n	800267a <I2C_MasterReceive_RXNE+0x6e>
    {
      /* Read data from DR */
      *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8002636:	687b      	ldr	r3, [r7, #4]
 8002638:	681b      	ldr	r3, [r3, #0]
 800263a:	691a      	ldr	r2, [r3, #16]
 800263c:	687b      	ldr	r3, [r7, #4]
 800263e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002640:	b2d2      	uxtb	r2, r2
 8002642:	701a      	strb	r2, [r3, #0]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 8002644:	687b      	ldr	r3, [r7, #4]
 8002646:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002648:	1c5a      	adds	r2, r3, #1
 800264a:	687b      	ldr	r3, [r7, #4]
 800264c:	625a      	str	r2, [r3, #36]	@ 0x24

      /* Update counter */
      hi2c->XferCount--;
 800264e:	687b      	ldr	r3, [r7, #4]
 8002650:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8002652:	b29b      	uxth	r3, r3
 8002654:	3b01      	subs	r3, #1
 8002656:	b29a      	uxth	r2, r3
 8002658:	687b      	ldr	r3, [r7, #4]
 800265a:	855a      	strh	r2, [r3, #42]	@ 0x2a

      if (hi2c->XferCount == (uint16_t)3)
 800265c:	687b      	ldr	r3, [r7, #4]
 800265e:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8002660:	b29b      	uxth	r3, r3
 8002662:	2b03      	cmp	r3, #3
 8002664:	f040 8096 	bne.w	8002794 <I2C_MasterReceive_RXNE+0x188>
      {
        /* Disable BUF interrupt, this help to treat correctly the last 4 bytes
        on BTF subroutine */
        /* Disable BUF interrupt */
        __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_BUF);
 8002668:	687b      	ldr	r3, [r7, #4]
 800266a:	681b      	ldr	r3, [r3, #0]
 800266c:	685a      	ldr	r2, [r3, #4]
 800266e:	687b      	ldr	r3, [r7, #4]
 8002670:	681b      	ldr	r3, [r3, #0]
 8002672:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 8002676:	605a      	str	r2, [r3, #4]
      /* Disable BUF interrupt, this help to treat correctly the last 2 bytes
         on BTF subroutine if there is a reception delay between N-1 and N byte */
      __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_BUF);
    }
  }
}
 8002678:	e08c      	b.n	8002794 <I2C_MasterReceive_RXNE+0x188>
    else if ((hi2c->XferOptions != I2C_FIRST_AND_NEXT_FRAME) && ((tmp == 1U) || (tmp == 0U)))
 800267a:	687b      	ldr	r3, [r7, #4]
 800267c:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800267e:	2b02      	cmp	r3, #2
 8002680:	d07f      	beq.n	8002782 <I2C_MasterReceive_RXNE+0x176>
 8002682:	68bb      	ldr	r3, [r7, #8]
 8002684:	2b01      	cmp	r3, #1
 8002686:	d002      	beq.n	800268e <I2C_MasterReceive_RXNE+0x82>
 8002688:	68bb      	ldr	r3, [r7, #8]
 800268a:	2b00      	cmp	r3, #0
 800268c:	d179      	bne.n	8002782 <I2C_MasterReceive_RXNE+0x176>
      if (I2C_WaitOnSTOPRequestThroughIT(hi2c) == HAL_OK)
 800268e:	6878      	ldr	r0, [r7, #4]
 8002690:	f001 f944 	bl	800391c <I2C_WaitOnSTOPRequestThroughIT>
 8002694:	4603      	mov	r3, r0
 8002696:	2b00      	cmp	r3, #0
 8002698:	d14c      	bne.n	8002734 <I2C_MasterReceive_RXNE+0x128>
        CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 800269a:	687b      	ldr	r3, [r7, #4]
 800269c:	681b      	ldr	r3, [r3, #0]
 800269e:	681a      	ldr	r2, [r3, #0]
 80026a0:	687b      	ldr	r3, [r7, #4]
 80026a2:	681b      	ldr	r3, [r3, #0]
 80026a4:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 80026a8:	601a      	str	r2, [r3, #0]
        __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_BUF | I2C_IT_ERR);
 80026aa:	687b      	ldr	r3, [r7, #4]
 80026ac:	681b      	ldr	r3, [r3, #0]
 80026ae:	685a      	ldr	r2, [r3, #4]
 80026b0:	687b      	ldr	r3, [r7, #4]
 80026b2:	681b      	ldr	r3, [r3, #0]
 80026b4:	f422 62e0 	bic.w	r2, r2, #1792	@ 0x700
 80026b8:	605a      	str	r2, [r3, #4]
        *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 80026ba:	687b      	ldr	r3, [r7, #4]
 80026bc:	681b      	ldr	r3, [r3, #0]
 80026be:	691a      	ldr	r2, [r3, #16]
 80026c0:	687b      	ldr	r3, [r7, #4]
 80026c2:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80026c4:	b2d2      	uxtb	r2, r2
 80026c6:	701a      	strb	r2, [r3, #0]
        hi2c->pBuffPtr++;
 80026c8:	687b      	ldr	r3, [r7, #4]
 80026ca:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80026cc:	1c5a      	adds	r2, r3, #1
 80026ce:	687b      	ldr	r3, [r7, #4]
 80026d0:	625a      	str	r2, [r3, #36]	@ 0x24
        hi2c->XferCount--;
 80026d2:	687b      	ldr	r3, [r7, #4]
 80026d4:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 80026d6:	b29b      	uxth	r3, r3
 80026d8:	3b01      	subs	r3, #1
 80026da:	b29a      	uxth	r2, r3
 80026dc:	687b      	ldr	r3, [r7, #4]
 80026de:	855a      	strh	r2, [r3, #42]	@ 0x2a
        hi2c->State = HAL_I2C_STATE_READY;
 80026e0:	687b      	ldr	r3, [r7, #4]
 80026e2:	2220      	movs	r2, #32
 80026e4:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
        if (hi2c->Mode == HAL_I2C_MODE_MEM)
 80026e8:	687b      	ldr	r3, [r7, #4]
 80026ea:	f893 303e 	ldrb.w	r3, [r3, #62]	@ 0x3e
 80026ee:	b2db      	uxtb	r3, r3
 80026f0:	2b40      	cmp	r3, #64	@ 0x40
 80026f2:	d10a      	bne.n	800270a <I2C_MasterReceive_RXNE+0xfe>
          hi2c->Mode = HAL_I2C_MODE_NONE;
 80026f4:	687b      	ldr	r3, [r7, #4]
 80026f6:	2200      	movs	r2, #0
 80026f8:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
          hi2c->PreviousState = I2C_STATE_NONE;
 80026fc:	687b      	ldr	r3, [r7, #4]
 80026fe:	2200      	movs	r2, #0
 8002700:	631a      	str	r2, [r3, #48]	@ 0x30
          HAL_I2C_MemRxCpltCallback(hi2c);
 8002702:	6878      	ldr	r0, [r7, #4]
 8002704:	f7ff fdba 	bl	800227c <HAL_I2C_MemRxCpltCallback>
      if (I2C_WaitOnSTOPRequestThroughIT(hi2c) == HAL_OK)
 8002708:	e044      	b.n	8002794 <I2C_MasterReceive_RXNE+0x188>
          hi2c->Mode = HAL_I2C_MODE_NONE;
 800270a:	687b      	ldr	r3, [r7, #4]
 800270c:	2200      	movs	r2, #0
 800270e:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
          if ((CurrentXferOptions == I2C_FIRST_AND_LAST_FRAME) || (CurrentXferOptions == I2C_LAST_FRAME))
 8002712:	68fb      	ldr	r3, [r7, #12]
 8002714:	2b08      	cmp	r3, #8
 8002716:	d002      	beq.n	800271e <I2C_MasterReceive_RXNE+0x112>
 8002718:	68fb      	ldr	r3, [r7, #12]
 800271a:	2b20      	cmp	r3, #32
 800271c:	d103      	bne.n	8002726 <I2C_MasterReceive_RXNE+0x11a>
            hi2c->PreviousState = I2C_STATE_NONE;
 800271e:	687b      	ldr	r3, [r7, #4]
 8002720:	2200      	movs	r2, #0
 8002722:	631a      	str	r2, [r3, #48]	@ 0x30
 8002724:	e002      	b.n	800272c <I2C_MasterReceive_RXNE+0x120>
            hi2c->PreviousState = I2C_STATE_MASTER_BUSY_RX;
 8002726:	687b      	ldr	r3, [r7, #4]
 8002728:	2212      	movs	r2, #18
 800272a:	631a      	str	r2, [r3, #48]	@ 0x30
          HAL_I2C_MasterRxCpltCallback(hi2c);
 800272c:	6878      	ldr	r0, [r7, #4]
 800272e:	f7ff fd65 	bl	80021fc <HAL_I2C_MasterRxCpltCallback>
      if (I2C_WaitOnSTOPRequestThroughIT(hi2c) == HAL_OK)
 8002732:	e02f      	b.n	8002794 <I2C_MasterReceive_RXNE+0x188>
        __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_BUF | I2C_IT_ERR);
 8002734:	687b      	ldr	r3, [r7, #4]
 8002736:	681b      	ldr	r3, [r3, #0]
 8002738:	685a      	ldr	r2, [r3, #4]
 800273a:	687b      	ldr	r3, [r7, #4]
 800273c:	681b      	ldr	r3, [r3, #0]
 800273e:	f422 62e0 	bic.w	r2, r2, #1792	@ 0x700
 8002742:	605a      	str	r2, [r3, #4]
        *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8002744:	687b      	ldr	r3, [r7, #4]
 8002746:	681b      	ldr	r3, [r3, #0]
 8002748:	691a      	ldr	r2, [r3, #16]
 800274a:	687b      	ldr	r3, [r7, #4]
 800274c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800274e:	b2d2      	uxtb	r2, r2
 8002750:	701a      	strb	r2, [r3, #0]
        hi2c->pBuffPtr++;
 8002752:	687b      	ldr	r3, [r7, #4]
 8002754:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002756:	1c5a      	adds	r2, r3, #1
 8002758:	687b      	ldr	r3, [r7, #4]
 800275a:	625a      	str	r2, [r3, #36]	@ 0x24
        hi2c->XferCount--;
 800275c:	687b      	ldr	r3, [r7, #4]
 800275e:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8002760:	b29b      	uxth	r3, r3
 8002762:	3b01      	subs	r3, #1
 8002764:	b29a      	uxth	r2, r3
 8002766:	687b      	ldr	r3, [r7, #4]
 8002768:	855a      	strh	r2, [r3, #42]	@ 0x2a
        hi2c->State = HAL_I2C_STATE_READY;
 800276a:	687b      	ldr	r3, [r7, #4]
 800276c:	2220      	movs	r2, #32
 800276e:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
        hi2c->Mode = HAL_I2C_MODE_NONE;
 8002772:	687b      	ldr	r3, [r7, #4]
 8002774:	2200      	movs	r2, #0
 8002776:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
        HAL_I2C_ErrorCallback(hi2c);
 800277a:	6878      	ldr	r0, [r7, #4]
 800277c:	f7ff fd88 	bl	8002290 <HAL_I2C_ErrorCallback>
      if (I2C_WaitOnSTOPRequestThroughIT(hi2c) == HAL_OK)
 8002780:	e008      	b.n	8002794 <I2C_MasterReceive_RXNE+0x188>
      __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_BUF);
 8002782:	687b      	ldr	r3, [r7, #4]
 8002784:	681b      	ldr	r3, [r3, #0]
 8002786:	685a      	ldr	r2, [r3, #4]
 8002788:	687b      	ldr	r3, [r7, #4]
 800278a:	681b      	ldr	r3, [r3, #0]
 800278c:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 8002790:	605a      	str	r2, [r3, #4]
}
 8002792:	e7ff      	b.n	8002794 <I2C_MasterReceive_RXNE+0x188>
 8002794:	bf00      	nop
 8002796:	3710      	adds	r7, #16
 8002798:	46bd      	mov	sp, r7
 800279a:	bd80      	pop	{r7, pc}

0800279c <I2C_MasterReceive_BTF>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_MasterReceive_BTF(I2C_HandleTypeDef *hi2c)
{
 800279c:	b580      	push	{r7, lr}
 800279e:	b084      	sub	sp, #16
 80027a0:	af00      	add	r7, sp, #0
 80027a2:	6078      	str	r0, [r7, #4]
  /* Declaration of temporary variables to prevent undefined behavior of volatile usage */
  uint32_t CurrentXferOptions = hi2c->XferOptions;
 80027a4:	687b      	ldr	r3, [r7, #4]
 80027a6:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80027a8:	60fb      	str	r3, [r7, #12]

  if (hi2c->XferCount == 4U)
 80027aa:	687b      	ldr	r3, [r7, #4]
 80027ac:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 80027ae:	b29b      	uxth	r3, r3
 80027b0:	2b04      	cmp	r3, #4
 80027b2:	d11b      	bne.n	80027ec <I2C_MasterReceive_BTF+0x50>
  {
    /* Disable BUF interrupt, this help to treat correctly the last 2 bytes
       on BTF subroutine if there is a reception delay between N-1 and N byte */
    __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_BUF);
 80027b4:	687b      	ldr	r3, [r7, #4]
 80027b6:	681b      	ldr	r3, [r3, #0]
 80027b8:	685a      	ldr	r2, [r3, #4]
 80027ba:	687b      	ldr	r3, [r7, #4]
 80027bc:	681b      	ldr	r3, [r3, #0]
 80027be:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 80027c2:	605a      	str	r2, [r3, #4]

    /* Read data from DR */
    *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 80027c4:	687b      	ldr	r3, [r7, #4]
 80027c6:	681b      	ldr	r3, [r3, #0]
 80027c8:	691a      	ldr	r2, [r3, #16]
 80027ca:	687b      	ldr	r3, [r7, #4]
 80027cc:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80027ce:	b2d2      	uxtb	r2, r2
 80027d0:	701a      	strb	r2, [r3, #0]

    /* Increment Buffer pointer */
    hi2c->pBuffPtr++;
 80027d2:	687b      	ldr	r3, [r7, #4]
 80027d4:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80027d6:	1c5a      	adds	r2, r3, #1
 80027d8:	687b      	ldr	r3, [r7, #4]
 80027da:	625a      	str	r2, [r3, #36]	@ 0x24

    /* Update counter */
    hi2c->XferCount--;
 80027dc:	687b      	ldr	r3, [r7, #4]
 80027de:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 80027e0:	b29b      	uxth	r3, r3
 80027e2:	3b01      	subs	r3, #1
 80027e4:	b29a      	uxth	r2, r3
 80027e6:	687b      	ldr	r3, [r7, #4]
 80027e8:	855a      	strh	r2, [r3, #42]	@ 0x2a
    hi2c->pBuffPtr++;

    /* Update counter */
    hi2c->XferCount--;
  }
}
 80027ea:	e0c8      	b.n	800297e <I2C_MasterReceive_BTF+0x1e2>
  else if (hi2c->XferCount == 3U)
 80027ec:	687b      	ldr	r3, [r7, #4]
 80027ee:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 80027f0:	b29b      	uxth	r3, r3
 80027f2:	2b03      	cmp	r3, #3
 80027f4:	d129      	bne.n	800284a <I2C_MasterReceive_BTF+0xae>
    __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_BUF);
 80027f6:	687b      	ldr	r3, [r7, #4]
 80027f8:	681b      	ldr	r3, [r3, #0]
 80027fa:	685a      	ldr	r2, [r3, #4]
 80027fc:	687b      	ldr	r3, [r7, #4]
 80027fe:	681b      	ldr	r3, [r3, #0]
 8002800:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 8002804:	605a      	str	r2, [r3, #4]
    if ((CurrentXferOptions != I2C_NEXT_FRAME) && (CurrentXferOptions != I2C_FIRST_AND_NEXT_FRAME))
 8002806:	68fb      	ldr	r3, [r7, #12]
 8002808:	2b04      	cmp	r3, #4
 800280a:	d00a      	beq.n	8002822 <I2C_MasterReceive_BTF+0x86>
 800280c:	68fb      	ldr	r3, [r7, #12]
 800280e:	2b02      	cmp	r3, #2
 8002810:	d007      	beq.n	8002822 <I2C_MasterReceive_BTF+0x86>
      CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8002812:	687b      	ldr	r3, [r7, #4]
 8002814:	681b      	ldr	r3, [r3, #0]
 8002816:	681a      	ldr	r2, [r3, #0]
 8002818:	687b      	ldr	r3, [r7, #4]
 800281a:	681b      	ldr	r3, [r3, #0]
 800281c:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 8002820:	601a      	str	r2, [r3, #0]
    *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8002822:	687b      	ldr	r3, [r7, #4]
 8002824:	681b      	ldr	r3, [r3, #0]
 8002826:	691a      	ldr	r2, [r3, #16]
 8002828:	687b      	ldr	r3, [r7, #4]
 800282a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800282c:	b2d2      	uxtb	r2, r2
 800282e:	701a      	strb	r2, [r3, #0]
    hi2c->pBuffPtr++;
 8002830:	687b      	ldr	r3, [r7, #4]
 8002832:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002834:	1c5a      	adds	r2, r3, #1
 8002836:	687b      	ldr	r3, [r7, #4]
 8002838:	625a      	str	r2, [r3, #36]	@ 0x24
    hi2c->XferCount--;
 800283a:	687b      	ldr	r3, [r7, #4]
 800283c:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 800283e:	b29b      	uxth	r3, r3
 8002840:	3b01      	subs	r3, #1
 8002842:	b29a      	uxth	r2, r3
 8002844:	687b      	ldr	r3, [r7, #4]
 8002846:	855a      	strh	r2, [r3, #42]	@ 0x2a
}
 8002848:	e099      	b.n	800297e <I2C_MasterReceive_BTF+0x1e2>
  else if (hi2c->XferCount == 2U)
 800284a:	687b      	ldr	r3, [r7, #4]
 800284c:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 800284e:	b29b      	uxth	r3, r3
 8002850:	2b02      	cmp	r3, #2
 8002852:	f040 8081 	bne.w	8002958 <I2C_MasterReceive_BTF+0x1bc>
    if ((CurrentXferOptions == I2C_FIRST_FRAME) || (CurrentXferOptions == I2C_LAST_FRAME_NO_STOP))
 8002856:	68fb      	ldr	r3, [r7, #12]
 8002858:	2b01      	cmp	r3, #1
 800285a:	d002      	beq.n	8002862 <I2C_MasterReceive_BTF+0xc6>
 800285c:	68fb      	ldr	r3, [r7, #12]
 800285e:	2b10      	cmp	r3, #16
 8002860:	d108      	bne.n	8002874 <I2C_MasterReceive_BTF+0xd8>
      CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8002862:	687b      	ldr	r3, [r7, #4]
 8002864:	681b      	ldr	r3, [r3, #0]
 8002866:	681a      	ldr	r2, [r3, #0]
 8002868:	687b      	ldr	r3, [r7, #4]
 800286a:	681b      	ldr	r3, [r3, #0]
 800286c:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 8002870:	601a      	str	r2, [r3, #0]
 8002872:	e019      	b.n	80028a8 <I2C_MasterReceive_BTF+0x10c>
    else if ((CurrentXferOptions == I2C_NEXT_FRAME) || (CurrentXferOptions == I2C_FIRST_AND_NEXT_FRAME))
 8002874:	68fb      	ldr	r3, [r7, #12]
 8002876:	2b04      	cmp	r3, #4
 8002878:	d002      	beq.n	8002880 <I2C_MasterReceive_BTF+0xe4>
 800287a:	68fb      	ldr	r3, [r7, #12]
 800287c:	2b02      	cmp	r3, #2
 800287e:	d108      	bne.n	8002892 <I2C_MasterReceive_BTF+0xf6>
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8002880:	687b      	ldr	r3, [r7, #4]
 8002882:	681b      	ldr	r3, [r3, #0]
 8002884:	681a      	ldr	r2, [r3, #0]
 8002886:	687b      	ldr	r3, [r7, #4]
 8002888:	681b      	ldr	r3, [r3, #0]
 800288a:	f442 6280 	orr.w	r2, r2, #1024	@ 0x400
 800288e:	601a      	str	r2, [r3, #0]
 8002890:	e00a      	b.n	80028a8 <I2C_MasterReceive_BTF+0x10c>
    else if (CurrentXferOptions != I2C_LAST_FRAME_NO_STOP)
 8002892:	68fb      	ldr	r3, [r7, #12]
 8002894:	2b10      	cmp	r3, #16
 8002896:	d007      	beq.n	80028a8 <I2C_MasterReceive_BTF+0x10c>
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8002898:	687b      	ldr	r3, [r7, #4]
 800289a:	681b      	ldr	r3, [r3, #0]
 800289c:	681a      	ldr	r2, [r3, #0]
 800289e:	687b      	ldr	r3, [r7, #4]
 80028a0:	681b      	ldr	r3, [r3, #0]
 80028a2:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 80028a6:	601a      	str	r2, [r3, #0]
    *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 80028a8:	687b      	ldr	r3, [r7, #4]
 80028aa:	681b      	ldr	r3, [r3, #0]
 80028ac:	691a      	ldr	r2, [r3, #16]
 80028ae:	687b      	ldr	r3, [r7, #4]
 80028b0:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80028b2:	b2d2      	uxtb	r2, r2
 80028b4:	701a      	strb	r2, [r3, #0]
    hi2c->pBuffPtr++;
 80028b6:	687b      	ldr	r3, [r7, #4]
 80028b8:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80028ba:	1c5a      	adds	r2, r3, #1
 80028bc:	687b      	ldr	r3, [r7, #4]
 80028be:	625a      	str	r2, [r3, #36]	@ 0x24
    hi2c->XferCount--;
 80028c0:	687b      	ldr	r3, [r7, #4]
 80028c2:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 80028c4:	b29b      	uxth	r3, r3
 80028c6:	3b01      	subs	r3, #1
 80028c8:	b29a      	uxth	r2, r3
 80028ca:	687b      	ldr	r3, [r7, #4]
 80028cc:	855a      	strh	r2, [r3, #42]	@ 0x2a
    *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 80028ce:	687b      	ldr	r3, [r7, #4]
 80028d0:	681b      	ldr	r3, [r3, #0]
 80028d2:	691a      	ldr	r2, [r3, #16]
 80028d4:	687b      	ldr	r3, [r7, #4]
 80028d6:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80028d8:	b2d2      	uxtb	r2, r2
 80028da:	701a      	strb	r2, [r3, #0]
    hi2c->pBuffPtr++;
 80028dc:	687b      	ldr	r3, [r7, #4]
 80028de:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80028e0:	1c5a      	adds	r2, r3, #1
 80028e2:	687b      	ldr	r3, [r7, #4]
 80028e4:	625a      	str	r2, [r3, #36]	@ 0x24
    hi2c->XferCount--;
 80028e6:	687b      	ldr	r3, [r7, #4]
 80028e8:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 80028ea:	b29b      	uxth	r3, r3
 80028ec:	3b01      	subs	r3, #1
 80028ee:	b29a      	uxth	r2, r3
 80028f0:	687b      	ldr	r3, [r7, #4]
 80028f2:	855a      	strh	r2, [r3, #42]	@ 0x2a
    __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_ERR);
 80028f4:	687b      	ldr	r3, [r7, #4]
 80028f6:	681b      	ldr	r3, [r3, #0]
 80028f8:	685a      	ldr	r2, [r3, #4]
 80028fa:	687b      	ldr	r3, [r7, #4]
 80028fc:	681b      	ldr	r3, [r3, #0]
 80028fe:	f422 7240 	bic.w	r2, r2, #768	@ 0x300
 8002902:	605a      	str	r2, [r3, #4]
    hi2c->State = HAL_I2C_STATE_READY;
 8002904:	687b      	ldr	r3, [r7, #4]
 8002906:	2220      	movs	r2, #32
 8002908:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
    if (hi2c->Mode == HAL_I2C_MODE_MEM)
 800290c:	687b      	ldr	r3, [r7, #4]
 800290e:	f893 303e 	ldrb.w	r3, [r3, #62]	@ 0x3e
 8002912:	b2db      	uxtb	r3, r3
 8002914:	2b40      	cmp	r3, #64	@ 0x40
 8002916:	d10a      	bne.n	800292e <I2C_MasterReceive_BTF+0x192>
      hi2c->Mode = HAL_I2C_MODE_NONE;
 8002918:	687b      	ldr	r3, [r7, #4]
 800291a:	2200      	movs	r2, #0
 800291c:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
      hi2c->PreviousState = I2C_STATE_NONE;
 8002920:	687b      	ldr	r3, [r7, #4]
 8002922:	2200      	movs	r2, #0
 8002924:	631a      	str	r2, [r3, #48]	@ 0x30
      HAL_I2C_MemRxCpltCallback(hi2c);
 8002926:	6878      	ldr	r0, [r7, #4]
 8002928:	f7ff fca8 	bl	800227c <HAL_I2C_MemRxCpltCallback>
}
 800292c:	e027      	b.n	800297e <I2C_MasterReceive_BTF+0x1e2>
      hi2c->Mode = HAL_I2C_MODE_NONE;
 800292e:	687b      	ldr	r3, [r7, #4]
 8002930:	2200      	movs	r2, #0
 8002932:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
      if ((CurrentXferOptions == I2C_FIRST_AND_LAST_FRAME) || (CurrentXferOptions == I2C_LAST_FRAME))
 8002936:	68fb      	ldr	r3, [r7, #12]
 8002938:	2b08      	cmp	r3, #8
 800293a:	d002      	beq.n	8002942 <I2C_MasterReceive_BTF+0x1a6>
 800293c:	68fb      	ldr	r3, [r7, #12]
 800293e:	2b20      	cmp	r3, #32
 8002940:	d103      	bne.n	800294a <I2C_MasterReceive_BTF+0x1ae>
        hi2c->PreviousState = I2C_STATE_NONE;
 8002942:	687b      	ldr	r3, [r7, #4]
 8002944:	2200      	movs	r2, #0
 8002946:	631a      	str	r2, [r3, #48]	@ 0x30
 8002948:	e002      	b.n	8002950 <I2C_MasterReceive_BTF+0x1b4>
        hi2c->PreviousState = I2C_STATE_MASTER_BUSY_RX;
 800294a:	687b      	ldr	r3, [r7, #4]
 800294c:	2212      	movs	r2, #18
 800294e:	631a      	str	r2, [r3, #48]	@ 0x30
      HAL_I2C_MasterRxCpltCallback(hi2c);
 8002950:	6878      	ldr	r0, [r7, #4]
 8002952:	f7ff fc53 	bl	80021fc <HAL_I2C_MasterRxCpltCallback>
}
 8002956:	e012      	b.n	800297e <I2C_MasterReceive_BTF+0x1e2>
    *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8002958:	687b      	ldr	r3, [r7, #4]
 800295a:	681b      	ldr	r3, [r3, #0]
 800295c:	691a      	ldr	r2, [r3, #16]
 800295e:	687b      	ldr	r3, [r7, #4]
 8002960:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002962:	b2d2      	uxtb	r2, r2
 8002964:	701a      	strb	r2, [r3, #0]
    hi2c->pBuffPtr++;
 8002966:	687b      	ldr	r3, [r7, #4]
 8002968:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800296a:	1c5a      	adds	r2, r3, #1
 800296c:	687b      	ldr	r3, [r7, #4]
 800296e:	625a      	str	r2, [r3, #36]	@ 0x24
    hi2c->XferCount--;
 8002970:	687b      	ldr	r3, [r7, #4]
 8002972:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8002974:	b29b      	uxth	r3, r3
 8002976:	3b01      	subs	r3, #1
 8002978:	b29a      	uxth	r2, r3
 800297a:	687b      	ldr	r3, [r7, #4]
 800297c:	855a      	strh	r2, [r3, #42]	@ 0x2a
}
 800297e:	bf00      	nop
 8002980:	3710      	adds	r7, #16
 8002982:	46bd      	mov	sp, r7
 8002984:	bd80      	pop	{r7, pc}

08002986 <I2C_Master_SB>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_Master_SB(I2C_HandleTypeDef *hi2c)
{
 8002986:	b480      	push	{r7}
 8002988:	b083      	sub	sp, #12
 800298a:	af00      	add	r7, sp, #0
 800298c:	6078      	str	r0, [r7, #4]
  if (hi2c->Mode == HAL_I2C_MODE_MEM)
 800298e:	687b      	ldr	r3, [r7, #4]
 8002990:	f893 303e 	ldrb.w	r3, [r3, #62]	@ 0x3e
 8002994:	b2db      	uxtb	r3, r3
 8002996:	2b40      	cmp	r3, #64	@ 0x40
 8002998:	d117      	bne.n	80029ca <I2C_Master_SB+0x44>
  {
    if (hi2c->EventCount == 0U)
 800299a:	687b      	ldr	r3, [r7, #4]
 800299c:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 800299e:	2b00      	cmp	r3, #0
 80029a0:	d109      	bne.n	80029b6 <I2C_Master_SB+0x30>
    {
      /* Send slave address */
      hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(hi2c->Devaddress);
 80029a2:	687b      	ldr	r3, [r7, #4]
 80029a4:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80029a6:	b2db      	uxtb	r3, r3
 80029a8:	461a      	mov	r2, r3
 80029aa:	687b      	ldr	r3, [r7, #4]
 80029ac:	681b      	ldr	r3, [r3, #0]
 80029ae:	f002 02fe 	and.w	r2, r2, #254	@ 0xfe
 80029b2:	611a      	str	r2, [r3, #16]
      {
        /* Do nothing */
      }
    }
  }
}
 80029b4:	e067      	b.n	8002a86 <I2C_Master_SB+0x100>
      hi2c->Instance->DR = I2C_7BIT_ADD_READ(hi2c->Devaddress);
 80029b6:	687b      	ldr	r3, [r7, #4]
 80029b8:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80029ba:	b2db      	uxtb	r3, r3
 80029bc:	f043 0301 	orr.w	r3, r3, #1
 80029c0:	b2da      	uxtb	r2, r3
 80029c2:	687b      	ldr	r3, [r7, #4]
 80029c4:	681b      	ldr	r3, [r3, #0]
 80029c6:	611a      	str	r2, [r3, #16]
}
 80029c8:	e05d      	b.n	8002a86 <I2C_Master_SB+0x100>
    if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 80029ca:	687b      	ldr	r3, [r7, #4]
 80029cc:	691b      	ldr	r3, [r3, #16]
 80029ce:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 80029d2:	d133      	bne.n	8002a3c <I2C_Master_SB+0xb6>
      if (hi2c->State == HAL_I2C_STATE_BUSY_TX)
 80029d4:	687b      	ldr	r3, [r7, #4]
 80029d6:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 80029da:	b2db      	uxtb	r3, r3
 80029dc:	2b21      	cmp	r3, #33	@ 0x21
 80029de:	d109      	bne.n	80029f4 <I2C_Master_SB+0x6e>
        hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(hi2c->Devaddress);
 80029e0:	687b      	ldr	r3, [r7, #4]
 80029e2:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80029e4:	b2db      	uxtb	r3, r3
 80029e6:	461a      	mov	r2, r3
 80029e8:	687b      	ldr	r3, [r7, #4]
 80029ea:	681b      	ldr	r3, [r3, #0]
 80029ec:	f002 02fe 	and.w	r2, r2, #254	@ 0xfe
 80029f0:	611a      	str	r2, [r3, #16]
 80029f2:	e008      	b.n	8002a06 <I2C_Master_SB+0x80>
        hi2c->Instance->DR = I2C_7BIT_ADD_READ(hi2c->Devaddress);
 80029f4:	687b      	ldr	r3, [r7, #4]
 80029f6:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80029f8:	b2db      	uxtb	r3, r3
 80029fa:	f043 0301 	orr.w	r3, r3, #1
 80029fe:	b2da      	uxtb	r2, r3
 8002a00:	687b      	ldr	r3, [r7, #4]
 8002a02:	681b      	ldr	r3, [r3, #0]
 8002a04:	611a      	str	r2, [r3, #16]
      if (((hi2c->hdmatx != NULL) && (hi2c->hdmatx->XferCpltCallback != NULL))
 8002a06:	687b      	ldr	r3, [r7, #4]
 8002a08:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8002a0a:	2b00      	cmp	r3, #0
 8002a0c:	d004      	beq.n	8002a18 <I2C_Master_SB+0x92>
 8002a0e:	687b      	ldr	r3, [r7, #4]
 8002a10:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8002a12:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8002a14:	2b00      	cmp	r3, #0
 8002a16:	d108      	bne.n	8002a2a <I2C_Master_SB+0xa4>
          || ((hi2c->hdmarx != NULL) && (hi2c->hdmarx->XferCpltCallback != NULL)))
 8002a18:	687b      	ldr	r3, [r7, #4]
 8002a1a:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8002a1c:	2b00      	cmp	r3, #0
 8002a1e:	d032      	beq.n	8002a86 <I2C_Master_SB+0x100>
 8002a20:	687b      	ldr	r3, [r7, #4]
 8002a22:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8002a24:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8002a26:	2b00      	cmp	r3, #0
 8002a28:	d02d      	beq.n	8002a86 <I2C_Master_SB+0x100>
        SET_BIT(hi2c->Instance->CR2, I2C_CR2_DMAEN);
 8002a2a:	687b      	ldr	r3, [r7, #4]
 8002a2c:	681b      	ldr	r3, [r3, #0]
 8002a2e:	685a      	ldr	r2, [r3, #4]
 8002a30:	687b      	ldr	r3, [r7, #4]
 8002a32:	681b      	ldr	r3, [r3, #0]
 8002a34:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 8002a38:	605a      	str	r2, [r3, #4]
}
 8002a3a:	e024      	b.n	8002a86 <I2C_Master_SB+0x100>
      if (hi2c->EventCount == 0U)
 8002a3c:	687b      	ldr	r3, [r7, #4]
 8002a3e:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8002a40:	2b00      	cmp	r3, #0
 8002a42:	d10e      	bne.n	8002a62 <I2C_Master_SB+0xdc>
        hi2c->Instance->DR = I2C_10BIT_HEADER_WRITE(hi2c->Devaddress);
 8002a44:	687b      	ldr	r3, [r7, #4]
 8002a46:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8002a48:	b29b      	uxth	r3, r3
 8002a4a:	11db      	asrs	r3, r3, #7
 8002a4c:	b2db      	uxtb	r3, r3
 8002a4e:	f003 0306 	and.w	r3, r3, #6
 8002a52:	b2db      	uxtb	r3, r3
 8002a54:	f063 030f 	orn	r3, r3, #15
 8002a58:	b2da      	uxtb	r2, r3
 8002a5a:	687b      	ldr	r3, [r7, #4]
 8002a5c:	681b      	ldr	r3, [r3, #0]
 8002a5e:	611a      	str	r2, [r3, #16]
}
 8002a60:	e011      	b.n	8002a86 <I2C_Master_SB+0x100>
      else if (hi2c->EventCount == 1U)
 8002a62:	687b      	ldr	r3, [r7, #4]
 8002a64:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8002a66:	2b01      	cmp	r3, #1
 8002a68:	d10d      	bne.n	8002a86 <I2C_Master_SB+0x100>
        hi2c->Instance->DR = I2C_10BIT_HEADER_READ(hi2c->Devaddress);
 8002a6a:	687b      	ldr	r3, [r7, #4]
 8002a6c:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8002a6e:	b29b      	uxth	r3, r3
 8002a70:	11db      	asrs	r3, r3, #7
 8002a72:	b2db      	uxtb	r3, r3
 8002a74:	f003 0306 	and.w	r3, r3, #6
 8002a78:	b2db      	uxtb	r3, r3
 8002a7a:	f063 030e 	orn	r3, r3, #14
 8002a7e:	b2da      	uxtb	r2, r3
 8002a80:	687b      	ldr	r3, [r7, #4]
 8002a82:	681b      	ldr	r3, [r3, #0]
 8002a84:	611a      	str	r2, [r3, #16]
}
 8002a86:	bf00      	nop
 8002a88:	370c      	adds	r7, #12
 8002a8a:	46bd      	mov	sp, r7
 8002a8c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002a90:	4770      	bx	lr

08002a92 <I2C_Master_ADD10>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_Master_ADD10(I2C_HandleTypeDef *hi2c)
{
 8002a92:	b480      	push	{r7}
 8002a94:	b083      	sub	sp, #12
 8002a96:	af00      	add	r7, sp, #0
 8002a98:	6078      	str	r0, [r7, #4]
  /* Send slave address */
  hi2c->Instance->DR = I2C_10BIT_ADDRESS(hi2c->Devaddress);
 8002a9a:	687b      	ldr	r3, [r7, #4]
 8002a9c:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8002a9e:	b2da      	uxtb	r2, r3
 8002aa0:	687b      	ldr	r3, [r7, #4]
 8002aa2:	681b      	ldr	r3, [r3, #0]
 8002aa4:	611a      	str	r2, [r3, #16]

  if (((hi2c->hdmatx != NULL) && (hi2c->hdmatx->XferCpltCallback != NULL))
 8002aa6:	687b      	ldr	r3, [r7, #4]
 8002aa8:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8002aaa:	2b00      	cmp	r3, #0
 8002aac:	d004      	beq.n	8002ab8 <I2C_Master_ADD10+0x26>
 8002aae:	687b      	ldr	r3, [r7, #4]
 8002ab0:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8002ab2:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8002ab4:	2b00      	cmp	r3, #0
 8002ab6:	d108      	bne.n	8002aca <I2C_Master_ADD10+0x38>
      || ((hi2c->hdmarx != NULL) && (hi2c->hdmarx->XferCpltCallback != NULL)))
 8002ab8:	687b      	ldr	r3, [r7, #4]
 8002aba:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8002abc:	2b00      	cmp	r3, #0
 8002abe:	d00c      	beq.n	8002ada <I2C_Master_ADD10+0x48>
 8002ac0:	687b      	ldr	r3, [r7, #4]
 8002ac2:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8002ac4:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8002ac6:	2b00      	cmp	r3, #0
 8002ac8:	d007      	beq.n	8002ada <I2C_Master_ADD10+0x48>
  {
    /* Enable DMA Request */
    SET_BIT(hi2c->Instance->CR2, I2C_CR2_DMAEN);
 8002aca:	687b      	ldr	r3, [r7, #4]
 8002acc:	681b      	ldr	r3, [r3, #0]
 8002ace:	685a      	ldr	r2, [r3, #4]
 8002ad0:	687b      	ldr	r3, [r7, #4]
 8002ad2:	681b      	ldr	r3, [r3, #0]
 8002ad4:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 8002ad8:	605a      	str	r2, [r3, #4]
  }
}
 8002ada:	bf00      	nop
 8002adc:	370c      	adds	r7, #12
 8002ade:	46bd      	mov	sp, r7
 8002ae0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002ae4:	4770      	bx	lr

08002ae6 <I2C_Master_ADDR>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_Master_ADDR(I2C_HandleTypeDef *hi2c)
{
 8002ae6:	b480      	push	{r7}
 8002ae8:	b091      	sub	sp, #68	@ 0x44
 8002aea:	af00      	add	r7, sp, #0
 8002aec:	6078      	str	r0, [r7, #4]
  /* Declaration of temporary variable to prevent undefined behavior of volatile usage */
  HAL_I2C_ModeTypeDef CurrentMode       = hi2c->Mode;
 8002aee:	687b      	ldr	r3, [r7, #4]
 8002af0:	f893 303e 	ldrb.w	r3, [r3, #62]	@ 0x3e
 8002af4:	f887 303f 	strb.w	r3, [r7, #63]	@ 0x3f
  uint32_t CurrentXferOptions           = hi2c->XferOptions;
 8002af8:	687b      	ldr	r3, [r7, #4]
 8002afa:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8002afc:	63bb      	str	r3, [r7, #56]	@ 0x38
  uint32_t Prev_State                   = hi2c->PreviousState;
 8002afe:	687b      	ldr	r3, [r7, #4]
 8002b00:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002b02:	637b      	str	r3, [r7, #52]	@ 0x34

  if (hi2c->State == HAL_I2C_STATE_BUSY_RX)
 8002b04:	687b      	ldr	r3, [r7, #4]
 8002b06:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8002b0a:	b2db      	uxtb	r3, r3
 8002b0c:	2b22      	cmp	r3, #34	@ 0x22
 8002b0e:	f040 8169 	bne.w	8002de4 <I2C_Master_ADDR+0x2fe>
  {
    if ((hi2c->EventCount == 0U) && (CurrentMode == HAL_I2C_MODE_MEM))
 8002b12:	687b      	ldr	r3, [r7, #4]
 8002b14:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8002b16:	2b00      	cmp	r3, #0
 8002b18:	d10f      	bne.n	8002b3a <I2C_Master_ADDR+0x54>
 8002b1a:	f897 303f 	ldrb.w	r3, [r7, #63]	@ 0x3f
 8002b1e:	2b40      	cmp	r3, #64	@ 0x40
 8002b20:	d10b      	bne.n	8002b3a <I2C_Master_ADDR+0x54>
    {
      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8002b22:	2300      	movs	r3, #0
 8002b24:	633b      	str	r3, [r7, #48]	@ 0x30
 8002b26:	687b      	ldr	r3, [r7, #4]
 8002b28:	681b      	ldr	r3, [r3, #0]
 8002b2a:	695b      	ldr	r3, [r3, #20]
 8002b2c:	633b      	str	r3, [r7, #48]	@ 0x30
 8002b2e:	687b      	ldr	r3, [r7, #4]
 8002b30:	681b      	ldr	r3, [r3, #0]
 8002b32:	699b      	ldr	r3, [r3, #24]
 8002b34:	633b      	str	r3, [r7, #48]	@ 0x30
 8002b36:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8002b38:	e160      	b.n	8002dfc <I2C_Master_ADDR+0x316>
    }
    else if ((hi2c->EventCount == 0U) && (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_10BIT))
 8002b3a:	687b      	ldr	r3, [r7, #4]
 8002b3c:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8002b3e:	2b00      	cmp	r3, #0
 8002b40:	d11d      	bne.n	8002b7e <I2C_Master_ADDR+0x98>
 8002b42:	687b      	ldr	r3, [r7, #4]
 8002b44:	691b      	ldr	r3, [r3, #16]
 8002b46:	f5b3 4f40 	cmp.w	r3, #49152	@ 0xc000
 8002b4a:	d118      	bne.n	8002b7e <I2C_Master_ADDR+0x98>
    {
      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8002b4c:	2300      	movs	r3, #0
 8002b4e:	62fb      	str	r3, [r7, #44]	@ 0x2c
 8002b50:	687b      	ldr	r3, [r7, #4]
 8002b52:	681b      	ldr	r3, [r3, #0]
 8002b54:	695b      	ldr	r3, [r3, #20]
 8002b56:	62fb      	str	r3, [r7, #44]	@ 0x2c
 8002b58:	687b      	ldr	r3, [r7, #4]
 8002b5a:	681b      	ldr	r3, [r3, #0]
 8002b5c:	699b      	ldr	r3, [r3, #24]
 8002b5e:	62fb      	str	r3, [r7, #44]	@ 0x2c
 8002b60:	6afb      	ldr	r3, [r7, #44]	@ 0x2c

      /* Generate Restart */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8002b62:	687b      	ldr	r3, [r7, #4]
 8002b64:	681b      	ldr	r3, [r3, #0]
 8002b66:	681a      	ldr	r2, [r3, #0]
 8002b68:	687b      	ldr	r3, [r7, #4]
 8002b6a:	681b      	ldr	r3, [r3, #0]
 8002b6c:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 8002b70:	601a      	str	r2, [r3, #0]

      hi2c->EventCount++;
 8002b72:	687b      	ldr	r3, [r7, #4]
 8002b74:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8002b76:	1c5a      	adds	r2, r3, #1
 8002b78:	687b      	ldr	r3, [r7, #4]
 8002b7a:	651a      	str	r2, [r3, #80]	@ 0x50
 8002b7c:	e13e      	b.n	8002dfc <I2C_Master_ADDR+0x316>
    }
    else
    {
      if (hi2c->XferCount == 0U)
 8002b7e:	687b      	ldr	r3, [r7, #4]
 8002b80:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8002b82:	b29b      	uxth	r3, r3
 8002b84:	2b00      	cmp	r3, #0
 8002b86:	d113      	bne.n	8002bb0 <I2C_Master_ADDR+0xca>
      {
        /* Clear ADDR flag */
        __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8002b88:	2300      	movs	r3, #0
 8002b8a:	62bb      	str	r3, [r7, #40]	@ 0x28
 8002b8c:	687b      	ldr	r3, [r7, #4]
 8002b8e:	681b      	ldr	r3, [r3, #0]
 8002b90:	695b      	ldr	r3, [r3, #20]
 8002b92:	62bb      	str	r3, [r7, #40]	@ 0x28
 8002b94:	687b      	ldr	r3, [r7, #4]
 8002b96:	681b      	ldr	r3, [r3, #0]
 8002b98:	699b      	ldr	r3, [r3, #24]
 8002b9a:	62bb      	str	r3, [r7, #40]	@ 0x28
 8002b9c:	6abb      	ldr	r3, [r7, #40]	@ 0x28

        /* Generate Stop */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8002b9e:	687b      	ldr	r3, [r7, #4]
 8002ba0:	681b      	ldr	r3, [r3, #0]
 8002ba2:	681a      	ldr	r2, [r3, #0]
 8002ba4:	687b      	ldr	r3, [r7, #4]
 8002ba6:	681b      	ldr	r3, [r3, #0]
 8002ba8:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8002bac:	601a      	str	r2, [r3, #0]
 8002bae:	e115      	b.n	8002ddc <I2C_Master_ADDR+0x2f6>
      }
      else if (hi2c->XferCount == 1U)
 8002bb0:	687b      	ldr	r3, [r7, #4]
 8002bb2:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8002bb4:	b29b      	uxth	r3, r3
 8002bb6:	2b01      	cmp	r3, #1
 8002bb8:	f040 808a 	bne.w	8002cd0 <I2C_Master_ADDR+0x1ea>
      {
        if (CurrentXferOptions == I2C_NO_OPTION_FRAME)
 8002bbc:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8002bbe:	f513 3f80 	cmn.w	r3, #65536	@ 0x10000
 8002bc2:	d137      	bne.n	8002c34 <I2C_Master_ADDR+0x14e>
        {
          /* Disable Acknowledge */
          CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8002bc4:	687b      	ldr	r3, [r7, #4]
 8002bc6:	681b      	ldr	r3, [r3, #0]
 8002bc8:	681a      	ldr	r2, [r3, #0]
 8002bca:	687b      	ldr	r3, [r7, #4]
 8002bcc:	681b      	ldr	r3, [r3, #0]
 8002bce:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 8002bd2:	601a      	str	r2, [r3, #0]

          if ((hi2c->Instance->CR2 & I2C_CR2_DMAEN) == I2C_CR2_DMAEN)
 8002bd4:	687b      	ldr	r3, [r7, #4]
 8002bd6:	681b      	ldr	r3, [r3, #0]
 8002bd8:	685b      	ldr	r3, [r3, #4]
 8002bda:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 8002bde:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 8002be2:	d113      	bne.n	8002c0c <I2C_Master_ADDR+0x126>
          {
            /* Disable Acknowledge */
            CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8002be4:	687b      	ldr	r3, [r7, #4]
 8002be6:	681b      	ldr	r3, [r3, #0]
 8002be8:	681a      	ldr	r2, [r3, #0]
 8002bea:	687b      	ldr	r3, [r7, #4]
 8002bec:	681b      	ldr	r3, [r3, #0]
 8002bee:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 8002bf2:	601a      	str	r2, [r3, #0]

            /* Clear ADDR flag */
            __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8002bf4:	2300      	movs	r3, #0
 8002bf6:	627b      	str	r3, [r7, #36]	@ 0x24
 8002bf8:	687b      	ldr	r3, [r7, #4]
 8002bfa:	681b      	ldr	r3, [r3, #0]
 8002bfc:	695b      	ldr	r3, [r3, #20]
 8002bfe:	627b      	str	r3, [r7, #36]	@ 0x24
 8002c00:	687b      	ldr	r3, [r7, #4]
 8002c02:	681b      	ldr	r3, [r3, #0]
 8002c04:	699b      	ldr	r3, [r3, #24]
 8002c06:	627b      	str	r3, [r7, #36]	@ 0x24
 8002c08:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002c0a:	e0e7      	b.n	8002ddc <I2C_Master_ADDR+0x2f6>
          }
          else
          {
            /* Clear ADDR flag */
            __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8002c0c:	2300      	movs	r3, #0
 8002c0e:	623b      	str	r3, [r7, #32]
 8002c10:	687b      	ldr	r3, [r7, #4]
 8002c12:	681b      	ldr	r3, [r3, #0]
 8002c14:	695b      	ldr	r3, [r3, #20]
 8002c16:	623b      	str	r3, [r7, #32]
 8002c18:	687b      	ldr	r3, [r7, #4]
 8002c1a:	681b      	ldr	r3, [r3, #0]
 8002c1c:	699b      	ldr	r3, [r3, #24]
 8002c1e:	623b      	str	r3, [r7, #32]
 8002c20:	6a3b      	ldr	r3, [r7, #32]

            /* Generate Stop */
            SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8002c22:	687b      	ldr	r3, [r7, #4]
 8002c24:	681b      	ldr	r3, [r3, #0]
 8002c26:	681a      	ldr	r2, [r3, #0]
 8002c28:	687b      	ldr	r3, [r7, #4]
 8002c2a:	681b      	ldr	r3, [r3, #0]
 8002c2c:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8002c30:	601a      	str	r2, [r3, #0]
 8002c32:	e0d3      	b.n	8002ddc <I2C_Master_ADDR+0x2f6>
          }
        }
        /* Prepare next transfer or stop current transfer */
        else if ((CurrentXferOptions != I2C_FIRST_AND_LAST_FRAME) && (CurrentXferOptions != I2C_LAST_FRAME) \
 8002c34:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8002c36:	2b08      	cmp	r3, #8
 8002c38:	d02e      	beq.n	8002c98 <I2C_Master_ADDR+0x1b2>
 8002c3a:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8002c3c:	2b20      	cmp	r3, #32
 8002c3e:	d02b      	beq.n	8002c98 <I2C_Master_ADDR+0x1b2>
                 && ((Prev_State != I2C_STATE_MASTER_BUSY_RX) || (CurrentXferOptions == I2C_FIRST_FRAME)))
 8002c40:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8002c42:	2b12      	cmp	r3, #18
 8002c44:	d102      	bne.n	8002c4c <I2C_Master_ADDR+0x166>
 8002c46:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8002c48:	2b01      	cmp	r3, #1
 8002c4a:	d125      	bne.n	8002c98 <I2C_Master_ADDR+0x1b2>
        {
          if ((CurrentXferOptions != I2C_NEXT_FRAME) && (CurrentXferOptions != I2C_FIRST_AND_NEXT_FRAME) && (CurrentXferOptions != I2C_LAST_FRAME_NO_STOP))
 8002c4c:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8002c4e:	2b04      	cmp	r3, #4
 8002c50:	d00e      	beq.n	8002c70 <I2C_Master_ADDR+0x18a>
 8002c52:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8002c54:	2b02      	cmp	r3, #2
 8002c56:	d00b      	beq.n	8002c70 <I2C_Master_ADDR+0x18a>
 8002c58:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8002c5a:	2b10      	cmp	r3, #16
 8002c5c:	d008      	beq.n	8002c70 <I2C_Master_ADDR+0x18a>
          {
            /* Disable Acknowledge */
            CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8002c5e:	687b      	ldr	r3, [r7, #4]
 8002c60:	681b      	ldr	r3, [r3, #0]
 8002c62:	681a      	ldr	r2, [r3, #0]
 8002c64:	687b      	ldr	r3, [r7, #4]
 8002c66:	681b      	ldr	r3, [r3, #0]
 8002c68:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 8002c6c:	601a      	str	r2, [r3, #0]
 8002c6e:	e007      	b.n	8002c80 <I2C_Master_ADDR+0x19a>
          }
          else
          {
            /* Enable Acknowledge */
            SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8002c70:	687b      	ldr	r3, [r7, #4]
 8002c72:	681b      	ldr	r3, [r3, #0]
 8002c74:	681a      	ldr	r2, [r3, #0]
 8002c76:	687b      	ldr	r3, [r7, #4]
 8002c78:	681b      	ldr	r3, [r3, #0]
 8002c7a:	f442 6280 	orr.w	r2, r2, #1024	@ 0x400
 8002c7e:	601a      	str	r2, [r3, #0]
          }

          /* Clear ADDR flag */
          __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8002c80:	2300      	movs	r3, #0
 8002c82:	61fb      	str	r3, [r7, #28]
 8002c84:	687b      	ldr	r3, [r7, #4]
 8002c86:	681b      	ldr	r3, [r3, #0]
 8002c88:	695b      	ldr	r3, [r3, #20]
 8002c8a:	61fb      	str	r3, [r7, #28]
 8002c8c:	687b      	ldr	r3, [r7, #4]
 8002c8e:	681b      	ldr	r3, [r3, #0]
 8002c90:	699b      	ldr	r3, [r3, #24]
 8002c92:	61fb      	str	r3, [r7, #28]
 8002c94:	69fb      	ldr	r3, [r7, #28]
 8002c96:	e0a1      	b.n	8002ddc <I2C_Master_ADDR+0x2f6>
        }
        else
        {
          /* Disable Acknowledge */
          CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8002c98:	687b      	ldr	r3, [r7, #4]
 8002c9a:	681b      	ldr	r3, [r3, #0]
 8002c9c:	681a      	ldr	r2, [r3, #0]
 8002c9e:	687b      	ldr	r3, [r7, #4]
 8002ca0:	681b      	ldr	r3, [r3, #0]
 8002ca2:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 8002ca6:	601a      	str	r2, [r3, #0]

          /* Clear ADDR flag */
          __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8002ca8:	2300      	movs	r3, #0
 8002caa:	61bb      	str	r3, [r7, #24]
 8002cac:	687b      	ldr	r3, [r7, #4]
 8002cae:	681b      	ldr	r3, [r3, #0]
 8002cb0:	695b      	ldr	r3, [r3, #20]
 8002cb2:	61bb      	str	r3, [r7, #24]
 8002cb4:	687b      	ldr	r3, [r7, #4]
 8002cb6:	681b      	ldr	r3, [r3, #0]
 8002cb8:	699b      	ldr	r3, [r3, #24]
 8002cba:	61bb      	str	r3, [r7, #24]
 8002cbc:	69bb      	ldr	r3, [r7, #24]

          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8002cbe:	687b      	ldr	r3, [r7, #4]
 8002cc0:	681b      	ldr	r3, [r3, #0]
 8002cc2:	681a      	ldr	r2, [r3, #0]
 8002cc4:	687b      	ldr	r3, [r7, #4]
 8002cc6:	681b      	ldr	r3, [r3, #0]
 8002cc8:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8002ccc:	601a      	str	r2, [r3, #0]
 8002cce:	e085      	b.n	8002ddc <I2C_Master_ADDR+0x2f6>
        }
      }
      else if (hi2c->XferCount == 2U)
 8002cd0:	687b      	ldr	r3, [r7, #4]
 8002cd2:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8002cd4:	b29b      	uxth	r3, r3
 8002cd6:	2b02      	cmp	r3, #2
 8002cd8:	d14d      	bne.n	8002d76 <I2C_Master_ADDR+0x290>
      {
        if ((CurrentXferOptions != I2C_NEXT_FRAME) && (CurrentXferOptions != I2C_FIRST_AND_NEXT_FRAME) && (CurrentXferOptions != I2C_LAST_FRAME_NO_STOP))
 8002cda:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8002cdc:	2b04      	cmp	r3, #4
 8002cde:	d016      	beq.n	8002d0e <I2C_Master_ADDR+0x228>
 8002ce0:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8002ce2:	2b02      	cmp	r3, #2
 8002ce4:	d013      	beq.n	8002d0e <I2C_Master_ADDR+0x228>
 8002ce6:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8002ce8:	2b10      	cmp	r3, #16
 8002cea:	d010      	beq.n	8002d0e <I2C_Master_ADDR+0x228>
        {
          /* Disable Acknowledge */
          CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8002cec:	687b      	ldr	r3, [r7, #4]
 8002cee:	681b      	ldr	r3, [r3, #0]
 8002cf0:	681a      	ldr	r2, [r3, #0]
 8002cf2:	687b      	ldr	r3, [r7, #4]
 8002cf4:	681b      	ldr	r3, [r3, #0]
 8002cf6:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 8002cfa:	601a      	str	r2, [r3, #0]

          /* Enable Pos */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 8002cfc:	687b      	ldr	r3, [r7, #4]
 8002cfe:	681b      	ldr	r3, [r3, #0]
 8002d00:	681a      	ldr	r2, [r3, #0]
 8002d02:	687b      	ldr	r3, [r7, #4]
 8002d04:	681b      	ldr	r3, [r3, #0]
 8002d06:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 8002d0a:	601a      	str	r2, [r3, #0]
 8002d0c:	e007      	b.n	8002d1e <I2C_Master_ADDR+0x238>
        }
        else
        {
          /* Enable Acknowledge */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8002d0e:	687b      	ldr	r3, [r7, #4]
 8002d10:	681b      	ldr	r3, [r3, #0]
 8002d12:	681a      	ldr	r2, [r3, #0]
 8002d14:	687b      	ldr	r3, [r7, #4]
 8002d16:	681b      	ldr	r3, [r3, #0]
 8002d18:	f442 6280 	orr.w	r2, r2, #1024	@ 0x400
 8002d1c:	601a      	str	r2, [r3, #0]
        }

        if (((hi2c->Instance->CR2 & I2C_CR2_DMAEN) == I2C_CR2_DMAEN) && ((CurrentXferOptions == I2C_NO_OPTION_FRAME) || (CurrentXferOptions == I2C_FIRST_FRAME) || (CurrentXferOptions == I2C_FIRST_AND_LAST_FRAME) || (CurrentXferOptions == I2C_LAST_FRAME_NO_STOP) || (CurrentXferOptions == I2C_LAST_FRAME)))
 8002d1e:	687b      	ldr	r3, [r7, #4]
 8002d20:	681b      	ldr	r3, [r3, #0]
 8002d22:	685b      	ldr	r3, [r3, #4]
 8002d24:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 8002d28:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 8002d2c:	d117      	bne.n	8002d5e <I2C_Master_ADDR+0x278>
 8002d2e:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8002d30:	f513 3f80 	cmn.w	r3, #65536	@ 0x10000
 8002d34:	d00b      	beq.n	8002d4e <I2C_Master_ADDR+0x268>
 8002d36:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8002d38:	2b01      	cmp	r3, #1
 8002d3a:	d008      	beq.n	8002d4e <I2C_Master_ADDR+0x268>
 8002d3c:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8002d3e:	2b08      	cmp	r3, #8
 8002d40:	d005      	beq.n	8002d4e <I2C_Master_ADDR+0x268>
 8002d42:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8002d44:	2b10      	cmp	r3, #16
 8002d46:	d002      	beq.n	8002d4e <I2C_Master_ADDR+0x268>
 8002d48:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8002d4a:	2b20      	cmp	r3, #32
 8002d4c:	d107      	bne.n	8002d5e <I2C_Master_ADDR+0x278>
        {
          /* Enable Last DMA bit */
          SET_BIT(hi2c->Instance->CR2, I2C_CR2_LAST);
 8002d4e:	687b      	ldr	r3, [r7, #4]
 8002d50:	681b      	ldr	r3, [r3, #0]
 8002d52:	685a      	ldr	r2, [r3, #4]
 8002d54:	687b      	ldr	r3, [r7, #4]
 8002d56:	681b      	ldr	r3, [r3, #0]
 8002d58:	f442 5280 	orr.w	r2, r2, #4096	@ 0x1000
 8002d5c:	605a      	str	r2, [r3, #4]
        }

        /* Clear ADDR flag */
        __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8002d5e:	2300      	movs	r3, #0
 8002d60:	617b      	str	r3, [r7, #20]
 8002d62:	687b      	ldr	r3, [r7, #4]
 8002d64:	681b      	ldr	r3, [r3, #0]
 8002d66:	695b      	ldr	r3, [r3, #20]
 8002d68:	617b      	str	r3, [r7, #20]
 8002d6a:	687b      	ldr	r3, [r7, #4]
 8002d6c:	681b      	ldr	r3, [r3, #0]
 8002d6e:	699b      	ldr	r3, [r3, #24]
 8002d70:	617b      	str	r3, [r7, #20]
 8002d72:	697b      	ldr	r3, [r7, #20]
 8002d74:	e032      	b.n	8002ddc <I2C_Master_ADDR+0x2f6>
      }
      else
      {
        /* Enable Acknowledge */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8002d76:	687b      	ldr	r3, [r7, #4]
 8002d78:	681b      	ldr	r3, [r3, #0]
 8002d7a:	681a      	ldr	r2, [r3, #0]
 8002d7c:	687b      	ldr	r3, [r7, #4]
 8002d7e:	681b      	ldr	r3, [r3, #0]
 8002d80:	f442 6280 	orr.w	r2, r2, #1024	@ 0x400
 8002d84:	601a      	str	r2, [r3, #0]

        if (((hi2c->Instance->CR2 & I2C_CR2_DMAEN) == I2C_CR2_DMAEN) && ((CurrentXferOptions == I2C_NO_OPTION_FRAME) || (CurrentXferOptions == I2C_FIRST_FRAME) || (CurrentXferOptions == I2C_FIRST_AND_LAST_FRAME) || (CurrentXferOptions == I2C_LAST_FRAME_NO_STOP) || (CurrentXferOptions == I2C_LAST_FRAME)))
 8002d86:	687b      	ldr	r3, [r7, #4]
 8002d88:	681b      	ldr	r3, [r3, #0]
 8002d8a:	685b      	ldr	r3, [r3, #4]
 8002d8c:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 8002d90:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 8002d94:	d117      	bne.n	8002dc6 <I2C_Master_ADDR+0x2e0>
 8002d96:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8002d98:	f513 3f80 	cmn.w	r3, #65536	@ 0x10000
 8002d9c:	d00b      	beq.n	8002db6 <I2C_Master_ADDR+0x2d0>
 8002d9e:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8002da0:	2b01      	cmp	r3, #1
 8002da2:	d008      	beq.n	8002db6 <I2C_Master_ADDR+0x2d0>
 8002da4:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8002da6:	2b08      	cmp	r3, #8
 8002da8:	d005      	beq.n	8002db6 <I2C_Master_ADDR+0x2d0>
 8002daa:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8002dac:	2b10      	cmp	r3, #16
 8002dae:	d002      	beq.n	8002db6 <I2C_Master_ADDR+0x2d0>
 8002db0:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8002db2:	2b20      	cmp	r3, #32
 8002db4:	d107      	bne.n	8002dc6 <I2C_Master_ADDR+0x2e0>
        {
          /* Enable Last DMA bit */
          SET_BIT(hi2c->Instance->CR2, I2C_CR2_LAST);
 8002db6:	687b      	ldr	r3, [r7, #4]
 8002db8:	681b      	ldr	r3, [r3, #0]
 8002dba:	685a      	ldr	r2, [r3, #4]
 8002dbc:	687b      	ldr	r3, [r7, #4]
 8002dbe:	681b      	ldr	r3, [r3, #0]
 8002dc0:	f442 5280 	orr.w	r2, r2, #4096	@ 0x1000
 8002dc4:	605a      	str	r2, [r3, #4]
        }

        /* Clear ADDR flag */
        __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8002dc6:	2300      	movs	r3, #0
 8002dc8:	613b      	str	r3, [r7, #16]
 8002dca:	687b      	ldr	r3, [r7, #4]
 8002dcc:	681b      	ldr	r3, [r3, #0]
 8002dce:	695b      	ldr	r3, [r3, #20]
 8002dd0:	613b      	str	r3, [r7, #16]
 8002dd2:	687b      	ldr	r3, [r7, #4]
 8002dd4:	681b      	ldr	r3, [r3, #0]
 8002dd6:	699b      	ldr	r3, [r3, #24]
 8002dd8:	613b      	str	r3, [r7, #16]
 8002dda:	693b      	ldr	r3, [r7, #16]
      }

      /* Reset Event counter  */
      hi2c->EventCount = 0U;
 8002ddc:	687b      	ldr	r3, [r7, #4]
 8002dde:	2200      	movs	r2, #0
 8002de0:	651a      	str	r2, [r3, #80]	@ 0x50
  else
  {
    /* Clear ADDR flag */
    __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
  }
}
 8002de2:	e00b      	b.n	8002dfc <I2C_Master_ADDR+0x316>
    __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8002de4:	2300      	movs	r3, #0
 8002de6:	60fb      	str	r3, [r7, #12]
 8002de8:	687b      	ldr	r3, [r7, #4]
 8002dea:	681b      	ldr	r3, [r3, #0]
 8002dec:	695b      	ldr	r3, [r3, #20]
 8002dee:	60fb      	str	r3, [r7, #12]
 8002df0:	687b      	ldr	r3, [r7, #4]
 8002df2:	681b      	ldr	r3, [r3, #0]
 8002df4:	699b      	ldr	r3, [r3, #24]
 8002df6:	60fb      	str	r3, [r7, #12]
 8002df8:	68fb      	ldr	r3, [r7, #12]
}
 8002dfa:	e7ff      	b.n	8002dfc <I2C_Master_ADDR+0x316>
 8002dfc:	bf00      	nop
 8002dfe:	3744      	adds	r7, #68	@ 0x44
 8002e00:	46bd      	mov	sp, r7
 8002e02:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002e06:	4770      	bx	lr

08002e08 <I2C_SlaveTransmit_TXE>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_SlaveTransmit_TXE(I2C_HandleTypeDef *hi2c)
{
 8002e08:	b580      	push	{r7, lr}
 8002e0a:	b084      	sub	sp, #16
 8002e0c:	af00      	add	r7, sp, #0
 8002e0e:	6078      	str	r0, [r7, #4]
  /* Declaration of temporary variables to prevent undefined behavior of volatile usage */
  HAL_I2C_StateTypeDef CurrentState = hi2c->State;
 8002e10:	687b      	ldr	r3, [r7, #4]
 8002e12:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8002e16:	73fb      	strb	r3, [r7, #15]

  if (hi2c->XferCount != 0U)
 8002e18:	687b      	ldr	r3, [r7, #4]
 8002e1a:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8002e1c:	b29b      	uxth	r3, r3
 8002e1e:	2b00      	cmp	r3, #0
 8002e20:	d02b      	beq.n	8002e7a <I2C_SlaveTransmit_TXE+0x72>
  {
    /* Write data to DR */
    hi2c->Instance->DR = *hi2c->pBuffPtr;
 8002e22:	687b      	ldr	r3, [r7, #4]
 8002e24:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002e26:	781a      	ldrb	r2, [r3, #0]
 8002e28:	687b      	ldr	r3, [r7, #4]
 8002e2a:	681b      	ldr	r3, [r3, #0]
 8002e2c:	611a      	str	r2, [r3, #16]

    /* Increment Buffer pointer */
    hi2c->pBuffPtr++;
 8002e2e:	687b      	ldr	r3, [r7, #4]
 8002e30:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002e32:	1c5a      	adds	r2, r3, #1
 8002e34:	687b      	ldr	r3, [r7, #4]
 8002e36:	625a      	str	r2, [r3, #36]	@ 0x24

    /* Update counter */
    hi2c->XferCount--;
 8002e38:	687b      	ldr	r3, [r7, #4]
 8002e3a:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8002e3c:	b29b      	uxth	r3, r3
 8002e3e:	3b01      	subs	r3, #1
 8002e40:	b29a      	uxth	r2, r3
 8002e42:	687b      	ldr	r3, [r7, #4]
 8002e44:	855a      	strh	r2, [r3, #42]	@ 0x2a

    if ((hi2c->XferCount == 0U) && (CurrentState == HAL_I2C_STATE_BUSY_TX_LISTEN))
 8002e46:	687b      	ldr	r3, [r7, #4]
 8002e48:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8002e4a:	b29b      	uxth	r3, r3
 8002e4c:	2b00      	cmp	r3, #0
 8002e4e:	d114      	bne.n	8002e7a <I2C_SlaveTransmit_TXE+0x72>
 8002e50:	7bfb      	ldrb	r3, [r7, #15]
 8002e52:	2b29      	cmp	r3, #41	@ 0x29
 8002e54:	d111      	bne.n	8002e7a <I2C_SlaveTransmit_TXE+0x72>
    {
      /* Last Byte is received, disable Interrupt */
      __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_BUF);
 8002e56:	687b      	ldr	r3, [r7, #4]
 8002e58:	681b      	ldr	r3, [r3, #0]
 8002e5a:	685a      	ldr	r2, [r3, #4]
 8002e5c:	687b      	ldr	r3, [r7, #4]
 8002e5e:	681b      	ldr	r3, [r3, #0]
 8002e60:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 8002e64:	605a      	str	r2, [r3, #4]

      /* Set state at HAL_I2C_STATE_LISTEN */
      hi2c->PreviousState = I2C_STATE_SLAVE_BUSY_TX;
 8002e66:	687b      	ldr	r3, [r7, #4]
 8002e68:	2221      	movs	r2, #33	@ 0x21
 8002e6a:	631a      	str	r2, [r3, #48]	@ 0x30
      hi2c->State = HAL_I2C_STATE_LISTEN;
 8002e6c:	687b      	ldr	r3, [r7, #4]
 8002e6e:	2228      	movs	r2, #40	@ 0x28
 8002e70:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

      /* Call the corresponding callback to inform upper layer of End of Transfer */
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
      hi2c->SlaveTxCpltCallback(hi2c);
#else
      HAL_I2C_SlaveTxCpltCallback(hi2c);
 8002e74:	6878      	ldr	r0, [r7, #4]
 8002e76:	f7ff f9cb 	bl	8002210 <HAL_I2C_SlaveTxCpltCallback>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
    }
  }
}
 8002e7a:	bf00      	nop
 8002e7c:	3710      	adds	r7, #16
 8002e7e:	46bd      	mov	sp, r7
 8002e80:	bd80      	pop	{r7, pc}

08002e82 <I2C_SlaveTransmit_BTF>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_SlaveTransmit_BTF(I2C_HandleTypeDef *hi2c)
{
 8002e82:	b480      	push	{r7}
 8002e84:	b083      	sub	sp, #12
 8002e86:	af00      	add	r7, sp, #0
 8002e88:	6078      	str	r0, [r7, #4]
  if (hi2c->XferCount != 0U)
 8002e8a:	687b      	ldr	r3, [r7, #4]
 8002e8c:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8002e8e:	b29b      	uxth	r3, r3
 8002e90:	2b00      	cmp	r3, #0
 8002e92:	d011      	beq.n	8002eb8 <I2C_SlaveTransmit_BTF+0x36>
  {
    /* Write data to DR */
    hi2c->Instance->DR = *hi2c->pBuffPtr;
 8002e94:	687b      	ldr	r3, [r7, #4]
 8002e96:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002e98:	781a      	ldrb	r2, [r3, #0]
 8002e9a:	687b      	ldr	r3, [r7, #4]
 8002e9c:	681b      	ldr	r3, [r3, #0]
 8002e9e:	611a      	str	r2, [r3, #16]

    /* Increment Buffer pointer */
    hi2c->pBuffPtr++;
 8002ea0:	687b      	ldr	r3, [r7, #4]
 8002ea2:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002ea4:	1c5a      	adds	r2, r3, #1
 8002ea6:	687b      	ldr	r3, [r7, #4]
 8002ea8:	625a      	str	r2, [r3, #36]	@ 0x24

    /* Update counter */
    hi2c->XferCount--;
 8002eaa:	687b      	ldr	r3, [r7, #4]
 8002eac:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8002eae:	b29b      	uxth	r3, r3
 8002eb0:	3b01      	subs	r3, #1
 8002eb2:	b29a      	uxth	r2, r3
 8002eb4:	687b      	ldr	r3, [r7, #4]
 8002eb6:	855a      	strh	r2, [r3, #42]	@ 0x2a
  }
}
 8002eb8:	bf00      	nop
 8002eba:	370c      	adds	r7, #12
 8002ebc:	46bd      	mov	sp, r7
 8002ebe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002ec2:	4770      	bx	lr

08002ec4 <I2C_SlaveReceive_RXNE>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_SlaveReceive_RXNE(I2C_HandleTypeDef *hi2c)
{
 8002ec4:	b580      	push	{r7, lr}
 8002ec6:	b084      	sub	sp, #16
 8002ec8:	af00      	add	r7, sp, #0
 8002eca:	6078      	str	r0, [r7, #4]
  /* Declaration of temporary variables to prevent undefined behavior of volatile usage */
  HAL_I2C_StateTypeDef CurrentState = hi2c->State;
 8002ecc:	687b      	ldr	r3, [r7, #4]
 8002ece:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8002ed2:	73fb      	strb	r3, [r7, #15]

  if (hi2c->XferCount != 0U)
 8002ed4:	687b      	ldr	r3, [r7, #4]
 8002ed6:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8002ed8:	b29b      	uxth	r3, r3
 8002eda:	2b00      	cmp	r3, #0
 8002edc:	d02c      	beq.n	8002f38 <I2C_SlaveReceive_RXNE+0x74>
  {
    /* Read data from DR */
    *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8002ede:	687b      	ldr	r3, [r7, #4]
 8002ee0:	681b      	ldr	r3, [r3, #0]
 8002ee2:	691a      	ldr	r2, [r3, #16]
 8002ee4:	687b      	ldr	r3, [r7, #4]
 8002ee6:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002ee8:	b2d2      	uxtb	r2, r2
 8002eea:	701a      	strb	r2, [r3, #0]

    /* Increment Buffer pointer */
    hi2c->pBuffPtr++;
 8002eec:	687b      	ldr	r3, [r7, #4]
 8002eee:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002ef0:	1c5a      	adds	r2, r3, #1
 8002ef2:	687b      	ldr	r3, [r7, #4]
 8002ef4:	625a      	str	r2, [r3, #36]	@ 0x24

    /* Update counter */
    hi2c->XferCount--;
 8002ef6:	687b      	ldr	r3, [r7, #4]
 8002ef8:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8002efa:	b29b      	uxth	r3, r3
 8002efc:	3b01      	subs	r3, #1
 8002efe:	b29a      	uxth	r2, r3
 8002f00:	687b      	ldr	r3, [r7, #4]
 8002f02:	855a      	strh	r2, [r3, #42]	@ 0x2a

    if ((hi2c->XferCount == 0U) && (CurrentState == HAL_I2C_STATE_BUSY_RX_LISTEN))
 8002f04:	687b      	ldr	r3, [r7, #4]
 8002f06:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8002f08:	b29b      	uxth	r3, r3
 8002f0a:	2b00      	cmp	r3, #0
 8002f0c:	d114      	bne.n	8002f38 <I2C_SlaveReceive_RXNE+0x74>
 8002f0e:	7bfb      	ldrb	r3, [r7, #15]
 8002f10:	2b2a      	cmp	r3, #42	@ 0x2a
 8002f12:	d111      	bne.n	8002f38 <I2C_SlaveReceive_RXNE+0x74>
    {
      /* Last Byte is received, disable Interrupt */
      __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_BUF);
 8002f14:	687b      	ldr	r3, [r7, #4]
 8002f16:	681b      	ldr	r3, [r3, #0]
 8002f18:	685a      	ldr	r2, [r3, #4]
 8002f1a:	687b      	ldr	r3, [r7, #4]
 8002f1c:	681b      	ldr	r3, [r3, #0]
 8002f1e:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 8002f22:	605a      	str	r2, [r3, #4]

      /* Set state at HAL_I2C_STATE_LISTEN */
      hi2c->PreviousState = I2C_STATE_SLAVE_BUSY_RX;
 8002f24:	687b      	ldr	r3, [r7, #4]
 8002f26:	2222      	movs	r2, #34	@ 0x22
 8002f28:	631a      	str	r2, [r3, #48]	@ 0x30
      hi2c->State = HAL_I2C_STATE_LISTEN;
 8002f2a:	687b      	ldr	r3, [r7, #4]
 8002f2c:	2228      	movs	r2, #40	@ 0x28
 8002f2e:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

      /* Call the corresponding callback to inform upper layer of End of Transfer */
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
      hi2c->SlaveRxCpltCallback(hi2c);
#else
      HAL_I2C_SlaveRxCpltCallback(hi2c);
 8002f32:	6878      	ldr	r0, [r7, #4]
 8002f34:	f7ff f976 	bl	8002224 <HAL_I2C_SlaveRxCpltCallback>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
    }
  }
}
 8002f38:	bf00      	nop
 8002f3a:	3710      	adds	r7, #16
 8002f3c:	46bd      	mov	sp, r7
 8002f3e:	bd80      	pop	{r7, pc}

08002f40 <I2C_SlaveReceive_BTF>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_SlaveReceive_BTF(I2C_HandleTypeDef *hi2c)
{
 8002f40:	b480      	push	{r7}
 8002f42:	b083      	sub	sp, #12
 8002f44:	af00      	add	r7, sp, #0
 8002f46:	6078      	str	r0, [r7, #4]
  if (hi2c->XferCount != 0U)
 8002f48:	687b      	ldr	r3, [r7, #4]
 8002f4a:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8002f4c:	b29b      	uxth	r3, r3
 8002f4e:	2b00      	cmp	r3, #0
 8002f50:	d012      	beq.n	8002f78 <I2C_SlaveReceive_BTF+0x38>
  {
    /* Read data from DR */
    *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8002f52:	687b      	ldr	r3, [r7, #4]
 8002f54:	681b      	ldr	r3, [r3, #0]
 8002f56:	691a      	ldr	r2, [r3, #16]
 8002f58:	687b      	ldr	r3, [r7, #4]
 8002f5a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002f5c:	b2d2      	uxtb	r2, r2
 8002f5e:	701a      	strb	r2, [r3, #0]

    /* Increment Buffer pointer */
    hi2c->pBuffPtr++;
 8002f60:	687b      	ldr	r3, [r7, #4]
 8002f62:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002f64:	1c5a      	adds	r2, r3, #1
 8002f66:	687b      	ldr	r3, [r7, #4]
 8002f68:	625a      	str	r2, [r3, #36]	@ 0x24

    /* Update counter */
    hi2c->XferCount--;
 8002f6a:	687b      	ldr	r3, [r7, #4]
 8002f6c:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8002f6e:	b29b      	uxth	r3, r3
 8002f70:	3b01      	subs	r3, #1
 8002f72:	b29a      	uxth	r2, r3
 8002f74:	687b      	ldr	r3, [r7, #4]
 8002f76:	855a      	strh	r2, [r3, #42]	@ 0x2a
  }
}
 8002f78:	bf00      	nop
 8002f7a:	370c      	adds	r7, #12
 8002f7c:	46bd      	mov	sp, r7
 8002f7e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002f82:	4770      	bx	lr

08002f84 <I2C_Slave_ADDR>:
  *         the configuration information for I2C module
  * @param  IT2Flags Interrupt2 flags to handle.
  * @retval None
  */
static void I2C_Slave_ADDR(I2C_HandleTypeDef *hi2c, uint32_t IT2Flags)
{
 8002f84:	b580      	push	{r7, lr}
 8002f86:	b084      	sub	sp, #16
 8002f88:	af00      	add	r7, sp, #0
 8002f8a:	6078      	str	r0, [r7, #4]
 8002f8c:	6039      	str	r1, [r7, #0]
  uint8_t TransferDirection = I2C_DIRECTION_RECEIVE;
 8002f8e:	2300      	movs	r3, #0
 8002f90:	73fb      	strb	r3, [r7, #15]
  uint16_t SlaveAddrCode;

  if (((uint32_t)hi2c->State & (uint32_t)HAL_I2C_STATE_LISTEN) == (uint32_t)HAL_I2C_STATE_LISTEN)
 8002f92:	687b      	ldr	r3, [r7, #4]
 8002f94:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8002f98:	b2db      	uxtb	r3, r3
 8002f9a:	f003 0328 	and.w	r3, r3, #40	@ 0x28
 8002f9e:	2b28      	cmp	r3, #40	@ 0x28
 8002fa0:	d125      	bne.n	8002fee <I2C_Slave_ADDR+0x6a>
  {
    /* Disable BUF interrupt, BUF enabling is manage through slave specific interface */
    __HAL_I2C_DISABLE_IT(hi2c, (I2C_IT_BUF));
 8002fa2:	687b      	ldr	r3, [r7, #4]
 8002fa4:	681b      	ldr	r3, [r3, #0]
 8002fa6:	685a      	ldr	r2, [r3, #4]
 8002fa8:	687b      	ldr	r3, [r7, #4]
 8002faa:	681b      	ldr	r3, [r3, #0]
 8002fac:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 8002fb0:	605a      	str	r2, [r3, #4]

    /* Transfer Direction requested by Master */
    if (I2C_CHECK_FLAG(IT2Flags, I2C_FLAG_TRA) == RESET)
 8002fb2:	683b      	ldr	r3, [r7, #0]
 8002fb4:	f003 0304 	and.w	r3, r3, #4
 8002fb8:	2b00      	cmp	r3, #0
 8002fba:	d101      	bne.n	8002fc0 <I2C_Slave_ADDR+0x3c>
    {
      TransferDirection = I2C_DIRECTION_TRANSMIT;
 8002fbc:	2301      	movs	r3, #1
 8002fbe:	73fb      	strb	r3, [r7, #15]
    }

    if (I2C_CHECK_FLAG(IT2Flags, I2C_FLAG_DUALF) == RESET)
 8002fc0:	683b      	ldr	r3, [r7, #0]
 8002fc2:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8002fc6:	2b00      	cmp	r3, #0
 8002fc8:	d103      	bne.n	8002fd2 <I2C_Slave_ADDR+0x4e>
    {
      SlaveAddrCode = (uint16_t)hi2c->Init.OwnAddress1;
 8002fca:	687b      	ldr	r3, [r7, #4]
 8002fcc:	68db      	ldr	r3, [r3, #12]
 8002fce:	81bb      	strh	r3, [r7, #12]
 8002fd0:	e002      	b.n	8002fd8 <I2C_Slave_ADDR+0x54>
    }
    else
    {
      SlaveAddrCode = (uint16_t)hi2c->Init.OwnAddress2;
 8002fd2:	687b      	ldr	r3, [r7, #4]
 8002fd4:	699b      	ldr	r3, [r3, #24]
 8002fd6:	81bb      	strh	r3, [r7, #12]
    }

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8002fd8:	687b      	ldr	r3, [r7, #4]
 8002fda:	2200      	movs	r2, #0
 8002fdc:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    /* Call Slave Addr callback */
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
    hi2c->AddrCallback(hi2c, TransferDirection, SlaveAddrCode);
#else
    HAL_I2C_AddrCallback(hi2c, TransferDirection, SlaveAddrCode);
 8002fe0:	89ba      	ldrh	r2, [r7, #12]
 8002fe2:	7bfb      	ldrb	r3, [r7, #15]
 8002fe4:	4619      	mov	r1, r3
 8002fe6:	6878      	ldr	r0, [r7, #4]
 8002fe8:	f7ff f926 	bl	8002238 <HAL_I2C_AddrCallback>
    __HAL_I2C_CLEAR_ADDRFLAG(hi2c);

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
  }
}
 8002fec:	e00e      	b.n	800300c <I2C_Slave_ADDR+0x88>
    __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8002fee:	2300      	movs	r3, #0
 8002ff0:	60bb      	str	r3, [r7, #8]
 8002ff2:	687b      	ldr	r3, [r7, #4]
 8002ff4:	681b      	ldr	r3, [r3, #0]
 8002ff6:	695b      	ldr	r3, [r3, #20]
 8002ff8:	60bb      	str	r3, [r7, #8]
 8002ffa:	687b      	ldr	r3, [r7, #4]
 8002ffc:	681b      	ldr	r3, [r3, #0]
 8002ffe:	699b      	ldr	r3, [r3, #24]
 8003000:	60bb      	str	r3, [r7, #8]
 8003002:	68bb      	ldr	r3, [r7, #8]
    __HAL_UNLOCK(hi2c);
 8003004:	687b      	ldr	r3, [r7, #4]
 8003006:	2200      	movs	r2, #0
 8003008:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
}
 800300c:	bf00      	nop
 800300e:	3710      	adds	r7, #16
 8003010:	46bd      	mov	sp, r7
 8003012:	bd80      	pop	{r7, pc}

08003014 <I2C_Slave_STOPF>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_Slave_STOPF(I2C_HandleTypeDef *hi2c)
{
 8003014:	b580      	push	{r7, lr}
 8003016:	b084      	sub	sp, #16
 8003018:	af00      	add	r7, sp, #0
 800301a:	6078      	str	r0, [r7, #4]
  /* Declaration of temporary variable to prevent undefined behavior of volatile usage */
  HAL_I2C_StateTypeDef CurrentState = hi2c->State;
 800301c:	687b      	ldr	r3, [r7, #4]
 800301e:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8003022:	73fb      	strb	r3, [r7, #15]

  /* Disable EVT, BUF and ERR interrupt */
  __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_BUF | I2C_IT_ERR);
 8003024:	687b      	ldr	r3, [r7, #4]
 8003026:	681b      	ldr	r3, [r3, #0]
 8003028:	685a      	ldr	r2, [r3, #4]
 800302a:	687b      	ldr	r3, [r7, #4]
 800302c:	681b      	ldr	r3, [r3, #0]
 800302e:	f422 62e0 	bic.w	r2, r2, #1792	@ 0x700
 8003032:	605a      	str	r2, [r3, #4]

  /* Clear STOPF flag */
  __HAL_I2C_CLEAR_STOPFLAG(hi2c);
 8003034:	2300      	movs	r3, #0
 8003036:	60bb      	str	r3, [r7, #8]
 8003038:	687b      	ldr	r3, [r7, #4]
 800303a:	681b      	ldr	r3, [r3, #0]
 800303c:	695b      	ldr	r3, [r3, #20]
 800303e:	60bb      	str	r3, [r7, #8]
 8003040:	687b      	ldr	r3, [r7, #4]
 8003042:	681b      	ldr	r3, [r3, #0]
 8003044:	681a      	ldr	r2, [r3, #0]
 8003046:	687b      	ldr	r3, [r7, #4]
 8003048:	681b      	ldr	r3, [r3, #0]
 800304a:	f042 0201 	orr.w	r2, r2, #1
 800304e:	601a      	str	r2, [r3, #0]
 8003050:	68bb      	ldr	r3, [r7, #8]

  /* Disable Acknowledge */
  CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8003052:	687b      	ldr	r3, [r7, #4]
 8003054:	681b      	ldr	r3, [r3, #0]
 8003056:	681a      	ldr	r2, [r3, #0]
 8003058:	687b      	ldr	r3, [r7, #4]
 800305a:	681b      	ldr	r3, [r3, #0]
 800305c:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 8003060:	601a      	str	r2, [r3, #0]

  /* If a DMA is ongoing, Update handle size context */
  if ((hi2c->Instance->CR2 & I2C_CR2_DMAEN) == I2C_CR2_DMAEN)
 8003062:	687b      	ldr	r3, [r7, #4]
 8003064:	681b      	ldr	r3, [r3, #0]
 8003066:	685b      	ldr	r3, [r3, #4]
 8003068:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 800306c:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 8003070:	d172      	bne.n	8003158 <I2C_Slave_STOPF+0x144>
  {
    if ((CurrentState == HAL_I2C_STATE_BUSY_RX) || (CurrentState == HAL_I2C_STATE_BUSY_RX_LISTEN))
 8003072:	7bfb      	ldrb	r3, [r7, #15]
 8003074:	2b22      	cmp	r3, #34	@ 0x22
 8003076:	d002      	beq.n	800307e <I2C_Slave_STOPF+0x6a>
 8003078:	7bfb      	ldrb	r3, [r7, #15]
 800307a:	2b2a      	cmp	r3, #42	@ 0x2a
 800307c:	d135      	bne.n	80030ea <I2C_Slave_STOPF+0xd6>
    {
      hi2c->XferCount = (uint16_t)(I2C_GET_DMA_REMAIN_DATA(hi2c->hdmarx));
 800307e:	687b      	ldr	r3, [r7, #4]
 8003080:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8003082:	681b      	ldr	r3, [r3, #0]
 8003084:	685b      	ldr	r3, [r3, #4]
 8003086:	b29a      	uxth	r2, r3
 8003088:	687b      	ldr	r3, [r7, #4]
 800308a:	855a      	strh	r2, [r3, #42]	@ 0x2a

      if (hi2c->XferCount != 0U)
 800308c:	687b      	ldr	r3, [r7, #4]
 800308e:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8003090:	b29b      	uxth	r3, r3
 8003092:	2b00      	cmp	r3, #0
 8003094:	d005      	beq.n	80030a2 <I2C_Slave_STOPF+0x8e>
      {
        /* Set ErrorCode corresponding to a Non-Acknowledge */
        hi2c->ErrorCode |= HAL_I2C_ERROR_AF;
 8003096:	687b      	ldr	r3, [r7, #4]
 8003098:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800309a:	f043 0204 	orr.w	r2, r3, #4
 800309e:	687b      	ldr	r3, [r7, #4]
 80030a0:	641a      	str	r2, [r3, #64]	@ 0x40
      }

      /* Disable, stop the current DMA */
      CLEAR_BIT(hi2c->Instance->CR2, I2C_CR2_DMAEN);
 80030a2:	687b      	ldr	r3, [r7, #4]
 80030a4:	681b      	ldr	r3, [r3, #0]
 80030a6:	685a      	ldr	r2, [r3, #4]
 80030a8:	687b      	ldr	r3, [r7, #4]
 80030aa:	681b      	ldr	r3, [r3, #0]
 80030ac:	f422 6200 	bic.w	r2, r2, #2048	@ 0x800
 80030b0:	605a      	str	r2, [r3, #4]

      /* Abort DMA Xfer if any */
      if (HAL_DMA_GetState(hi2c->hdmarx) != HAL_DMA_STATE_READY)
 80030b2:	687b      	ldr	r3, [r7, #4]
 80030b4:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80030b6:	4618      	mov	r0, r3
 80030b8:	f7fe f834 	bl	8001124 <HAL_DMA_GetState>
 80030bc:	4603      	mov	r3, r0
 80030be:	2b01      	cmp	r3, #1
 80030c0:	d049      	beq.n	8003156 <I2C_Slave_STOPF+0x142>
      {
        /* Set the I2C DMA Abort callback :
        will lead to call HAL_I2C_ErrorCallback() at end of DMA abort procedure */
        hi2c->hdmarx->XferAbortCallback = I2C_DMAAbort;
 80030c2:	687b      	ldr	r3, [r7, #4]
 80030c4:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80030c6:	4a69      	ldr	r2, [pc, #420]	@ (800326c <I2C_Slave_STOPF+0x258>)
 80030c8:	651a      	str	r2, [r3, #80]	@ 0x50

        /* Abort DMA RX */
        if (HAL_DMA_Abort_IT(hi2c->hdmarx) != HAL_OK)
 80030ca:	687b      	ldr	r3, [r7, #4]
 80030cc:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80030ce:	4618      	mov	r0, r3
 80030d0:	f7fe f806 	bl	80010e0 <HAL_DMA_Abort_IT>
 80030d4:	4603      	mov	r3, r0
 80030d6:	2b00      	cmp	r3, #0
 80030d8:	d03d      	beq.n	8003156 <I2C_Slave_STOPF+0x142>
        {
          /* Call Directly XferAbortCallback function in case of error */
          hi2c->hdmarx->XferAbortCallback(hi2c->hdmarx);
 80030da:	687b      	ldr	r3, [r7, #4]
 80030dc:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80030de:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 80030e0:	687a      	ldr	r2, [r7, #4]
 80030e2:	6b92      	ldr	r2, [r2, #56]	@ 0x38
 80030e4:	4610      	mov	r0, r2
 80030e6:	4798      	blx	r3
      if (HAL_DMA_GetState(hi2c->hdmarx) != HAL_DMA_STATE_READY)
 80030e8:	e035      	b.n	8003156 <I2C_Slave_STOPF+0x142>
        }
      }
    }
    else
    {
      hi2c->XferCount = (uint16_t)(I2C_GET_DMA_REMAIN_DATA(hi2c->hdmatx));
 80030ea:	687b      	ldr	r3, [r7, #4]
 80030ec:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 80030ee:	681b      	ldr	r3, [r3, #0]
 80030f0:	685b      	ldr	r3, [r3, #4]
 80030f2:	b29a      	uxth	r2, r3
 80030f4:	687b      	ldr	r3, [r7, #4]
 80030f6:	855a      	strh	r2, [r3, #42]	@ 0x2a

      if (hi2c->XferCount != 0U)
 80030f8:	687b      	ldr	r3, [r7, #4]
 80030fa:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 80030fc:	b29b      	uxth	r3, r3
 80030fe:	2b00      	cmp	r3, #0
 8003100:	d005      	beq.n	800310e <I2C_Slave_STOPF+0xfa>
      {
        /* Set ErrorCode corresponding to a Non-Acknowledge */
        hi2c->ErrorCode |= HAL_I2C_ERROR_AF;
 8003102:	687b      	ldr	r3, [r7, #4]
 8003104:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003106:	f043 0204 	orr.w	r2, r3, #4
 800310a:	687b      	ldr	r3, [r7, #4]
 800310c:	641a      	str	r2, [r3, #64]	@ 0x40
      }

      /* Disable, stop the current DMA */
      CLEAR_BIT(hi2c->Instance->CR2, I2C_CR2_DMAEN);
 800310e:	687b      	ldr	r3, [r7, #4]
 8003110:	681b      	ldr	r3, [r3, #0]
 8003112:	685a      	ldr	r2, [r3, #4]
 8003114:	687b      	ldr	r3, [r7, #4]
 8003116:	681b      	ldr	r3, [r3, #0]
 8003118:	f422 6200 	bic.w	r2, r2, #2048	@ 0x800
 800311c:	605a      	str	r2, [r3, #4]

      /* Abort DMA Xfer if any */
      if (HAL_DMA_GetState(hi2c->hdmatx) != HAL_DMA_STATE_READY)
 800311e:	687b      	ldr	r3, [r7, #4]
 8003120:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8003122:	4618      	mov	r0, r3
 8003124:	f7fd fffe 	bl	8001124 <HAL_DMA_GetState>
 8003128:	4603      	mov	r3, r0
 800312a:	2b01      	cmp	r3, #1
 800312c:	d014      	beq.n	8003158 <I2C_Slave_STOPF+0x144>
      {
        /* Set the I2C DMA Abort callback :
        will lead to call HAL_I2C_ErrorCallback() at end of DMA abort procedure */
        hi2c->hdmatx->XferAbortCallback = I2C_DMAAbort;
 800312e:	687b      	ldr	r3, [r7, #4]
 8003130:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8003132:	4a4e      	ldr	r2, [pc, #312]	@ (800326c <I2C_Slave_STOPF+0x258>)
 8003134:	651a      	str	r2, [r3, #80]	@ 0x50

        /* Abort DMA TX */
        if (HAL_DMA_Abort_IT(hi2c->hdmatx) != HAL_OK)
 8003136:	687b      	ldr	r3, [r7, #4]
 8003138:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800313a:	4618      	mov	r0, r3
 800313c:	f7fd ffd0 	bl	80010e0 <HAL_DMA_Abort_IT>
 8003140:	4603      	mov	r3, r0
 8003142:	2b00      	cmp	r3, #0
 8003144:	d008      	beq.n	8003158 <I2C_Slave_STOPF+0x144>
        {
          /* Call Directly XferAbortCallback function in case of error */
          hi2c->hdmatx->XferAbortCallback(hi2c->hdmatx);
 8003146:	687b      	ldr	r3, [r7, #4]
 8003148:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800314a:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 800314c:	687a      	ldr	r2, [r7, #4]
 800314e:	6b52      	ldr	r2, [r2, #52]	@ 0x34
 8003150:	4610      	mov	r0, r2
 8003152:	4798      	blx	r3
 8003154:	e000      	b.n	8003158 <I2C_Slave_STOPF+0x144>
      if (HAL_DMA_GetState(hi2c->hdmarx) != HAL_DMA_STATE_READY)
 8003156:	bf00      	nop
      }
    }
  }

  /* All data are not transferred, so set error code accordingly */
  if (hi2c->XferCount != 0U)
 8003158:	687b      	ldr	r3, [r7, #4]
 800315a:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 800315c:	b29b      	uxth	r3, r3
 800315e:	2b00      	cmp	r3, #0
 8003160:	d03e      	beq.n	80031e0 <I2C_Slave_STOPF+0x1cc>
  {
    /* Store Last receive data if any */
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == SET)
 8003162:	687b      	ldr	r3, [r7, #4]
 8003164:	681b      	ldr	r3, [r3, #0]
 8003166:	695b      	ldr	r3, [r3, #20]
 8003168:	f003 0304 	and.w	r3, r3, #4
 800316c:	2b04      	cmp	r3, #4
 800316e:	d112      	bne.n	8003196 <I2C_Slave_STOPF+0x182>
    {
      /* Read data from DR */
      *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8003170:	687b      	ldr	r3, [r7, #4]
 8003172:	681b      	ldr	r3, [r3, #0]
 8003174:	691a      	ldr	r2, [r3, #16]
 8003176:	687b      	ldr	r3, [r7, #4]
 8003178:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800317a:	b2d2      	uxtb	r2, r2
 800317c:	701a      	strb	r2, [r3, #0]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 800317e:	687b      	ldr	r3, [r7, #4]
 8003180:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003182:	1c5a      	adds	r2, r3, #1
 8003184:	687b      	ldr	r3, [r7, #4]
 8003186:	625a      	str	r2, [r3, #36]	@ 0x24

      /* Update counter */
      hi2c->XferCount--;
 8003188:	687b      	ldr	r3, [r7, #4]
 800318a:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 800318c:	b29b      	uxth	r3, r3
 800318e:	3b01      	subs	r3, #1
 8003190:	b29a      	uxth	r2, r3
 8003192:	687b      	ldr	r3, [r7, #4]
 8003194:	855a      	strh	r2, [r3, #42]	@ 0x2a
    }

    /* Store Last receive data if any */
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == SET)
 8003196:	687b      	ldr	r3, [r7, #4]
 8003198:	681b      	ldr	r3, [r3, #0]
 800319a:	695b      	ldr	r3, [r3, #20]
 800319c:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80031a0:	2b40      	cmp	r3, #64	@ 0x40
 80031a2:	d112      	bne.n	80031ca <I2C_Slave_STOPF+0x1b6>
    {
      /* Read data from DR */
      *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 80031a4:	687b      	ldr	r3, [r7, #4]
 80031a6:	681b      	ldr	r3, [r3, #0]
 80031a8:	691a      	ldr	r2, [r3, #16]
 80031aa:	687b      	ldr	r3, [r7, #4]
 80031ac:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80031ae:	b2d2      	uxtb	r2, r2
 80031b0:	701a      	strb	r2, [r3, #0]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 80031b2:	687b      	ldr	r3, [r7, #4]
 80031b4:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80031b6:	1c5a      	adds	r2, r3, #1
 80031b8:	687b      	ldr	r3, [r7, #4]
 80031ba:	625a      	str	r2, [r3, #36]	@ 0x24

      /* Update counter */
      hi2c->XferCount--;
 80031bc:	687b      	ldr	r3, [r7, #4]
 80031be:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 80031c0:	b29b      	uxth	r3, r3
 80031c2:	3b01      	subs	r3, #1
 80031c4:	b29a      	uxth	r2, r3
 80031c6:	687b      	ldr	r3, [r7, #4]
 80031c8:	855a      	strh	r2, [r3, #42]	@ 0x2a
    }

    if (hi2c->XferCount != 0U)
 80031ca:	687b      	ldr	r3, [r7, #4]
 80031cc:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 80031ce:	b29b      	uxth	r3, r3
 80031d0:	2b00      	cmp	r3, #0
 80031d2:	d005      	beq.n	80031e0 <I2C_Slave_STOPF+0x1cc>
    {
      /* Set ErrorCode corresponding to a Non-Acknowledge */
      hi2c->ErrorCode |= HAL_I2C_ERROR_AF;
 80031d4:	687b      	ldr	r3, [r7, #4]
 80031d6:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80031d8:	f043 0204 	orr.w	r2, r3, #4
 80031dc:	687b      	ldr	r3, [r7, #4]
 80031de:	641a      	str	r2, [r3, #64]	@ 0x40
    }
  }

  if (hi2c->ErrorCode != HAL_I2C_ERROR_NONE)
 80031e0:	687b      	ldr	r3, [r7, #4]
 80031e2:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80031e4:	2b00      	cmp	r3, #0
 80031e6:	d003      	beq.n	80031f0 <I2C_Slave_STOPF+0x1dc>
  {
    /* Call the corresponding callback to inform upper layer of End of Transfer */
    I2C_ITError(hi2c);
 80031e8:	6878      	ldr	r0, [r7, #4]
 80031ea:	f000 f8b7 	bl	800335c <I2C_ITError>
        HAL_I2C_SlaveRxCpltCallback(hi2c);
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
      }
    }
  }
}
 80031ee:	e039      	b.n	8003264 <I2C_Slave_STOPF+0x250>
    if (CurrentState == HAL_I2C_STATE_BUSY_RX_LISTEN)
 80031f0:	7bfb      	ldrb	r3, [r7, #15]
 80031f2:	2b2a      	cmp	r3, #42	@ 0x2a
 80031f4:	d109      	bne.n	800320a <I2C_Slave_STOPF+0x1f6>
      hi2c->PreviousState = I2C_STATE_NONE;
 80031f6:	687b      	ldr	r3, [r7, #4]
 80031f8:	2200      	movs	r2, #0
 80031fa:	631a      	str	r2, [r3, #48]	@ 0x30
      hi2c->State = HAL_I2C_STATE_LISTEN;
 80031fc:	687b      	ldr	r3, [r7, #4]
 80031fe:	2228      	movs	r2, #40	@ 0x28
 8003200:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
      HAL_I2C_SlaveRxCpltCallback(hi2c);
 8003204:	6878      	ldr	r0, [r7, #4]
 8003206:	f7ff f80d 	bl	8002224 <HAL_I2C_SlaveRxCpltCallback>
    if (hi2c->State == HAL_I2C_STATE_LISTEN)
 800320a:	687b      	ldr	r3, [r7, #4]
 800320c:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8003210:	b2db      	uxtb	r3, r3
 8003212:	2b28      	cmp	r3, #40	@ 0x28
 8003214:	d111      	bne.n	800323a <I2C_Slave_STOPF+0x226>
      hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 8003216:	687b      	ldr	r3, [r7, #4]
 8003218:	4a15      	ldr	r2, [pc, #84]	@ (8003270 <I2C_Slave_STOPF+0x25c>)
 800321a:	62da      	str	r2, [r3, #44]	@ 0x2c
      hi2c->PreviousState = I2C_STATE_NONE;
 800321c:	687b      	ldr	r3, [r7, #4]
 800321e:	2200      	movs	r2, #0
 8003220:	631a      	str	r2, [r3, #48]	@ 0x30
      hi2c->State = HAL_I2C_STATE_READY;
 8003222:	687b      	ldr	r3, [r7, #4]
 8003224:	2220      	movs	r2, #32
 8003226:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
      hi2c->Mode = HAL_I2C_MODE_NONE;
 800322a:	687b      	ldr	r3, [r7, #4]
 800322c:	2200      	movs	r2, #0
 800322e:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
      HAL_I2C_ListenCpltCallback(hi2c);
 8003232:	6878      	ldr	r0, [r7, #4]
 8003234:	f7ff f80e 	bl	8002254 <HAL_I2C_ListenCpltCallback>
}
 8003238:	e014      	b.n	8003264 <I2C_Slave_STOPF+0x250>
      if ((hi2c->PreviousState  == I2C_STATE_SLAVE_BUSY_RX) || (CurrentState == HAL_I2C_STATE_BUSY_RX))
 800323a:	687b      	ldr	r3, [r7, #4]
 800323c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800323e:	2b22      	cmp	r3, #34	@ 0x22
 8003240:	d002      	beq.n	8003248 <I2C_Slave_STOPF+0x234>
 8003242:	7bfb      	ldrb	r3, [r7, #15]
 8003244:	2b22      	cmp	r3, #34	@ 0x22
 8003246:	d10d      	bne.n	8003264 <I2C_Slave_STOPF+0x250>
        hi2c->PreviousState = I2C_STATE_NONE;
 8003248:	687b      	ldr	r3, [r7, #4]
 800324a:	2200      	movs	r2, #0
 800324c:	631a      	str	r2, [r3, #48]	@ 0x30
        hi2c->State = HAL_I2C_STATE_READY;
 800324e:	687b      	ldr	r3, [r7, #4]
 8003250:	2220      	movs	r2, #32
 8003252:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
        hi2c->Mode = HAL_I2C_MODE_NONE;
 8003256:	687b      	ldr	r3, [r7, #4]
 8003258:	2200      	movs	r2, #0
 800325a:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
        HAL_I2C_SlaveRxCpltCallback(hi2c);
 800325e:	6878      	ldr	r0, [r7, #4]
 8003260:	f7fe ffe0 	bl	8002224 <HAL_I2C_SlaveRxCpltCallback>
}
 8003264:	bf00      	nop
 8003266:	3710      	adds	r7, #16
 8003268:	46bd      	mov	sp, r7
 800326a:	bd80      	pop	{r7, pc}
 800326c:	080035c1 	.word	0x080035c1
 8003270:	ffff0000 	.word	0xffff0000

08003274 <I2C_Slave_AF>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_Slave_AF(I2C_HandleTypeDef *hi2c)
{
 8003274:	b580      	push	{r7, lr}
 8003276:	b084      	sub	sp, #16
 8003278:	af00      	add	r7, sp, #0
 800327a:	6078      	str	r0, [r7, #4]
  /* Declaration of temporary variables to prevent undefined behavior of volatile usage */
  HAL_I2C_StateTypeDef CurrentState = hi2c->State;
 800327c:	687b      	ldr	r3, [r7, #4]
 800327e:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8003282:	73fb      	strb	r3, [r7, #15]
  uint32_t CurrentXferOptions       = hi2c->XferOptions;
 8003284:	687b      	ldr	r3, [r7, #4]
 8003286:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8003288:	60bb      	str	r3, [r7, #8]

  if (((CurrentXferOptions ==  I2C_FIRST_AND_LAST_FRAME) || (CurrentXferOptions == I2C_LAST_FRAME)) && \
 800328a:	68bb      	ldr	r3, [r7, #8]
 800328c:	2b08      	cmp	r3, #8
 800328e:	d002      	beq.n	8003296 <I2C_Slave_AF+0x22>
 8003290:	68bb      	ldr	r3, [r7, #8]
 8003292:	2b20      	cmp	r3, #32
 8003294:	d129      	bne.n	80032ea <I2C_Slave_AF+0x76>
 8003296:	7bfb      	ldrb	r3, [r7, #15]
 8003298:	2b28      	cmp	r3, #40	@ 0x28
 800329a:	d126      	bne.n	80032ea <I2C_Slave_AF+0x76>
      (CurrentState == HAL_I2C_STATE_LISTEN))
  {
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 800329c:	687b      	ldr	r3, [r7, #4]
 800329e:	4a2e      	ldr	r2, [pc, #184]	@ (8003358 <I2C_Slave_AF+0xe4>)
 80032a0:	62da      	str	r2, [r3, #44]	@ 0x2c

    /* Disable EVT, BUF and ERR interrupt */
    __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_BUF | I2C_IT_ERR);
 80032a2:	687b      	ldr	r3, [r7, #4]
 80032a4:	681b      	ldr	r3, [r3, #0]
 80032a6:	685a      	ldr	r2, [r3, #4]
 80032a8:	687b      	ldr	r3, [r7, #4]
 80032aa:	681b      	ldr	r3, [r3, #0]
 80032ac:	f422 62e0 	bic.w	r2, r2, #1792	@ 0x700
 80032b0:	605a      	str	r2, [r3, #4]

    /* Clear AF flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 80032b2:	687b      	ldr	r3, [r7, #4]
 80032b4:	681b      	ldr	r3, [r3, #0]
 80032b6:	f46f 6280 	mvn.w	r2, #1024	@ 0x400
 80032ba:	615a      	str	r2, [r3, #20]

    /* Disable Acknowledge */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 80032bc:	687b      	ldr	r3, [r7, #4]
 80032be:	681b      	ldr	r3, [r3, #0]
 80032c0:	681a      	ldr	r2, [r3, #0]
 80032c2:	687b      	ldr	r3, [r7, #4]
 80032c4:	681b      	ldr	r3, [r3, #0]
 80032c6:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 80032ca:	601a      	str	r2, [r3, #0]

    hi2c->PreviousState = I2C_STATE_NONE;
 80032cc:	687b      	ldr	r3, [r7, #4]
 80032ce:	2200      	movs	r2, #0
 80032d0:	631a      	str	r2, [r3, #48]	@ 0x30
    hi2c->State         = HAL_I2C_STATE_READY;
 80032d2:	687b      	ldr	r3, [r7, #4]
 80032d4:	2220      	movs	r2, #32
 80032d6:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
    hi2c->Mode          = HAL_I2C_MODE_NONE;
 80032da:	687b      	ldr	r3, [r7, #4]
 80032dc:	2200      	movs	r2, #0
 80032de:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e

    /* Call the Listen Complete callback, to inform upper layer of the end of Listen usecase */
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
    hi2c->ListenCpltCallback(hi2c);
#else
    HAL_I2C_ListenCpltCallback(hi2c);
 80032e2:	6878      	ldr	r0, [r7, #4]
 80032e4:	f7fe ffb6 	bl	8002254 <HAL_I2C_ListenCpltCallback>
  {
    /* Clear AF flag only */
    /* State Listen, but XferOptions == FIRST or NEXT */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
  }
}
 80032e8:	e031      	b.n	800334e <I2C_Slave_AF+0xda>
  else if (CurrentState == HAL_I2C_STATE_BUSY_TX)
 80032ea:	7bfb      	ldrb	r3, [r7, #15]
 80032ec:	2b21      	cmp	r3, #33	@ 0x21
 80032ee:	d129      	bne.n	8003344 <I2C_Slave_AF+0xd0>
    hi2c->XferOptions   = I2C_NO_OPTION_FRAME;
 80032f0:	687b      	ldr	r3, [r7, #4]
 80032f2:	4a19      	ldr	r2, [pc, #100]	@ (8003358 <I2C_Slave_AF+0xe4>)
 80032f4:	62da      	str	r2, [r3, #44]	@ 0x2c
    hi2c->PreviousState = I2C_STATE_SLAVE_BUSY_TX;
 80032f6:	687b      	ldr	r3, [r7, #4]
 80032f8:	2221      	movs	r2, #33	@ 0x21
 80032fa:	631a      	str	r2, [r3, #48]	@ 0x30
    hi2c->State         = HAL_I2C_STATE_READY;
 80032fc:	687b      	ldr	r3, [r7, #4]
 80032fe:	2220      	movs	r2, #32
 8003300:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
    hi2c->Mode          = HAL_I2C_MODE_NONE;
 8003304:	687b      	ldr	r3, [r7, #4]
 8003306:	2200      	movs	r2, #0
 8003308:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
    __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_BUF | I2C_IT_ERR);
 800330c:	687b      	ldr	r3, [r7, #4]
 800330e:	681b      	ldr	r3, [r3, #0]
 8003310:	685a      	ldr	r2, [r3, #4]
 8003312:	687b      	ldr	r3, [r7, #4]
 8003314:	681b      	ldr	r3, [r3, #0]
 8003316:	f422 62e0 	bic.w	r2, r2, #1792	@ 0x700
 800331a:	605a      	str	r2, [r3, #4]
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 800331c:	687b      	ldr	r3, [r7, #4]
 800331e:	681b      	ldr	r3, [r3, #0]
 8003320:	f46f 6280 	mvn.w	r2, #1024	@ 0x400
 8003324:	615a      	str	r2, [r3, #20]
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8003326:	687b      	ldr	r3, [r7, #4]
 8003328:	681b      	ldr	r3, [r3, #0]
 800332a:	681a      	ldr	r2, [r3, #0]
 800332c:	687b      	ldr	r3, [r7, #4]
 800332e:	681b      	ldr	r3, [r3, #0]
 8003330:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 8003334:	601a      	str	r2, [r3, #0]
    I2C_Flush_DR(hi2c);
 8003336:	6878      	ldr	r0, [r7, #4]
 8003338:	f7fe fb2f 	bl	800199a <I2C_Flush_DR>
    HAL_I2C_SlaveTxCpltCallback(hi2c);
 800333c:	6878      	ldr	r0, [r7, #4]
 800333e:	f7fe ff67 	bl	8002210 <HAL_I2C_SlaveTxCpltCallback>
}
 8003342:	e004      	b.n	800334e <I2C_Slave_AF+0xda>
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8003344:	687b      	ldr	r3, [r7, #4]
 8003346:	681b      	ldr	r3, [r3, #0]
 8003348:	f46f 6280 	mvn.w	r2, #1024	@ 0x400
 800334c:	615a      	str	r2, [r3, #20]
}
 800334e:	bf00      	nop
 8003350:	3710      	adds	r7, #16
 8003352:	46bd      	mov	sp, r7
 8003354:	bd80      	pop	{r7, pc}
 8003356:	bf00      	nop
 8003358:	ffff0000 	.word	0xffff0000

0800335c <I2C_ITError>:
  * @brief  I2C interrupts error process
  * @param  hi2c I2C handle.
  * @retval None
  */
static void I2C_ITError(I2C_HandleTypeDef *hi2c)
{
 800335c:	b580      	push	{r7, lr}
 800335e:	b084      	sub	sp, #16
 8003360:	af00      	add	r7, sp, #0
 8003362:	6078      	str	r0, [r7, #4]
  /* Declaration of temporary variable to prevent undefined behavior of volatile usage */
  HAL_I2C_StateTypeDef CurrentState = hi2c->State;
 8003364:	687b      	ldr	r3, [r7, #4]
 8003366:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 800336a:	73fb      	strb	r3, [r7, #15]
  HAL_I2C_ModeTypeDef CurrentMode = hi2c->Mode;
 800336c:	687b      	ldr	r3, [r7, #4]
 800336e:	f893 303e 	ldrb.w	r3, [r3, #62]	@ 0x3e
 8003372:	73bb      	strb	r3, [r7, #14]
  uint32_t CurrentError;

  if (((CurrentMode == HAL_I2C_MODE_MASTER) || (CurrentMode == HAL_I2C_MODE_MEM)) && (CurrentState == HAL_I2C_STATE_BUSY_RX))
 8003374:	7bbb      	ldrb	r3, [r7, #14]
 8003376:	2b10      	cmp	r3, #16
 8003378:	d002      	beq.n	8003380 <I2C_ITError+0x24>
 800337a:	7bbb      	ldrb	r3, [r7, #14]
 800337c:	2b40      	cmp	r3, #64	@ 0x40
 800337e:	d10a      	bne.n	8003396 <I2C_ITError+0x3a>
 8003380:	7bfb      	ldrb	r3, [r7, #15]
 8003382:	2b22      	cmp	r3, #34	@ 0x22
 8003384:	d107      	bne.n	8003396 <I2C_ITError+0x3a>
  {
    /* Disable Pos bit in I2C CR1 when error occurred in Master/Mem Receive IT Process */
    hi2c->Instance->CR1 &= ~I2C_CR1_POS;
 8003386:	687b      	ldr	r3, [r7, #4]
 8003388:	681b      	ldr	r3, [r3, #0]
 800338a:	681a      	ldr	r2, [r3, #0]
 800338c:	687b      	ldr	r3, [r7, #4]
 800338e:	681b      	ldr	r3, [r3, #0]
 8003390:	f422 6200 	bic.w	r2, r2, #2048	@ 0x800
 8003394:	601a      	str	r2, [r3, #0]
  }

  if (((uint32_t)CurrentState & (uint32_t)HAL_I2C_STATE_LISTEN) == (uint32_t)HAL_I2C_STATE_LISTEN)
 8003396:	7bfb      	ldrb	r3, [r7, #15]
 8003398:	f003 0328 	and.w	r3, r3, #40	@ 0x28
 800339c:	2b28      	cmp	r3, #40	@ 0x28
 800339e:	d107      	bne.n	80033b0 <I2C_ITError+0x54>
  {
    /* keep HAL_I2C_STATE_LISTEN */
    hi2c->PreviousState = I2C_STATE_NONE;
 80033a0:	687b      	ldr	r3, [r7, #4]
 80033a2:	2200      	movs	r2, #0
 80033a4:	631a      	str	r2, [r3, #48]	@ 0x30
    hi2c->State = HAL_I2C_STATE_LISTEN;
 80033a6:	687b      	ldr	r3, [r7, #4]
 80033a8:	2228      	movs	r2, #40	@ 0x28
 80033aa:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
 80033ae:	e015      	b.n	80033dc <I2C_ITError+0x80>
  }
  else
  {
    /* If state is an abort treatment on going, don't change state */
    /* This change will be do later */
    if ((READ_BIT(hi2c->Instance->CR2, I2C_CR2_DMAEN) != I2C_CR2_DMAEN) && (CurrentState != HAL_I2C_STATE_ABORT))
 80033b0:	687b      	ldr	r3, [r7, #4]
 80033b2:	681b      	ldr	r3, [r3, #0]
 80033b4:	685b      	ldr	r3, [r3, #4]
 80033b6:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 80033ba:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 80033be:	d00a      	beq.n	80033d6 <I2C_ITError+0x7a>
 80033c0:	7bfb      	ldrb	r3, [r7, #15]
 80033c2:	2b60      	cmp	r3, #96	@ 0x60
 80033c4:	d007      	beq.n	80033d6 <I2C_ITError+0x7a>
    {
      hi2c->State = HAL_I2C_STATE_READY;
 80033c6:	687b      	ldr	r3, [r7, #4]
 80033c8:	2220      	movs	r2, #32
 80033ca:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
      hi2c->Mode = HAL_I2C_MODE_NONE;
 80033ce:	687b      	ldr	r3, [r7, #4]
 80033d0:	2200      	movs	r2, #0
 80033d2:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
    }
    hi2c->PreviousState = I2C_STATE_NONE;
 80033d6:	687b      	ldr	r3, [r7, #4]
 80033d8:	2200      	movs	r2, #0
 80033da:	631a      	str	r2, [r3, #48]	@ 0x30
  }

  /* Abort DMA transfer */
  if (READ_BIT(hi2c->Instance->CR2, I2C_CR2_DMAEN) == I2C_CR2_DMAEN)
 80033dc:	687b      	ldr	r3, [r7, #4]
 80033de:	681b      	ldr	r3, [r3, #0]
 80033e0:	685b      	ldr	r3, [r3, #4]
 80033e2:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 80033e6:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 80033ea:	d162      	bne.n	80034b2 <I2C_ITError+0x156>
  {
    hi2c->Instance->CR2 &= ~I2C_CR2_DMAEN;
 80033ec:	687b      	ldr	r3, [r7, #4]
 80033ee:	681b      	ldr	r3, [r3, #0]
 80033f0:	685a      	ldr	r2, [r3, #4]
 80033f2:	687b      	ldr	r3, [r7, #4]
 80033f4:	681b      	ldr	r3, [r3, #0]
 80033f6:	f422 6200 	bic.w	r2, r2, #2048	@ 0x800
 80033fa:	605a      	str	r2, [r3, #4]

    if (hi2c->hdmatx->State != HAL_DMA_STATE_READY)
 80033fc:	687b      	ldr	r3, [r7, #4]
 80033fe:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8003400:	f893 3035 	ldrb.w	r3, [r3, #53]	@ 0x35
 8003404:	b2db      	uxtb	r3, r3
 8003406:	2b01      	cmp	r3, #1
 8003408:	d020      	beq.n	800344c <I2C_ITError+0xf0>
    {
      /* Set the DMA Abort callback :
      will lead to call HAL_I2C_ErrorCallback() at end of DMA abort procedure */
      hi2c->hdmatx->XferAbortCallback = I2C_DMAAbort;
 800340a:	687b      	ldr	r3, [r7, #4]
 800340c:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800340e:	4a6a      	ldr	r2, [pc, #424]	@ (80035b8 <I2C_ITError+0x25c>)
 8003410:	651a      	str	r2, [r3, #80]	@ 0x50

      if (HAL_DMA_Abort_IT(hi2c->hdmatx) != HAL_OK)
 8003412:	687b      	ldr	r3, [r7, #4]
 8003414:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8003416:	4618      	mov	r0, r3
 8003418:	f7fd fe62 	bl	80010e0 <HAL_DMA_Abort_IT>
 800341c:	4603      	mov	r3, r0
 800341e:	2b00      	cmp	r3, #0
 8003420:	f000 8089 	beq.w	8003536 <I2C_ITError+0x1da>
      {
        /* Disable I2C peripheral to prevent dummy data in buffer */
        __HAL_I2C_DISABLE(hi2c);
 8003424:	687b      	ldr	r3, [r7, #4]
 8003426:	681b      	ldr	r3, [r3, #0]
 8003428:	681a      	ldr	r2, [r3, #0]
 800342a:	687b      	ldr	r3, [r7, #4]
 800342c:	681b      	ldr	r3, [r3, #0]
 800342e:	f022 0201 	bic.w	r2, r2, #1
 8003432:	601a      	str	r2, [r3, #0]

        hi2c->State = HAL_I2C_STATE_READY;
 8003434:	687b      	ldr	r3, [r7, #4]
 8003436:	2220      	movs	r2, #32
 8003438:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

        /* Call Directly XferAbortCallback function in case of error */
        hi2c->hdmatx->XferAbortCallback(hi2c->hdmatx);
 800343c:	687b      	ldr	r3, [r7, #4]
 800343e:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8003440:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8003442:	687a      	ldr	r2, [r7, #4]
 8003444:	6b52      	ldr	r2, [r2, #52]	@ 0x34
 8003446:	4610      	mov	r0, r2
 8003448:	4798      	blx	r3
 800344a:	e074      	b.n	8003536 <I2C_ITError+0x1da>
    }
    else
    {
      /* Set the DMA Abort callback :
      will lead to call HAL_I2C_ErrorCallback() at end of DMA abort procedure */
      hi2c->hdmarx->XferAbortCallback = I2C_DMAAbort;
 800344c:	687b      	ldr	r3, [r7, #4]
 800344e:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8003450:	4a59      	ldr	r2, [pc, #356]	@ (80035b8 <I2C_ITError+0x25c>)
 8003452:	651a      	str	r2, [r3, #80]	@ 0x50

      if (HAL_DMA_Abort_IT(hi2c->hdmarx) != HAL_OK)
 8003454:	687b      	ldr	r3, [r7, #4]
 8003456:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8003458:	4618      	mov	r0, r3
 800345a:	f7fd fe41 	bl	80010e0 <HAL_DMA_Abort_IT>
 800345e:	4603      	mov	r3, r0
 8003460:	2b00      	cmp	r3, #0
 8003462:	d068      	beq.n	8003536 <I2C_ITError+0x1da>
      {
        /* Store Last receive data if any */
        if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == SET)
 8003464:	687b      	ldr	r3, [r7, #4]
 8003466:	681b      	ldr	r3, [r3, #0]
 8003468:	695b      	ldr	r3, [r3, #20]
 800346a:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800346e:	2b40      	cmp	r3, #64	@ 0x40
 8003470:	d10b      	bne.n	800348a <I2C_ITError+0x12e>
        {
          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8003472:	687b      	ldr	r3, [r7, #4]
 8003474:	681b      	ldr	r3, [r3, #0]
 8003476:	691a      	ldr	r2, [r3, #16]
 8003478:	687b      	ldr	r3, [r7, #4]
 800347a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800347c:	b2d2      	uxtb	r2, r2
 800347e:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8003480:	687b      	ldr	r3, [r7, #4]
 8003482:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003484:	1c5a      	adds	r2, r3, #1
 8003486:	687b      	ldr	r3, [r7, #4]
 8003488:	625a      	str	r2, [r3, #36]	@ 0x24
        }

        /* Disable I2C peripheral to prevent dummy data in buffer */
        __HAL_I2C_DISABLE(hi2c);
 800348a:	687b      	ldr	r3, [r7, #4]
 800348c:	681b      	ldr	r3, [r3, #0]
 800348e:	681a      	ldr	r2, [r3, #0]
 8003490:	687b      	ldr	r3, [r7, #4]
 8003492:	681b      	ldr	r3, [r3, #0]
 8003494:	f022 0201 	bic.w	r2, r2, #1
 8003498:	601a      	str	r2, [r3, #0]

        hi2c->State = HAL_I2C_STATE_READY;
 800349a:	687b      	ldr	r3, [r7, #4]
 800349c:	2220      	movs	r2, #32
 800349e:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

        /* Call Directly hi2c->hdmarx->XferAbortCallback function in case of error */
        hi2c->hdmarx->XferAbortCallback(hi2c->hdmarx);
 80034a2:	687b      	ldr	r3, [r7, #4]
 80034a4:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80034a6:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 80034a8:	687a      	ldr	r2, [r7, #4]
 80034aa:	6b92      	ldr	r2, [r2, #56]	@ 0x38
 80034ac:	4610      	mov	r0, r2
 80034ae:	4798      	blx	r3
 80034b0:	e041      	b.n	8003536 <I2C_ITError+0x1da>
      }
    }
  }
  else if (hi2c->State == HAL_I2C_STATE_ABORT)
 80034b2:	687b      	ldr	r3, [r7, #4]
 80034b4:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 80034b8:	b2db      	uxtb	r3, r3
 80034ba:	2b60      	cmp	r3, #96	@ 0x60
 80034bc:	d125      	bne.n	800350a <I2C_ITError+0x1ae>
  {
    hi2c->State = HAL_I2C_STATE_READY;
 80034be:	687b      	ldr	r3, [r7, #4]
 80034c0:	2220      	movs	r2, #32
 80034c2:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 80034c6:	687b      	ldr	r3, [r7, #4]
 80034c8:	2200      	movs	r2, #0
 80034ca:	641a      	str	r2, [r3, #64]	@ 0x40

    /* Store Last receive data if any */
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == SET)
 80034cc:	687b      	ldr	r3, [r7, #4]
 80034ce:	681b      	ldr	r3, [r3, #0]
 80034d0:	695b      	ldr	r3, [r3, #20]
 80034d2:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80034d6:	2b40      	cmp	r3, #64	@ 0x40
 80034d8:	d10b      	bne.n	80034f2 <I2C_ITError+0x196>
    {
      /* Read data from DR */
      *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 80034da:	687b      	ldr	r3, [r7, #4]
 80034dc:	681b      	ldr	r3, [r3, #0]
 80034de:	691a      	ldr	r2, [r3, #16]
 80034e0:	687b      	ldr	r3, [r7, #4]
 80034e2:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80034e4:	b2d2      	uxtb	r2, r2
 80034e6:	701a      	strb	r2, [r3, #0]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 80034e8:	687b      	ldr	r3, [r7, #4]
 80034ea:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80034ec:	1c5a      	adds	r2, r3, #1
 80034ee:	687b      	ldr	r3, [r7, #4]
 80034f0:	625a      	str	r2, [r3, #36]	@ 0x24
    }

    /* Disable I2C peripheral to prevent dummy data in buffer */
    __HAL_I2C_DISABLE(hi2c);
 80034f2:	687b      	ldr	r3, [r7, #4]
 80034f4:	681b      	ldr	r3, [r3, #0]
 80034f6:	681a      	ldr	r2, [r3, #0]
 80034f8:	687b      	ldr	r3, [r7, #4]
 80034fa:	681b      	ldr	r3, [r3, #0]
 80034fc:	f022 0201 	bic.w	r2, r2, #1
 8003500:	601a      	str	r2, [r3, #0]

    /* Call the corresponding callback to inform upper layer of End of Transfer */
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
    hi2c->AbortCpltCallback(hi2c);
#else
    HAL_I2C_AbortCpltCallback(hi2c);
 8003502:	6878      	ldr	r0, [r7, #4]
 8003504:	f7fe fece 	bl	80022a4 <HAL_I2C_AbortCpltCallback>
 8003508:	e015      	b.n	8003536 <I2C_ITError+0x1da>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }
  else
  {
    /* Store Last receive data if any */
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == SET)
 800350a:	687b      	ldr	r3, [r7, #4]
 800350c:	681b      	ldr	r3, [r3, #0]
 800350e:	695b      	ldr	r3, [r3, #20]
 8003510:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8003514:	2b40      	cmp	r3, #64	@ 0x40
 8003516:	d10b      	bne.n	8003530 <I2C_ITError+0x1d4>
    {
      /* Read data from DR */
      *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8003518:	687b      	ldr	r3, [r7, #4]
 800351a:	681b      	ldr	r3, [r3, #0]
 800351c:	691a      	ldr	r2, [r3, #16]
 800351e:	687b      	ldr	r3, [r7, #4]
 8003520:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003522:	b2d2      	uxtb	r2, r2
 8003524:	701a      	strb	r2, [r3, #0]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 8003526:	687b      	ldr	r3, [r7, #4]
 8003528:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800352a:	1c5a      	adds	r2, r3, #1
 800352c:	687b      	ldr	r3, [r7, #4]
 800352e:	625a      	str	r2, [r3, #36]	@ 0x24

    /* Call user error callback */
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
    hi2c->ErrorCallback(hi2c);
#else
    HAL_I2C_ErrorCallback(hi2c);
 8003530:	6878      	ldr	r0, [r7, #4]
 8003532:	f7fe fead 	bl	8002290 <HAL_I2C_ErrorCallback>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  /* STOP Flag is not set after a NACK reception, BusError, ArbitrationLost, OverRun */
  CurrentError = hi2c->ErrorCode;
 8003536:	687b      	ldr	r3, [r7, #4]
 8003538:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800353a:	60bb      	str	r3, [r7, #8]

  if (((CurrentError & HAL_I2C_ERROR_BERR) == HAL_I2C_ERROR_BERR) || \
 800353c:	68bb      	ldr	r3, [r7, #8]
 800353e:	f003 0301 	and.w	r3, r3, #1
 8003542:	2b00      	cmp	r3, #0
 8003544:	d10e      	bne.n	8003564 <I2C_ITError+0x208>
      ((CurrentError & HAL_I2C_ERROR_ARLO) == HAL_I2C_ERROR_ARLO) || \
 8003546:	68bb      	ldr	r3, [r7, #8]
 8003548:	f003 0302 	and.w	r3, r3, #2
  if (((CurrentError & HAL_I2C_ERROR_BERR) == HAL_I2C_ERROR_BERR) || \
 800354c:	2b00      	cmp	r3, #0
 800354e:	d109      	bne.n	8003564 <I2C_ITError+0x208>
      ((CurrentError & HAL_I2C_ERROR_AF) == HAL_I2C_ERROR_AF)     || \
 8003550:	68bb      	ldr	r3, [r7, #8]
 8003552:	f003 0304 	and.w	r3, r3, #4
      ((CurrentError & HAL_I2C_ERROR_ARLO) == HAL_I2C_ERROR_ARLO) || \
 8003556:	2b00      	cmp	r3, #0
 8003558:	d104      	bne.n	8003564 <I2C_ITError+0x208>
      ((CurrentError & HAL_I2C_ERROR_OVR) == HAL_I2C_ERROR_OVR))
 800355a:	68bb      	ldr	r3, [r7, #8]
 800355c:	f003 0308 	and.w	r3, r3, #8
      ((CurrentError & HAL_I2C_ERROR_AF) == HAL_I2C_ERROR_AF)     || \
 8003560:	2b00      	cmp	r3, #0
 8003562:	d007      	beq.n	8003574 <I2C_ITError+0x218>
  {
    /* Disable EVT, BUF and ERR interrupt */
    __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_BUF | I2C_IT_ERR);
 8003564:	687b      	ldr	r3, [r7, #4]
 8003566:	681b      	ldr	r3, [r3, #0]
 8003568:	685a      	ldr	r2, [r3, #4]
 800356a:	687b      	ldr	r3, [r7, #4]
 800356c:	681b      	ldr	r3, [r3, #0]
 800356e:	f422 62e0 	bic.w	r2, r2, #1792	@ 0x700
 8003572:	605a      	str	r2, [r3, #4]
  }

  /* So may inform upper layer that listen phase is stopped */
  /* during NACK error treatment */
  CurrentState = hi2c->State;
 8003574:	687b      	ldr	r3, [r7, #4]
 8003576:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 800357a:	73fb      	strb	r3, [r7, #15]
  if (((hi2c->ErrorCode & HAL_I2C_ERROR_AF) == HAL_I2C_ERROR_AF) && (CurrentState == HAL_I2C_STATE_LISTEN))
 800357c:	687b      	ldr	r3, [r7, #4]
 800357e:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003580:	f003 0304 	and.w	r3, r3, #4
 8003584:	2b04      	cmp	r3, #4
 8003586:	d113      	bne.n	80035b0 <I2C_ITError+0x254>
 8003588:	7bfb      	ldrb	r3, [r7, #15]
 800358a:	2b28      	cmp	r3, #40	@ 0x28
 800358c:	d110      	bne.n	80035b0 <I2C_ITError+0x254>
  {
    hi2c->XferOptions   = I2C_NO_OPTION_FRAME;
 800358e:	687b      	ldr	r3, [r7, #4]
 8003590:	4a0a      	ldr	r2, [pc, #40]	@ (80035bc <I2C_ITError+0x260>)
 8003592:	62da      	str	r2, [r3, #44]	@ 0x2c
    hi2c->PreviousState = I2C_STATE_NONE;
 8003594:	687b      	ldr	r3, [r7, #4]
 8003596:	2200      	movs	r2, #0
 8003598:	631a      	str	r2, [r3, #48]	@ 0x30
    hi2c->State         = HAL_I2C_STATE_READY;
 800359a:	687b      	ldr	r3, [r7, #4]
 800359c:	2220      	movs	r2, #32
 800359e:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
    hi2c->Mode          = HAL_I2C_MODE_NONE;
 80035a2:	687b      	ldr	r3, [r7, #4]
 80035a4:	2200      	movs	r2, #0
 80035a6:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e

    /* Call the Listen Complete callback, to inform upper layer of the end of Listen usecase */
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
    hi2c->ListenCpltCallback(hi2c);
#else
    HAL_I2C_ListenCpltCallback(hi2c);
 80035aa:	6878      	ldr	r0, [r7, #4]
 80035ac:	f7fe fe52 	bl	8002254 <HAL_I2C_ListenCpltCallback>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }
}
 80035b0:	bf00      	nop
 80035b2:	3710      	adds	r7, #16
 80035b4:	46bd      	mov	sp, r7
 80035b6:	bd80      	pop	{r7, pc}
 80035b8:	080035c1 	.word	0x080035c1
 80035bc:	ffff0000 	.word	0xffff0000

080035c0 <I2C_DMAAbort>:
  *        (To be called at end of DMA Abort procedure).
  * @param hdma DMA handle.
  * @retval None
  */
static void I2C_DMAAbort(DMA_HandleTypeDef *hdma)
{
 80035c0:	b580      	push	{r7, lr}
 80035c2:	b086      	sub	sp, #24
 80035c4:	af00      	add	r7, sp, #0
 80035c6:	6078      	str	r0, [r7, #4]
  __IO uint32_t count = 0U;
 80035c8:	2300      	movs	r3, #0
 80035ca:	60fb      	str	r3, [r7, #12]
  I2C_HandleTypeDef *hi2c = (I2C_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent; /* Derogation MISRAC2012-Rule-11.5 */
 80035cc:	687b      	ldr	r3, [r7, #4]
 80035ce:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80035d0:	617b      	str	r3, [r7, #20]

  /* Declaration of temporary variable to prevent undefined behavior of volatile usage */
  HAL_I2C_StateTypeDef CurrentState = hi2c->State;
 80035d2:	697b      	ldr	r3, [r7, #20]
 80035d4:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 80035d8:	74fb      	strb	r3, [r7, #19]

  /* During abort treatment, check that there is no pending STOP request */
  /* Wait until STOP flag is reset */
  count = I2C_TIMEOUT_FLAG * (SystemCoreClock / 25U / 1000U);
 80035da:	4b4b      	ldr	r3, [pc, #300]	@ (8003708 <I2C_DMAAbort+0x148>)
 80035dc:	681b      	ldr	r3, [r3, #0]
 80035de:	08db      	lsrs	r3, r3, #3
 80035e0:	4a4a      	ldr	r2, [pc, #296]	@ (800370c <I2C_DMAAbort+0x14c>)
 80035e2:	fba2 2303 	umull	r2, r3, r2, r3
 80035e6:	0a1a      	lsrs	r2, r3, #8
 80035e8:	4613      	mov	r3, r2
 80035ea:	009b      	lsls	r3, r3, #2
 80035ec:	4413      	add	r3, r2
 80035ee:	00da      	lsls	r2, r3, #3
 80035f0:	1ad3      	subs	r3, r2, r3
 80035f2:	60fb      	str	r3, [r7, #12]
  do
  {
    if (count == 0U)
 80035f4:	68fb      	ldr	r3, [r7, #12]
 80035f6:	2b00      	cmp	r3, #0
 80035f8:	d106      	bne.n	8003608 <I2C_DMAAbort+0x48>
    {
      hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 80035fa:	697b      	ldr	r3, [r7, #20]
 80035fc:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80035fe:	f043 0220 	orr.w	r2, r3, #32
 8003602:	697b      	ldr	r3, [r7, #20]
 8003604:	641a      	str	r2, [r3, #64]	@ 0x40
      break;
 8003606:	e00a      	b.n	800361e <I2C_DMAAbort+0x5e>
    }
    count--;
 8003608:	68fb      	ldr	r3, [r7, #12]
 800360a:	3b01      	subs	r3, #1
 800360c:	60fb      	str	r3, [r7, #12]
  }
  while (READ_BIT(hi2c->Instance->CR1, I2C_CR1_STOP) == I2C_CR1_STOP);
 800360e:	697b      	ldr	r3, [r7, #20]
 8003610:	681b      	ldr	r3, [r3, #0]
 8003612:	681b      	ldr	r3, [r3, #0]
 8003614:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 8003618:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 800361c:	d0ea      	beq.n	80035f4 <I2C_DMAAbort+0x34>

  /* Clear Complete callback */
  if (hi2c->hdmatx != NULL)
 800361e:	697b      	ldr	r3, [r7, #20]
 8003620:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8003622:	2b00      	cmp	r3, #0
 8003624:	d003      	beq.n	800362e <I2C_DMAAbort+0x6e>
  {
    hi2c->hdmatx->XferCpltCallback = NULL;
 8003626:	697b      	ldr	r3, [r7, #20]
 8003628:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800362a:	2200      	movs	r2, #0
 800362c:	63da      	str	r2, [r3, #60]	@ 0x3c
  }
  if (hi2c->hdmarx != NULL)
 800362e:	697b      	ldr	r3, [r7, #20]
 8003630:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8003632:	2b00      	cmp	r3, #0
 8003634:	d003      	beq.n	800363e <I2C_DMAAbort+0x7e>
  {
    hi2c->hdmarx->XferCpltCallback = NULL;
 8003636:	697b      	ldr	r3, [r7, #20]
 8003638:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800363a:	2200      	movs	r2, #0
 800363c:	63da      	str	r2, [r3, #60]	@ 0x3c
  }

  /* Disable Acknowledge */
  CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 800363e:	697b      	ldr	r3, [r7, #20]
 8003640:	681b      	ldr	r3, [r3, #0]
 8003642:	681a      	ldr	r2, [r3, #0]
 8003644:	697b      	ldr	r3, [r7, #20]
 8003646:	681b      	ldr	r3, [r3, #0]
 8003648:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 800364c:	601a      	str	r2, [r3, #0]

  hi2c->XferCount = 0U;
 800364e:	697b      	ldr	r3, [r7, #20]
 8003650:	2200      	movs	r2, #0
 8003652:	855a      	strh	r2, [r3, #42]	@ 0x2a

  /* Reset XferAbortCallback */
  if (hi2c->hdmatx != NULL)
 8003654:	697b      	ldr	r3, [r7, #20]
 8003656:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8003658:	2b00      	cmp	r3, #0
 800365a:	d003      	beq.n	8003664 <I2C_DMAAbort+0xa4>
  {
    hi2c->hdmatx->XferAbortCallback = NULL;
 800365c:	697b      	ldr	r3, [r7, #20]
 800365e:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8003660:	2200      	movs	r2, #0
 8003662:	651a      	str	r2, [r3, #80]	@ 0x50
  }
  if (hi2c->hdmarx != NULL)
 8003664:	697b      	ldr	r3, [r7, #20]
 8003666:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8003668:	2b00      	cmp	r3, #0
 800366a:	d003      	beq.n	8003674 <I2C_DMAAbort+0xb4>
  {
    hi2c->hdmarx->XferAbortCallback = NULL;
 800366c:	697b      	ldr	r3, [r7, #20]
 800366e:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8003670:	2200      	movs	r2, #0
 8003672:	651a      	str	r2, [r3, #80]	@ 0x50
  }

  /* Disable I2C peripheral to prevent dummy data in buffer */
  __HAL_I2C_DISABLE(hi2c);
 8003674:	697b      	ldr	r3, [r7, #20]
 8003676:	681b      	ldr	r3, [r3, #0]
 8003678:	681a      	ldr	r2, [r3, #0]
 800367a:	697b      	ldr	r3, [r7, #20]
 800367c:	681b      	ldr	r3, [r3, #0]
 800367e:	f022 0201 	bic.w	r2, r2, #1
 8003682:	601a      	str	r2, [r3, #0]

  /* Check if come from abort from user */
  if (hi2c->State == HAL_I2C_STATE_ABORT)
 8003684:	697b      	ldr	r3, [r7, #20]
 8003686:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 800368a:	b2db      	uxtb	r3, r3
 800368c:	2b60      	cmp	r3, #96	@ 0x60
 800368e:	d10e      	bne.n	80036ae <I2C_DMAAbort+0xee>
  {
    hi2c->State         = HAL_I2C_STATE_READY;
 8003690:	697b      	ldr	r3, [r7, #20]
 8003692:	2220      	movs	r2, #32
 8003694:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
    hi2c->Mode          = HAL_I2C_MODE_NONE;
 8003698:	697b      	ldr	r3, [r7, #20]
 800369a:	2200      	movs	r2, #0
 800369c:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
    hi2c->ErrorCode     = HAL_I2C_ERROR_NONE;
 80036a0:	697b      	ldr	r3, [r7, #20]
 80036a2:	2200      	movs	r2, #0
 80036a4:	641a      	str	r2, [r3, #64]	@ 0x40

    /* Call the corresponding callback to inform upper layer of End of Transfer */
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
    hi2c->AbortCpltCallback(hi2c);
#else
    HAL_I2C_AbortCpltCallback(hi2c);
 80036a6:	6978      	ldr	r0, [r7, #20]
 80036a8:	f7fe fdfc 	bl	80022a4 <HAL_I2C_AbortCpltCallback>
    hi2c->ErrorCallback(hi2c);
#else
    HAL_I2C_ErrorCallback(hi2c);
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }
}
 80036ac:	e027      	b.n	80036fe <I2C_DMAAbort+0x13e>
    if (((uint32_t)CurrentState & (uint32_t)HAL_I2C_STATE_LISTEN) == (uint32_t)HAL_I2C_STATE_LISTEN)
 80036ae:	7cfb      	ldrb	r3, [r7, #19]
 80036b0:	f003 0328 	and.w	r3, r3, #40	@ 0x28
 80036b4:	2b28      	cmp	r3, #40	@ 0x28
 80036b6:	d117      	bne.n	80036e8 <I2C_DMAAbort+0x128>
      __HAL_I2C_ENABLE(hi2c);
 80036b8:	697b      	ldr	r3, [r7, #20]
 80036ba:	681b      	ldr	r3, [r3, #0]
 80036bc:	681a      	ldr	r2, [r3, #0]
 80036be:	697b      	ldr	r3, [r7, #20]
 80036c0:	681b      	ldr	r3, [r3, #0]
 80036c2:	f042 0201 	orr.w	r2, r2, #1
 80036c6:	601a      	str	r2, [r3, #0]
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 80036c8:	697b      	ldr	r3, [r7, #20]
 80036ca:	681b      	ldr	r3, [r3, #0]
 80036cc:	681a      	ldr	r2, [r3, #0]
 80036ce:	697b      	ldr	r3, [r7, #20]
 80036d0:	681b      	ldr	r3, [r3, #0]
 80036d2:	f442 6280 	orr.w	r2, r2, #1024	@ 0x400
 80036d6:	601a      	str	r2, [r3, #0]
      hi2c->PreviousState = I2C_STATE_NONE;
 80036d8:	697b      	ldr	r3, [r7, #20]
 80036da:	2200      	movs	r2, #0
 80036dc:	631a      	str	r2, [r3, #48]	@ 0x30
      hi2c->State = HAL_I2C_STATE_LISTEN;
 80036de:	697b      	ldr	r3, [r7, #20]
 80036e0:	2228      	movs	r2, #40	@ 0x28
 80036e2:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
 80036e6:	e007      	b.n	80036f8 <I2C_DMAAbort+0x138>
      hi2c->State = HAL_I2C_STATE_READY;
 80036e8:	697b      	ldr	r3, [r7, #20]
 80036ea:	2220      	movs	r2, #32
 80036ec:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
      hi2c->Mode = HAL_I2C_MODE_NONE;
 80036f0:	697b      	ldr	r3, [r7, #20]
 80036f2:	2200      	movs	r2, #0
 80036f4:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
    HAL_I2C_ErrorCallback(hi2c);
 80036f8:	6978      	ldr	r0, [r7, #20]
 80036fa:	f7fe fdc9 	bl	8002290 <HAL_I2C_ErrorCallback>
}
 80036fe:	bf00      	nop
 8003700:	3718      	adds	r7, #24
 8003702:	46bd      	mov	sp, r7
 8003704:	bd80      	pop	{r7, pc}
 8003706:	bf00      	nop
 8003708:	20000000 	.word	0x20000000
 800370c:	14f8b589 	.word	0x14f8b589

08003710 <I2C_WaitOnFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, FlagStatus Status, uint32_t Timeout, uint32_t Tickstart)
{
 8003710:	b580      	push	{r7, lr}
 8003712:	b084      	sub	sp, #16
 8003714:	af00      	add	r7, sp, #0
 8003716:	60f8      	str	r0, [r7, #12]
 8003718:	60b9      	str	r1, [r7, #8]
 800371a:	603b      	str	r3, [r7, #0]
 800371c:	4613      	mov	r3, r2
 800371e:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 8003720:	e048      	b.n	80037b4 <I2C_WaitOnFlagUntilTimeout+0xa4>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8003722:	683b      	ldr	r3, [r7, #0]
 8003724:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003728:	d044      	beq.n	80037b4 <I2C_WaitOnFlagUntilTimeout+0xa4>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800372a:	f7fd fbb9 	bl	8000ea0 <HAL_GetTick>
 800372e:	4602      	mov	r2, r0
 8003730:	69bb      	ldr	r3, [r7, #24]
 8003732:	1ad3      	subs	r3, r2, r3
 8003734:	683a      	ldr	r2, [r7, #0]
 8003736:	429a      	cmp	r2, r3
 8003738:	d302      	bcc.n	8003740 <I2C_WaitOnFlagUntilTimeout+0x30>
 800373a:	683b      	ldr	r3, [r7, #0]
 800373c:	2b00      	cmp	r3, #0
 800373e:	d139      	bne.n	80037b4 <I2C_WaitOnFlagUntilTimeout+0xa4>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, Flag) == Status))
 8003740:	68bb      	ldr	r3, [r7, #8]
 8003742:	0c1b      	lsrs	r3, r3, #16
 8003744:	b2db      	uxtb	r3, r3
 8003746:	2b01      	cmp	r3, #1
 8003748:	d10d      	bne.n	8003766 <I2C_WaitOnFlagUntilTimeout+0x56>
 800374a:	68fb      	ldr	r3, [r7, #12]
 800374c:	681b      	ldr	r3, [r3, #0]
 800374e:	695b      	ldr	r3, [r3, #20]
 8003750:	43da      	mvns	r2, r3
 8003752:	68bb      	ldr	r3, [r7, #8]
 8003754:	4013      	ands	r3, r2
 8003756:	b29b      	uxth	r3, r3
 8003758:	2b00      	cmp	r3, #0
 800375a:	bf0c      	ite	eq
 800375c:	2301      	moveq	r3, #1
 800375e:	2300      	movne	r3, #0
 8003760:	b2db      	uxtb	r3, r3
 8003762:	461a      	mov	r2, r3
 8003764:	e00c      	b.n	8003780 <I2C_WaitOnFlagUntilTimeout+0x70>
 8003766:	68fb      	ldr	r3, [r7, #12]
 8003768:	681b      	ldr	r3, [r3, #0]
 800376a:	699b      	ldr	r3, [r3, #24]
 800376c:	43da      	mvns	r2, r3
 800376e:	68bb      	ldr	r3, [r7, #8]
 8003770:	4013      	ands	r3, r2
 8003772:	b29b      	uxth	r3, r3
 8003774:	2b00      	cmp	r3, #0
 8003776:	bf0c      	ite	eq
 8003778:	2301      	moveq	r3, #1
 800377a:	2300      	movne	r3, #0
 800377c:	b2db      	uxtb	r3, r3
 800377e:	461a      	mov	r2, r3
 8003780:	79fb      	ldrb	r3, [r7, #7]
 8003782:	429a      	cmp	r2, r3
 8003784:	d116      	bne.n	80037b4 <I2C_WaitOnFlagUntilTimeout+0xa4>
        {
          hi2c->PreviousState     = I2C_STATE_NONE;
 8003786:	68fb      	ldr	r3, [r7, #12]
 8003788:	2200      	movs	r2, #0
 800378a:	631a      	str	r2, [r3, #48]	@ 0x30
          hi2c->State             = HAL_I2C_STATE_READY;
 800378c:	68fb      	ldr	r3, [r7, #12]
 800378e:	2220      	movs	r2, #32
 8003790:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
          hi2c->Mode              = HAL_I2C_MODE_NONE;
 8003794:	68fb      	ldr	r3, [r7, #12]
 8003796:	2200      	movs	r2, #0
 8003798:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
          hi2c->ErrorCode         |= HAL_I2C_ERROR_TIMEOUT;
 800379c:	68fb      	ldr	r3, [r7, #12]
 800379e:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80037a0:	f043 0220 	orr.w	r2, r3, #32
 80037a4:	68fb      	ldr	r3, [r7, #12]
 80037a6:	641a      	str	r2, [r3, #64]	@ 0x40

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 80037a8:	68fb      	ldr	r3, [r7, #12]
 80037aa:	2200      	movs	r2, #0
 80037ac:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

          return HAL_ERROR;
 80037b0:	2301      	movs	r3, #1
 80037b2:	e023      	b.n	80037fc <I2C_WaitOnFlagUntilTimeout+0xec>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 80037b4:	68bb      	ldr	r3, [r7, #8]
 80037b6:	0c1b      	lsrs	r3, r3, #16
 80037b8:	b2db      	uxtb	r3, r3
 80037ba:	2b01      	cmp	r3, #1
 80037bc:	d10d      	bne.n	80037da <I2C_WaitOnFlagUntilTimeout+0xca>
 80037be:	68fb      	ldr	r3, [r7, #12]
 80037c0:	681b      	ldr	r3, [r3, #0]
 80037c2:	695b      	ldr	r3, [r3, #20]
 80037c4:	43da      	mvns	r2, r3
 80037c6:	68bb      	ldr	r3, [r7, #8]
 80037c8:	4013      	ands	r3, r2
 80037ca:	b29b      	uxth	r3, r3
 80037cc:	2b00      	cmp	r3, #0
 80037ce:	bf0c      	ite	eq
 80037d0:	2301      	moveq	r3, #1
 80037d2:	2300      	movne	r3, #0
 80037d4:	b2db      	uxtb	r3, r3
 80037d6:	461a      	mov	r2, r3
 80037d8:	e00c      	b.n	80037f4 <I2C_WaitOnFlagUntilTimeout+0xe4>
 80037da:	68fb      	ldr	r3, [r7, #12]
 80037dc:	681b      	ldr	r3, [r3, #0]
 80037de:	699b      	ldr	r3, [r3, #24]
 80037e0:	43da      	mvns	r2, r3
 80037e2:	68bb      	ldr	r3, [r7, #8]
 80037e4:	4013      	ands	r3, r2
 80037e6:	b29b      	uxth	r3, r3
 80037e8:	2b00      	cmp	r3, #0
 80037ea:	bf0c      	ite	eq
 80037ec:	2301      	moveq	r3, #1
 80037ee:	2300      	movne	r3, #0
 80037f0:	b2db      	uxtb	r3, r3
 80037f2:	461a      	mov	r2, r3
 80037f4:	79fb      	ldrb	r3, [r7, #7]
 80037f6:	429a      	cmp	r2, r3
 80037f8:	d093      	beq.n	8003722 <I2C_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 80037fa:	2300      	movs	r3, #0
}
 80037fc:	4618      	mov	r0, r3
 80037fe:	3710      	adds	r7, #16
 8003800:	46bd      	mov	sp, r7
 8003802:	bd80      	pop	{r7, pc}

08003804 <I2C_WaitOnTXEFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnTXEFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 8003804:	b580      	push	{r7, lr}
 8003806:	b084      	sub	sp, #16
 8003808:	af00      	add	r7, sp, #0
 800380a:	60f8      	str	r0, [r7, #12]
 800380c:	60b9      	str	r1, [r7, #8]
 800380e:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 8003810:	e034      	b.n	800387c <I2C_WaitOnTXEFlagUntilTimeout+0x78>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c) != HAL_OK)
 8003812:	68f8      	ldr	r0, [r7, #12]
 8003814:	f000 f911 	bl	8003a3a <I2C_IsAcknowledgeFailed>
 8003818:	4603      	mov	r3, r0
 800381a:	2b00      	cmp	r3, #0
 800381c:	d001      	beq.n	8003822 <I2C_WaitOnTXEFlagUntilTimeout+0x1e>
    {
      return HAL_ERROR;
 800381e:	2301      	movs	r3, #1
 8003820:	e034      	b.n	800388c <I2C_WaitOnTXEFlagUntilTimeout+0x88>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8003822:	68bb      	ldr	r3, [r7, #8]
 8003824:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003828:	d028      	beq.n	800387c <I2C_WaitOnTXEFlagUntilTimeout+0x78>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800382a:	f7fd fb39 	bl	8000ea0 <HAL_GetTick>
 800382e:	4602      	mov	r2, r0
 8003830:	687b      	ldr	r3, [r7, #4]
 8003832:	1ad3      	subs	r3, r2, r3
 8003834:	68ba      	ldr	r2, [r7, #8]
 8003836:	429a      	cmp	r2, r3
 8003838:	d302      	bcc.n	8003840 <I2C_WaitOnTXEFlagUntilTimeout+0x3c>
 800383a:	68bb      	ldr	r3, [r7, #8]
 800383c:	2b00      	cmp	r3, #0
 800383e:	d11d      	bne.n	800387c <I2C_WaitOnTXEFlagUntilTimeout+0x78>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET))
 8003840:	68fb      	ldr	r3, [r7, #12]
 8003842:	681b      	ldr	r3, [r3, #0]
 8003844:	695b      	ldr	r3, [r3, #20]
 8003846:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800384a:	2b80      	cmp	r3, #128	@ 0x80
 800384c:	d016      	beq.n	800387c <I2C_WaitOnTXEFlagUntilTimeout+0x78>
        {
          hi2c->PreviousState       = I2C_STATE_NONE;
 800384e:	68fb      	ldr	r3, [r7, #12]
 8003850:	2200      	movs	r2, #0
 8003852:	631a      	str	r2, [r3, #48]	@ 0x30
          hi2c->State               = HAL_I2C_STATE_READY;
 8003854:	68fb      	ldr	r3, [r7, #12]
 8003856:	2220      	movs	r2, #32
 8003858:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
          hi2c->Mode                = HAL_I2C_MODE_NONE;
 800385c:	68fb      	ldr	r3, [r7, #12]
 800385e:	2200      	movs	r2, #0
 8003860:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
          hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8003864:	68fb      	ldr	r3, [r7, #12]
 8003866:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003868:	f043 0220 	orr.w	r2, r3, #32
 800386c:	68fb      	ldr	r3, [r7, #12]
 800386e:	641a      	str	r2, [r3, #64]	@ 0x40

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 8003870:	68fb      	ldr	r3, [r7, #12]
 8003872:	2200      	movs	r2, #0
 8003874:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

          return HAL_ERROR;
 8003878:	2301      	movs	r3, #1
 800387a:	e007      	b.n	800388c <I2C_WaitOnTXEFlagUntilTimeout+0x88>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 800387c:	68fb      	ldr	r3, [r7, #12]
 800387e:	681b      	ldr	r3, [r3, #0]
 8003880:	695b      	ldr	r3, [r3, #20]
 8003882:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8003886:	2b80      	cmp	r3, #128	@ 0x80
 8003888:	d1c3      	bne.n	8003812 <I2C_WaitOnTXEFlagUntilTimeout+0xe>
        }
      }
    }
  }
  return HAL_OK;
 800388a:	2300      	movs	r3, #0
}
 800388c:	4618      	mov	r0, r3
 800388e:	3710      	adds	r7, #16
 8003890:	46bd      	mov	sp, r7
 8003892:	bd80      	pop	{r7, pc}

08003894 <I2C_WaitOnSTOPFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnSTOPFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 8003894:	b580      	push	{r7, lr}
 8003896:	b084      	sub	sp, #16
 8003898:	af00      	add	r7, sp, #0
 800389a:	60f8      	str	r0, [r7, #12]
 800389c:	60b9      	str	r1, [r7, #8]
 800389e:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 80038a0:	e030      	b.n	8003904 <I2C_WaitOnSTOPFlagUntilTimeout+0x70>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c) != HAL_OK)
 80038a2:	68f8      	ldr	r0, [r7, #12]
 80038a4:	f000 f8c9 	bl	8003a3a <I2C_IsAcknowledgeFailed>
 80038a8:	4603      	mov	r3, r0
 80038aa:	2b00      	cmp	r3, #0
 80038ac:	d001      	beq.n	80038b2 <I2C_WaitOnSTOPFlagUntilTimeout+0x1e>
    {
      return HAL_ERROR;
 80038ae:	2301      	movs	r3, #1
 80038b0:	e030      	b.n	8003914 <I2C_WaitOnSTOPFlagUntilTimeout+0x80>
    }

    /* Check for the Timeout */
    if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80038b2:	f7fd faf5 	bl	8000ea0 <HAL_GetTick>
 80038b6:	4602      	mov	r2, r0
 80038b8:	687b      	ldr	r3, [r7, #4]
 80038ba:	1ad3      	subs	r3, r2, r3
 80038bc:	68ba      	ldr	r2, [r7, #8]
 80038be:	429a      	cmp	r2, r3
 80038c0:	d302      	bcc.n	80038c8 <I2C_WaitOnSTOPFlagUntilTimeout+0x34>
 80038c2:	68bb      	ldr	r3, [r7, #8]
 80038c4:	2b00      	cmp	r3, #0
 80038c6:	d11d      	bne.n	8003904 <I2C_WaitOnSTOPFlagUntilTimeout+0x70>
    {
      if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET))
 80038c8:	68fb      	ldr	r3, [r7, #12]
 80038ca:	681b      	ldr	r3, [r3, #0]
 80038cc:	695b      	ldr	r3, [r3, #20]
 80038ce:	f003 0310 	and.w	r3, r3, #16
 80038d2:	2b10      	cmp	r3, #16
 80038d4:	d016      	beq.n	8003904 <I2C_WaitOnSTOPFlagUntilTimeout+0x70>
      {
        hi2c->PreviousState       = I2C_STATE_NONE;
 80038d6:	68fb      	ldr	r3, [r7, #12]
 80038d8:	2200      	movs	r2, #0
 80038da:	631a      	str	r2, [r3, #48]	@ 0x30
        hi2c->State               = HAL_I2C_STATE_READY;
 80038dc:	68fb      	ldr	r3, [r7, #12]
 80038de:	2220      	movs	r2, #32
 80038e0:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
        hi2c->Mode                = HAL_I2C_MODE_NONE;
 80038e4:	68fb      	ldr	r3, [r7, #12]
 80038e6:	2200      	movs	r2, #0
 80038e8:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
        hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 80038ec:	68fb      	ldr	r3, [r7, #12]
 80038ee:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80038f0:	f043 0220 	orr.w	r2, r3, #32
 80038f4:	68fb      	ldr	r3, [r7, #12]
 80038f6:	641a      	str	r2, [r3, #64]	@ 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 80038f8:	68fb      	ldr	r3, [r7, #12]
 80038fa:	2200      	movs	r2, #0
 80038fc:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

        return HAL_ERROR;
 8003900:	2301      	movs	r3, #1
 8003902:	e007      	b.n	8003914 <I2C_WaitOnSTOPFlagUntilTimeout+0x80>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 8003904:	68fb      	ldr	r3, [r7, #12]
 8003906:	681b      	ldr	r3, [r3, #0]
 8003908:	695b      	ldr	r3, [r3, #20]
 800390a:	f003 0310 	and.w	r3, r3, #16
 800390e:	2b10      	cmp	r3, #16
 8003910:	d1c7      	bne.n	80038a2 <I2C_WaitOnSTOPFlagUntilTimeout+0xe>
      }
    }
  }
  return HAL_OK;
 8003912:	2300      	movs	r3, #0
}
 8003914:	4618      	mov	r0, r3
 8003916:	3710      	adds	r7, #16
 8003918:	46bd      	mov	sp, r7
 800391a:	bd80      	pop	{r7, pc}

0800391c <I2C_WaitOnSTOPRequestThroughIT>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnSTOPRequestThroughIT(I2C_HandleTypeDef *hi2c)
{
 800391c:	b480      	push	{r7}
 800391e:	b085      	sub	sp, #20
 8003920:	af00      	add	r7, sp, #0
 8003922:	6078      	str	r0, [r7, #4]
  __IO uint32_t count = 0U;
 8003924:	2300      	movs	r3, #0
 8003926:	60fb      	str	r3, [r7, #12]

  /* Wait until STOP flag is reset */
  count = I2C_TIMEOUT_STOP_FLAG * (SystemCoreClock / 25U / 1000U);
 8003928:	4b13      	ldr	r3, [pc, #76]	@ (8003978 <I2C_WaitOnSTOPRequestThroughIT+0x5c>)
 800392a:	681b      	ldr	r3, [r3, #0]
 800392c:	08db      	lsrs	r3, r3, #3
 800392e:	4a13      	ldr	r2, [pc, #76]	@ (800397c <I2C_WaitOnSTOPRequestThroughIT+0x60>)
 8003930:	fba2 2303 	umull	r2, r3, r2, r3
 8003934:	0a1a      	lsrs	r2, r3, #8
 8003936:	4613      	mov	r3, r2
 8003938:	009b      	lsls	r3, r3, #2
 800393a:	4413      	add	r3, r2
 800393c:	60fb      	str	r3, [r7, #12]
  do
  {
    count--;
 800393e:	68fb      	ldr	r3, [r7, #12]
 8003940:	3b01      	subs	r3, #1
 8003942:	60fb      	str	r3, [r7, #12]
    if (count == 0U)
 8003944:	68fb      	ldr	r3, [r7, #12]
 8003946:	2b00      	cmp	r3, #0
 8003948:	d107      	bne.n	800395a <I2C_WaitOnSTOPRequestThroughIT+0x3e>
    {
      hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 800394a:	687b      	ldr	r3, [r7, #4]
 800394c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800394e:	f043 0220 	orr.w	r2, r3, #32
 8003952:	687b      	ldr	r3, [r7, #4]
 8003954:	641a      	str	r2, [r3, #64]	@ 0x40

      return HAL_ERROR;
 8003956:	2301      	movs	r3, #1
 8003958:	e008      	b.n	800396c <I2C_WaitOnSTOPRequestThroughIT+0x50>
    }
  }
  while (READ_BIT(hi2c->Instance->CR1, I2C_CR1_STOP) == I2C_CR1_STOP);
 800395a:	687b      	ldr	r3, [r7, #4]
 800395c:	681b      	ldr	r3, [r3, #0]
 800395e:	681b      	ldr	r3, [r3, #0]
 8003960:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 8003964:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8003968:	d0e9      	beq.n	800393e <I2C_WaitOnSTOPRequestThroughIT+0x22>

  return HAL_OK;
 800396a:	2300      	movs	r3, #0
}
 800396c:	4618      	mov	r0, r3
 800396e:	3714      	adds	r7, #20
 8003970:	46bd      	mov	sp, r7
 8003972:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003976:	4770      	bx	lr
 8003978:	20000000 	.word	0x20000000
 800397c:	14f8b589 	.word	0x14f8b589

08003980 <I2C_WaitOnRXNEFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnRXNEFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 8003980:	b580      	push	{r7, lr}
 8003982:	b084      	sub	sp, #16
 8003984:	af00      	add	r7, sp, #0
 8003986:	60f8      	str	r0, [r7, #12]
 8003988:	60b9      	str	r1, [r7, #8]
 800398a:	607a      	str	r2, [r7, #4]

  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET)
 800398c:	e049      	b.n	8003a22 <I2C_WaitOnRXNEFlagUntilTimeout+0xa2>
  {
    /* Check if a STOPF is detected */
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == SET)
 800398e:	68fb      	ldr	r3, [r7, #12]
 8003990:	681b      	ldr	r3, [r3, #0]
 8003992:	695b      	ldr	r3, [r3, #20]
 8003994:	f003 0310 	and.w	r3, r3, #16
 8003998:	2b10      	cmp	r3, #16
 800399a:	d119      	bne.n	80039d0 <I2C_WaitOnRXNEFlagUntilTimeout+0x50>
    {
      /* Clear STOP Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 800399c:	68fb      	ldr	r3, [r7, #12]
 800399e:	681b      	ldr	r3, [r3, #0]
 80039a0:	f06f 0210 	mvn.w	r2, #16
 80039a4:	615a      	str	r2, [r3, #20]

      hi2c->PreviousState       = I2C_STATE_NONE;
 80039a6:	68fb      	ldr	r3, [r7, #12]
 80039a8:	2200      	movs	r2, #0
 80039aa:	631a      	str	r2, [r3, #48]	@ 0x30
      hi2c->State               = HAL_I2C_STATE_READY;
 80039ac:	68fb      	ldr	r3, [r7, #12]
 80039ae:	2220      	movs	r2, #32
 80039b0:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
      hi2c->Mode                = HAL_I2C_MODE_NONE;
 80039b4:	68fb      	ldr	r3, [r7, #12]
 80039b6:	2200      	movs	r2, #0
 80039b8:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
      hi2c->ErrorCode           |= HAL_I2C_ERROR_NONE;
 80039bc:	68fb      	ldr	r3, [r7, #12]
 80039be:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 80039c0:	68fb      	ldr	r3, [r7, #12]
 80039c2:	641a      	str	r2, [r3, #64]	@ 0x40

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 80039c4:	68fb      	ldr	r3, [r7, #12]
 80039c6:	2200      	movs	r2, #0
 80039c8:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

      return HAL_ERROR;
 80039cc:	2301      	movs	r3, #1
 80039ce:	e030      	b.n	8003a32 <I2C_WaitOnRXNEFlagUntilTimeout+0xb2>
    }

    /* Check for the Timeout */
    if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80039d0:	f7fd fa66 	bl	8000ea0 <HAL_GetTick>
 80039d4:	4602      	mov	r2, r0
 80039d6:	687b      	ldr	r3, [r7, #4]
 80039d8:	1ad3      	subs	r3, r2, r3
 80039da:	68ba      	ldr	r2, [r7, #8]
 80039dc:	429a      	cmp	r2, r3
 80039de:	d302      	bcc.n	80039e6 <I2C_WaitOnRXNEFlagUntilTimeout+0x66>
 80039e0:	68bb      	ldr	r3, [r7, #8]
 80039e2:	2b00      	cmp	r3, #0
 80039e4:	d11d      	bne.n	8003a22 <I2C_WaitOnRXNEFlagUntilTimeout+0xa2>
    {
      if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET))
 80039e6:	68fb      	ldr	r3, [r7, #12]
 80039e8:	681b      	ldr	r3, [r3, #0]
 80039ea:	695b      	ldr	r3, [r3, #20]
 80039ec:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80039f0:	2b40      	cmp	r3, #64	@ 0x40
 80039f2:	d016      	beq.n	8003a22 <I2C_WaitOnRXNEFlagUntilTimeout+0xa2>
      {
        hi2c->PreviousState       = I2C_STATE_NONE;
 80039f4:	68fb      	ldr	r3, [r7, #12]
 80039f6:	2200      	movs	r2, #0
 80039f8:	631a      	str	r2, [r3, #48]	@ 0x30
        hi2c->State               = HAL_I2C_STATE_READY;
 80039fa:	68fb      	ldr	r3, [r7, #12]
 80039fc:	2220      	movs	r2, #32
 80039fe:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
        hi2c->Mode                = HAL_I2C_MODE_NONE;
 8003a02:	68fb      	ldr	r3, [r7, #12]
 8003a04:	2200      	movs	r2, #0
 8003a06:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
        hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8003a0a:	68fb      	ldr	r3, [r7, #12]
 8003a0c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003a0e:	f043 0220 	orr.w	r2, r3, #32
 8003a12:	68fb      	ldr	r3, [r7, #12]
 8003a14:	641a      	str	r2, [r3, #64]	@ 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8003a16:	68fb      	ldr	r3, [r7, #12]
 8003a18:	2200      	movs	r2, #0
 8003a1a:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

        return HAL_ERROR;
 8003a1e:	2301      	movs	r3, #1
 8003a20:	e007      	b.n	8003a32 <I2C_WaitOnRXNEFlagUntilTimeout+0xb2>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET)
 8003a22:	68fb      	ldr	r3, [r7, #12]
 8003a24:	681b      	ldr	r3, [r3, #0]
 8003a26:	695b      	ldr	r3, [r3, #20]
 8003a28:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8003a2c:	2b40      	cmp	r3, #64	@ 0x40
 8003a2e:	d1ae      	bne.n	800398e <I2C_WaitOnRXNEFlagUntilTimeout+0xe>
      }
    }
  }
  return HAL_OK;
 8003a30:	2300      	movs	r3, #0
}
 8003a32:	4618      	mov	r0, r3
 8003a34:	3710      	adds	r7, #16
 8003a36:	46bd      	mov	sp, r7
 8003a38:	bd80      	pop	{r7, pc}

08003a3a <I2C_IsAcknowledgeFailed>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_IsAcknowledgeFailed(I2C_HandleTypeDef *hi2c)
{
 8003a3a:	b480      	push	{r7}
 8003a3c:	b083      	sub	sp, #12
 8003a3e:	af00      	add	r7, sp, #0
 8003a40:	6078      	str	r0, [r7, #4]
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 8003a42:	687b      	ldr	r3, [r7, #4]
 8003a44:	681b      	ldr	r3, [r3, #0]
 8003a46:	695b      	ldr	r3, [r3, #20]
 8003a48:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8003a4c:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8003a50:	d11b      	bne.n	8003a8a <I2C_IsAcknowledgeFailed+0x50>
  {
    /* Clear NACKF Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8003a52:	687b      	ldr	r3, [r7, #4]
 8003a54:	681b      	ldr	r3, [r3, #0]
 8003a56:	f46f 6280 	mvn.w	r2, #1024	@ 0x400
 8003a5a:	615a      	str	r2, [r3, #20]

    hi2c->PreviousState       = I2C_STATE_NONE;
 8003a5c:	687b      	ldr	r3, [r7, #4]
 8003a5e:	2200      	movs	r2, #0
 8003a60:	631a      	str	r2, [r3, #48]	@ 0x30
    hi2c->State               = HAL_I2C_STATE_READY;
 8003a62:	687b      	ldr	r3, [r7, #4]
 8003a64:	2220      	movs	r2, #32
 8003a66:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
    hi2c->Mode                = HAL_I2C_MODE_NONE;
 8003a6a:	687b      	ldr	r3, [r7, #4]
 8003a6c:	2200      	movs	r2, #0
 8003a6e:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
    hi2c->ErrorCode           |= HAL_I2C_ERROR_AF;
 8003a72:	687b      	ldr	r3, [r7, #4]
 8003a74:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003a76:	f043 0204 	orr.w	r2, r3, #4
 8003a7a:	687b      	ldr	r3, [r7, #4]
 8003a7c:	641a      	str	r2, [r3, #64]	@ 0x40

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8003a7e:	687b      	ldr	r3, [r7, #4]
 8003a80:	2200      	movs	r2, #0
 8003a82:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    return HAL_ERROR;
 8003a86:	2301      	movs	r3, #1
 8003a88:	e000      	b.n	8003a8c <I2C_IsAcknowledgeFailed+0x52>
  }
  return HAL_OK;
 8003a8a:	2300      	movs	r3, #0
}
 8003a8c:	4618      	mov	r0, r3
 8003a8e:	370c      	adds	r7, #12
 8003a90:	46bd      	mov	sp, r7
 8003a92:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003a96:	4770      	bx	lr

08003a98 <I2C_ConvertOtherXferOptions>:
  * @brief  Convert I2Cx OTHER_xxx XferOptions to functional XferOptions.
  * @param  hi2c I2C handle.
  * @retval None
  */
static void I2C_ConvertOtherXferOptions(I2C_HandleTypeDef *hi2c)
{
 8003a98:	b480      	push	{r7}
 8003a9a:	b083      	sub	sp, #12
 8003a9c:	af00      	add	r7, sp, #0
 8003a9e:	6078      	str	r0, [r7, #4]
  /* if user set XferOptions to I2C_OTHER_FRAME            */
  /* it request implicitly to generate a restart condition */
  /* set XferOptions to I2C_FIRST_FRAME                    */
  if (hi2c->XferOptions == I2C_OTHER_FRAME)
 8003aa0:	687b      	ldr	r3, [r7, #4]
 8003aa2:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8003aa4:	f5b3 0f2a 	cmp.w	r3, #11141120	@ 0xaa0000
 8003aa8:	d103      	bne.n	8003ab2 <I2C_ConvertOtherXferOptions+0x1a>
  {
    hi2c->XferOptions = I2C_FIRST_FRAME;
 8003aaa:	687b      	ldr	r3, [r7, #4]
 8003aac:	2201      	movs	r2, #1
 8003aae:	62da      	str	r2, [r3, #44]	@ 0x2c
  }
  else
  {
    /* Nothing to do */
  }
}
 8003ab0:	e007      	b.n	8003ac2 <I2C_ConvertOtherXferOptions+0x2a>
  else if (hi2c->XferOptions == I2C_OTHER_AND_LAST_FRAME)
 8003ab2:	687b      	ldr	r3, [r7, #4]
 8003ab4:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8003ab6:	f1b3 4f2a 	cmp.w	r3, #2852126720	@ 0xaa000000
 8003aba:	d102      	bne.n	8003ac2 <I2C_ConvertOtherXferOptions+0x2a>
    hi2c->XferOptions = I2C_FIRST_AND_LAST_FRAME;
 8003abc:	687b      	ldr	r3, [r7, #4]
 8003abe:	2208      	movs	r2, #8
 8003ac0:	62da      	str	r2, [r3, #44]	@ 0x2c
}
 8003ac2:	bf00      	nop
 8003ac4:	370c      	adds	r7, #12
 8003ac6:	46bd      	mov	sp, r7
 8003ac8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003acc:	4770      	bx	lr
	...

08003ad0 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8003ad0:	b580      	push	{r7, lr}
 8003ad2:	b084      	sub	sp, #16
 8003ad4:	af00      	add	r7, sp, #0
 8003ad6:	6078      	str	r0, [r7, #4]
 8003ad8:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 8003ada:	687b      	ldr	r3, [r7, #4]
 8003adc:	2b00      	cmp	r3, #0
 8003ade:	d101      	bne.n	8003ae4 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8003ae0:	2301      	movs	r3, #1
 8003ae2:	e0cc      	b.n	8003c7e <HAL_RCC_ClockConfig+0x1ae>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 8003ae4:	4b68      	ldr	r3, [pc, #416]	@ (8003c88 <HAL_RCC_ClockConfig+0x1b8>)
 8003ae6:	681b      	ldr	r3, [r3, #0]
 8003ae8:	f003 030f 	and.w	r3, r3, #15
 8003aec:	683a      	ldr	r2, [r7, #0]
 8003aee:	429a      	cmp	r2, r3
 8003af0:	d90c      	bls.n	8003b0c <HAL_RCC_ClockConfig+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8003af2:	4b65      	ldr	r3, [pc, #404]	@ (8003c88 <HAL_RCC_ClockConfig+0x1b8>)
 8003af4:	683a      	ldr	r2, [r7, #0]
 8003af6:	b2d2      	uxtb	r2, r2
 8003af8:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8003afa:	4b63      	ldr	r3, [pc, #396]	@ (8003c88 <HAL_RCC_ClockConfig+0x1b8>)
 8003afc:	681b      	ldr	r3, [r3, #0]
 8003afe:	f003 030f 	and.w	r3, r3, #15
 8003b02:	683a      	ldr	r2, [r7, #0]
 8003b04:	429a      	cmp	r2, r3
 8003b06:	d001      	beq.n	8003b0c <HAL_RCC_ClockConfig+0x3c>
    {
      return HAL_ERROR;
 8003b08:	2301      	movs	r3, #1
 8003b0a:	e0b8      	b.n	8003c7e <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8003b0c:	687b      	ldr	r3, [r7, #4]
 8003b0e:	681b      	ldr	r3, [r3, #0]
 8003b10:	f003 0302 	and.w	r3, r3, #2
 8003b14:	2b00      	cmp	r3, #0
 8003b16:	d020      	beq.n	8003b5a <HAL_RCC_ClockConfig+0x8a>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8003b18:	687b      	ldr	r3, [r7, #4]
 8003b1a:	681b      	ldr	r3, [r3, #0]
 8003b1c:	f003 0304 	and.w	r3, r3, #4
 8003b20:	2b00      	cmp	r3, #0
 8003b22:	d005      	beq.n	8003b30 <HAL_RCC_ClockConfig+0x60>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8003b24:	4b59      	ldr	r3, [pc, #356]	@ (8003c8c <HAL_RCC_ClockConfig+0x1bc>)
 8003b26:	689b      	ldr	r3, [r3, #8]
 8003b28:	4a58      	ldr	r2, [pc, #352]	@ (8003c8c <HAL_RCC_ClockConfig+0x1bc>)
 8003b2a:	f443 53e0 	orr.w	r3, r3, #7168	@ 0x1c00
 8003b2e:	6093      	str	r3, [r2, #8]
    }

    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8003b30:	687b      	ldr	r3, [r7, #4]
 8003b32:	681b      	ldr	r3, [r3, #0]
 8003b34:	f003 0308 	and.w	r3, r3, #8
 8003b38:	2b00      	cmp	r3, #0
 8003b3a:	d005      	beq.n	8003b48 <HAL_RCC_ClockConfig+0x78>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8003b3c:	4b53      	ldr	r3, [pc, #332]	@ (8003c8c <HAL_RCC_ClockConfig+0x1bc>)
 8003b3e:	689b      	ldr	r3, [r3, #8]
 8003b40:	4a52      	ldr	r2, [pc, #328]	@ (8003c8c <HAL_RCC_ClockConfig+0x1bc>)
 8003b42:	f443 4360 	orr.w	r3, r3, #57344	@ 0xe000
 8003b46:	6093      	str	r3, [r2, #8]
    }

    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8003b48:	4b50      	ldr	r3, [pc, #320]	@ (8003c8c <HAL_RCC_ClockConfig+0x1bc>)
 8003b4a:	689b      	ldr	r3, [r3, #8]
 8003b4c:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 8003b50:	687b      	ldr	r3, [r7, #4]
 8003b52:	689b      	ldr	r3, [r3, #8]
 8003b54:	494d      	ldr	r1, [pc, #308]	@ (8003c8c <HAL_RCC_ClockConfig+0x1bc>)
 8003b56:	4313      	orrs	r3, r2
 8003b58:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8003b5a:	687b      	ldr	r3, [r7, #4]
 8003b5c:	681b      	ldr	r3, [r3, #0]
 8003b5e:	f003 0301 	and.w	r3, r3, #1
 8003b62:	2b00      	cmp	r3, #0
 8003b64:	d044      	beq.n	8003bf0 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8003b66:	687b      	ldr	r3, [r7, #4]
 8003b68:	685b      	ldr	r3, [r3, #4]
 8003b6a:	2b01      	cmp	r3, #1
 8003b6c:	d107      	bne.n	8003b7e <HAL_RCC_ClockConfig+0xae>
    {
      /* Check the HSE ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8003b6e:	4b47      	ldr	r3, [pc, #284]	@ (8003c8c <HAL_RCC_ClockConfig+0x1bc>)
 8003b70:	681b      	ldr	r3, [r3, #0]
 8003b72:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8003b76:	2b00      	cmp	r3, #0
 8003b78:	d119      	bne.n	8003bae <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8003b7a:	2301      	movs	r3, #1
 8003b7c:	e07f      	b.n	8003c7e <HAL_RCC_ClockConfig+0x1ae>
      }
    }
    /* PLL is selected as System Clock Source */
    else if ((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8003b7e:	687b      	ldr	r3, [r7, #4]
 8003b80:	685b      	ldr	r3, [r3, #4]
 8003b82:	2b02      	cmp	r3, #2
 8003b84:	d003      	beq.n	8003b8e <HAL_RCC_ClockConfig+0xbe>
             (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
 8003b86:	687b      	ldr	r3, [r7, #4]
 8003b88:	685b      	ldr	r3, [r3, #4]
    else if ((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8003b8a:	2b03      	cmp	r3, #3
 8003b8c:	d107      	bne.n	8003b9e <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8003b8e:	4b3f      	ldr	r3, [pc, #252]	@ (8003c8c <HAL_RCC_ClockConfig+0x1bc>)
 8003b90:	681b      	ldr	r3, [r3, #0]
 8003b92:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8003b96:	2b00      	cmp	r3, #0
 8003b98:	d109      	bne.n	8003bae <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8003b9a:	2301      	movs	r3, #1
 8003b9c:	e06f      	b.n	8003c7e <HAL_RCC_ClockConfig+0x1ae>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8003b9e:	4b3b      	ldr	r3, [pc, #236]	@ (8003c8c <HAL_RCC_ClockConfig+0x1bc>)
 8003ba0:	681b      	ldr	r3, [r3, #0]
 8003ba2:	f003 0302 	and.w	r3, r3, #2
 8003ba6:	2b00      	cmp	r3, #0
 8003ba8:	d101      	bne.n	8003bae <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8003baa:	2301      	movs	r3, #1
 8003bac:	e067      	b.n	8003c7e <HAL_RCC_ClockConfig+0x1ae>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8003bae:	4b37      	ldr	r3, [pc, #220]	@ (8003c8c <HAL_RCC_ClockConfig+0x1bc>)
 8003bb0:	689b      	ldr	r3, [r3, #8]
 8003bb2:	f023 0203 	bic.w	r2, r3, #3
 8003bb6:	687b      	ldr	r3, [r7, #4]
 8003bb8:	685b      	ldr	r3, [r3, #4]
 8003bba:	4934      	ldr	r1, [pc, #208]	@ (8003c8c <HAL_RCC_ClockConfig+0x1bc>)
 8003bbc:	4313      	orrs	r3, r2
 8003bbe:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8003bc0:	f7fd f96e 	bl	8000ea0 <HAL_GetTick>
 8003bc4:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8003bc6:	e00a      	b.n	8003bde <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8003bc8:	f7fd f96a 	bl	8000ea0 <HAL_GetTick>
 8003bcc:	4602      	mov	r2, r0
 8003bce:	68fb      	ldr	r3, [r7, #12]
 8003bd0:	1ad3      	subs	r3, r2, r3
 8003bd2:	f241 3288 	movw	r2, #5000	@ 0x1388
 8003bd6:	4293      	cmp	r3, r2
 8003bd8:	d901      	bls.n	8003bde <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 8003bda:	2303      	movs	r3, #3
 8003bdc:	e04f      	b.n	8003c7e <HAL_RCC_ClockConfig+0x1ae>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8003bde:	4b2b      	ldr	r3, [pc, #172]	@ (8003c8c <HAL_RCC_ClockConfig+0x1bc>)
 8003be0:	689b      	ldr	r3, [r3, #8]
 8003be2:	f003 020c 	and.w	r2, r3, #12
 8003be6:	687b      	ldr	r3, [r7, #4]
 8003be8:	685b      	ldr	r3, [r3, #4]
 8003bea:	009b      	lsls	r3, r3, #2
 8003bec:	429a      	cmp	r2, r3
 8003bee:	d1eb      	bne.n	8003bc8 <HAL_RCC_ClockConfig+0xf8>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 8003bf0:	4b25      	ldr	r3, [pc, #148]	@ (8003c88 <HAL_RCC_ClockConfig+0x1b8>)
 8003bf2:	681b      	ldr	r3, [r3, #0]
 8003bf4:	f003 030f 	and.w	r3, r3, #15
 8003bf8:	683a      	ldr	r2, [r7, #0]
 8003bfa:	429a      	cmp	r2, r3
 8003bfc:	d20c      	bcs.n	8003c18 <HAL_RCC_ClockConfig+0x148>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8003bfe:	4b22      	ldr	r3, [pc, #136]	@ (8003c88 <HAL_RCC_ClockConfig+0x1b8>)
 8003c00:	683a      	ldr	r2, [r7, #0]
 8003c02:	b2d2      	uxtb	r2, r2
 8003c04:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8003c06:	4b20      	ldr	r3, [pc, #128]	@ (8003c88 <HAL_RCC_ClockConfig+0x1b8>)
 8003c08:	681b      	ldr	r3, [r3, #0]
 8003c0a:	f003 030f 	and.w	r3, r3, #15
 8003c0e:	683a      	ldr	r2, [r7, #0]
 8003c10:	429a      	cmp	r2, r3
 8003c12:	d001      	beq.n	8003c18 <HAL_RCC_ClockConfig+0x148>
    {
      return HAL_ERROR;
 8003c14:	2301      	movs	r3, #1
 8003c16:	e032      	b.n	8003c7e <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8003c18:	687b      	ldr	r3, [r7, #4]
 8003c1a:	681b      	ldr	r3, [r3, #0]
 8003c1c:	f003 0304 	and.w	r3, r3, #4
 8003c20:	2b00      	cmp	r3, #0
 8003c22:	d008      	beq.n	8003c36 <HAL_RCC_ClockConfig+0x166>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8003c24:	4b19      	ldr	r3, [pc, #100]	@ (8003c8c <HAL_RCC_ClockConfig+0x1bc>)
 8003c26:	689b      	ldr	r3, [r3, #8]
 8003c28:	f423 52e0 	bic.w	r2, r3, #7168	@ 0x1c00
 8003c2c:	687b      	ldr	r3, [r7, #4]
 8003c2e:	68db      	ldr	r3, [r3, #12]
 8003c30:	4916      	ldr	r1, [pc, #88]	@ (8003c8c <HAL_RCC_ClockConfig+0x1bc>)
 8003c32:	4313      	orrs	r3, r2
 8003c34:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8003c36:	687b      	ldr	r3, [r7, #4]
 8003c38:	681b      	ldr	r3, [r3, #0]
 8003c3a:	f003 0308 	and.w	r3, r3, #8
 8003c3e:	2b00      	cmp	r3, #0
 8003c40:	d009      	beq.n	8003c56 <HAL_RCC_ClockConfig+0x186>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 8003c42:	4b12      	ldr	r3, [pc, #72]	@ (8003c8c <HAL_RCC_ClockConfig+0x1bc>)
 8003c44:	689b      	ldr	r3, [r3, #8]
 8003c46:	f423 4260 	bic.w	r2, r3, #57344	@ 0xe000
 8003c4a:	687b      	ldr	r3, [r7, #4]
 8003c4c:	691b      	ldr	r3, [r3, #16]
 8003c4e:	00db      	lsls	r3, r3, #3
 8003c50:	490e      	ldr	r1, [pc, #56]	@ (8003c8c <HAL_RCC_ClockConfig+0x1bc>)
 8003c52:	4313      	orrs	r3, r2
 8003c54:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos];
 8003c56:	f000 f873 	bl	8003d40 <HAL_RCC_GetSysClockFreq>
 8003c5a:	4602      	mov	r2, r0
 8003c5c:	4b0b      	ldr	r3, [pc, #44]	@ (8003c8c <HAL_RCC_ClockConfig+0x1bc>)
 8003c5e:	689b      	ldr	r3, [r3, #8]
 8003c60:	091b      	lsrs	r3, r3, #4
 8003c62:	f003 030f 	and.w	r3, r3, #15
 8003c66:	490a      	ldr	r1, [pc, #40]	@ (8003c90 <HAL_RCC_ClockConfig+0x1c0>)
 8003c68:	5ccb      	ldrb	r3, [r1, r3]
 8003c6a:	fa22 f303 	lsr.w	r3, r2, r3
 8003c6e:	4a09      	ldr	r2, [pc, #36]	@ (8003c94 <HAL_RCC_ClockConfig+0x1c4>)
 8003c70:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick(uwTickPrio);
 8003c72:	4b09      	ldr	r3, [pc, #36]	@ (8003c98 <HAL_RCC_ClockConfig+0x1c8>)
 8003c74:	681b      	ldr	r3, [r3, #0]
 8003c76:	4618      	mov	r0, r3
 8003c78:	f7fc ffe0 	bl	8000c3c <HAL_InitTick>

  return HAL_OK;
 8003c7c:	2300      	movs	r3, #0
}
 8003c7e:	4618      	mov	r0, r3
 8003c80:	3710      	adds	r7, #16
 8003c82:	46bd      	mov	sp, r7
 8003c84:	bd80      	pop	{r7, pc}
 8003c86:	bf00      	nop
 8003c88:	40023c00 	.word	0x40023c00
 8003c8c:	40023800 	.word	0x40023800
 8003c90:	0800796c 	.word	0x0800796c
 8003c94:	20000000 	.word	0x20000000
 8003c98:	20000004 	.word	0x20000004

08003c9c <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8003c9c:	b480      	push	{r7}
 8003c9e:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8003ca0:	4b03      	ldr	r3, [pc, #12]	@ (8003cb0 <HAL_RCC_GetHCLKFreq+0x14>)
 8003ca2:	681b      	ldr	r3, [r3, #0]
}
 8003ca4:	4618      	mov	r0, r3
 8003ca6:	46bd      	mov	sp, r7
 8003ca8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003cac:	4770      	bx	lr
 8003cae:	bf00      	nop
 8003cb0:	20000000 	.word	0x20000000

08003cb4 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8003cb4:	b580      	push	{r7, lr}
 8003cb6:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos]);
 8003cb8:	f7ff fff0 	bl	8003c9c <HAL_RCC_GetHCLKFreq>
 8003cbc:	4602      	mov	r2, r0
 8003cbe:	4b05      	ldr	r3, [pc, #20]	@ (8003cd4 <HAL_RCC_GetPCLK1Freq+0x20>)
 8003cc0:	689b      	ldr	r3, [r3, #8]
 8003cc2:	0a9b      	lsrs	r3, r3, #10
 8003cc4:	f003 0307 	and.w	r3, r3, #7
 8003cc8:	4903      	ldr	r1, [pc, #12]	@ (8003cd8 <HAL_RCC_GetPCLK1Freq+0x24>)
 8003cca:	5ccb      	ldrb	r3, [r1, r3]
 8003ccc:	fa22 f303 	lsr.w	r3, r2, r3
}
 8003cd0:	4618      	mov	r0, r3
 8003cd2:	bd80      	pop	{r7, pc}
 8003cd4:	40023800 	.word	0x40023800
 8003cd8:	0800797c 	.word	0x0800797c

08003cdc <HAL_RCC_GetClockConfig>:
  * will be configured.
  * @param  pFLatency Pointer on the Flash Latency.
  * @retval None
  */
void HAL_RCC_GetClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t *pFLatency)
{
 8003cdc:	b480      	push	{r7}
 8003cde:	b083      	sub	sp, #12
 8003ce0:	af00      	add	r7, sp, #0
 8003ce2:	6078      	str	r0, [r7, #4]
 8003ce4:	6039      	str	r1, [r7, #0]
  /* Set all possible values for the Clock type parameter --------------------*/
  RCC_ClkInitStruct->ClockType = RCC_CLOCKTYPE_SYSCLK | RCC_CLOCKTYPE_HCLK | RCC_CLOCKTYPE_PCLK1 | RCC_CLOCKTYPE_PCLK2;
 8003ce6:	687b      	ldr	r3, [r7, #4]
 8003ce8:	220f      	movs	r2, #15
 8003cea:	601a      	str	r2, [r3, #0]

  /* Get the SYSCLK configuration --------------------------------------------*/
  RCC_ClkInitStruct->SYSCLKSource = (uint32_t)(RCC->CFGR & RCC_CFGR_SW);
 8003cec:	4b12      	ldr	r3, [pc, #72]	@ (8003d38 <HAL_RCC_GetClockConfig+0x5c>)
 8003cee:	689b      	ldr	r3, [r3, #8]
 8003cf0:	f003 0203 	and.w	r2, r3, #3
 8003cf4:	687b      	ldr	r3, [r7, #4]
 8003cf6:	605a      	str	r2, [r3, #4]

  /* Get the HCLK configuration ----------------------------------------------*/
  RCC_ClkInitStruct->AHBCLKDivider = (uint32_t)(RCC->CFGR & RCC_CFGR_HPRE);
 8003cf8:	4b0f      	ldr	r3, [pc, #60]	@ (8003d38 <HAL_RCC_GetClockConfig+0x5c>)
 8003cfa:	689b      	ldr	r3, [r3, #8]
 8003cfc:	f003 02f0 	and.w	r2, r3, #240	@ 0xf0
 8003d00:	687b      	ldr	r3, [r7, #4]
 8003d02:	609a      	str	r2, [r3, #8]

  /* Get the APB1 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB1CLKDivider = (uint32_t)(RCC->CFGR & RCC_CFGR_PPRE1);
 8003d04:	4b0c      	ldr	r3, [pc, #48]	@ (8003d38 <HAL_RCC_GetClockConfig+0x5c>)
 8003d06:	689b      	ldr	r3, [r3, #8]
 8003d08:	f403 52e0 	and.w	r2, r3, #7168	@ 0x1c00
 8003d0c:	687b      	ldr	r3, [r7, #4]
 8003d0e:	60da      	str	r2, [r3, #12]

  /* Get the APB2 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB2CLKDivider = (uint32_t)((RCC->CFGR & RCC_CFGR_PPRE2) >> 3U);
 8003d10:	4b09      	ldr	r3, [pc, #36]	@ (8003d38 <HAL_RCC_GetClockConfig+0x5c>)
 8003d12:	689b      	ldr	r3, [r3, #8]
 8003d14:	08db      	lsrs	r3, r3, #3
 8003d16:	f403 52e0 	and.w	r2, r3, #7168	@ 0x1c00
 8003d1a:	687b      	ldr	r3, [r7, #4]
 8003d1c:	611a      	str	r2, [r3, #16]

  /* Get the Flash Wait State (Latency) configuration ------------------------*/
  *pFLatency = (uint32_t)(FLASH->ACR & FLASH_ACR_LATENCY);
 8003d1e:	4b07      	ldr	r3, [pc, #28]	@ (8003d3c <HAL_RCC_GetClockConfig+0x60>)
 8003d20:	681b      	ldr	r3, [r3, #0]
 8003d22:	f003 020f 	and.w	r2, r3, #15
 8003d26:	683b      	ldr	r3, [r7, #0]
 8003d28:	601a      	str	r2, [r3, #0]
}
 8003d2a:	bf00      	nop
 8003d2c:	370c      	adds	r7, #12
 8003d2e:	46bd      	mov	sp, r7
 8003d30:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003d34:	4770      	bx	lr
 8003d36:	bf00      	nop
 8003d38:	40023800 	.word	0x40023800
 8003d3c:	40023c00 	.word	0x40023c00

08003d40 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8003d40:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8003d44:	b0a6      	sub	sp, #152	@ 0x98
 8003d46:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U;
 8003d48:	2300      	movs	r3, #0
 8003d4a:	f8c7 308c 	str.w	r3, [r7, #140]	@ 0x8c
  uint32_t pllvco = 0U;
 8003d4e:	2300      	movs	r3, #0
 8003d50:	f8c7 3094 	str.w	r3, [r7, #148]	@ 0x94
  uint32_t pllp = 0U;
 8003d54:	2300      	movs	r3, #0
 8003d56:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
  uint32_t pllr = 0U;
 8003d5a:	2300      	movs	r3, #0
 8003d5c:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
  uint32_t sysclockfreq = 0U;
 8003d60:	2300      	movs	r3, #0
 8003d62:	f8c7 3090 	str.w	r3, [r7, #144]	@ 0x90

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 8003d66:	4bc8      	ldr	r3, [pc, #800]	@ (8004088 <HAL_RCC_GetSysClockFreq+0x348>)
 8003d68:	689b      	ldr	r3, [r3, #8]
 8003d6a:	f003 030c 	and.w	r3, r3, #12
 8003d6e:	2b0c      	cmp	r3, #12
 8003d70:	f200 817e 	bhi.w	8004070 <HAL_RCC_GetSysClockFreq+0x330>
 8003d74:	a201      	add	r2, pc, #4	@ (adr r2, 8003d7c <HAL_RCC_GetSysClockFreq+0x3c>)
 8003d76:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003d7a:	bf00      	nop
 8003d7c:	08003db1 	.word	0x08003db1
 8003d80:	08004071 	.word	0x08004071
 8003d84:	08004071 	.word	0x08004071
 8003d88:	08004071 	.word	0x08004071
 8003d8c:	08003db9 	.word	0x08003db9
 8003d90:	08004071 	.word	0x08004071
 8003d94:	08004071 	.word	0x08004071
 8003d98:	08004071 	.word	0x08004071
 8003d9c:	08003dc1 	.word	0x08003dc1
 8003da0:	08004071 	.word	0x08004071
 8003da4:	08004071 	.word	0x08004071
 8003da8:	08004071 	.word	0x08004071
 8003dac:	08003f2b 	.word	0x08003f2b
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 8003db0:	4bb6      	ldr	r3, [pc, #728]	@ (800408c <HAL_RCC_GetSysClockFreq+0x34c>)
 8003db2:	f8c7 3090 	str.w	r3, [r7, #144]	@ 0x90
      break;
 8003db6:	e15f      	b.n	8004078 <HAL_RCC_GetSysClockFreq+0x338>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 8003db8:	4bb5      	ldr	r3, [pc, #724]	@ (8004090 <HAL_RCC_GetSysClockFreq+0x350>)
 8003dba:	f8c7 3090 	str.w	r3, [r7, #144]	@ 0x90
      break;
 8003dbe:	e15b      	b.n	8004078 <HAL_RCC_GetSysClockFreq+0x338>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL/PLLP used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 8003dc0:	4bb1      	ldr	r3, [pc, #708]	@ (8004088 <HAL_RCC_GetSysClockFreq+0x348>)
 8003dc2:	685b      	ldr	r3, [r3, #4]
 8003dc4:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 8003dc8:	f8c7 308c 	str.w	r3, [r7, #140]	@ 0x8c
      if (__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 8003dcc:	4bae      	ldr	r3, [pc, #696]	@ (8004088 <HAL_RCC_GetSysClockFreq+0x348>)
 8003dce:	685b      	ldr	r3, [r3, #4]
 8003dd0:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8003dd4:	2b00      	cmp	r3, #0
 8003dd6:	d031      	beq.n	8003e3c <HAL_RCC_GetSysClockFreq+0xfc>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t)((((uint64_t) HSE_VALUE * ((uint64_t)((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8003dd8:	4bab      	ldr	r3, [pc, #684]	@ (8004088 <HAL_RCC_GetSysClockFreq+0x348>)
 8003dda:	685b      	ldr	r3, [r3, #4]
 8003ddc:	099b      	lsrs	r3, r3, #6
 8003dde:	2200      	movs	r2, #0
 8003de0:	66bb      	str	r3, [r7, #104]	@ 0x68
 8003de2:	66fa      	str	r2, [r7, #108]	@ 0x6c
 8003de4:	6ebb      	ldr	r3, [r7, #104]	@ 0x68
 8003de6:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8003dea:	663b      	str	r3, [r7, #96]	@ 0x60
 8003dec:	2300      	movs	r3, #0
 8003dee:	667b      	str	r3, [r7, #100]	@ 0x64
 8003df0:	4ba7      	ldr	r3, [pc, #668]	@ (8004090 <HAL_RCC_GetSysClockFreq+0x350>)
 8003df2:	e9d7 4518 	ldrd	r4, r5, [r7, #96]	@ 0x60
 8003df6:	462a      	mov	r2, r5
 8003df8:	fb03 f202 	mul.w	r2, r3, r2
 8003dfc:	2300      	movs	r3, #0
 8003dfe:	4621      	mov	r1, r4
 8003e00:	fb01 f303 	mul.w	r3, r1, r3
 8003e04:	4413      	add	r3, r2
 8003e06:	4aa2      	ldr	r2, [pc, #648]	@ (8004090 <HAL_RCC_GetSysClockFreq+0x350>)
 8003e08:	4621      	mov	r1, r4
 8003e0a:	fba1 1202 	umull	r1, r2, r1, r2
 8003e0e:	67fa      	str	r2, [r7, #124]	@ 0x7c
 8003e10:	460a      	mov	r2, r1
 8003e12:	67ba      	str	r2, [r7, #120]	@ 0x78
 8003e14:	6ffa      	ldr	r2, [r7, #124]	@ 0x7c
 8003e16:	4413      	add	r3, r2
 8003e18:	67fb      	str	r3, [r7, #124]	@ 0x7c
 8003e1a:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 8003e1e:	2200      	movs	r2, #0
 8003e20:	65bb      	str	r3, [r7, #88]	@ 0x58
 8003e22:	65fa      	str	r2, [r7, #92]	@ 0x5c
 8003e24:	e9d7 2316 	ldrd	r2, r3, [r7, #88]	@ 0x58
 8003e28:	e9d7 011e 	ldrd	r0, r1, [r7, #120]	@ 0x78
 8003e2c:	f7fc f9f0 	bl	8000210 <__aeabi_uldivmod>
 8003e30:	4602      	mov	r2, r0
 8003e32:	460b      	mov	r3, r1
 8003e34:	4613      	mov	r3, r2
 8003e36:	f8c7 3094 	str.w	r3, [r7, #148]	@ 0x94
 8003e3a:	e064      	b.n	8003f06 <HAL_RCC_GetSysClockFreq+0x1c6>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t)((((uint64_t) HSI_VALUE * ((uint64_t)((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8003e3c:	4b92      	ldr	r3, [pc, #584]	@ (8004088 <HAL_RCC_GetSysClockFreq+0x348>)
 8003e3e:	685b      	ldr	r3, [r3, #4]
 8003e40:	099b      	lsrs	r3, r3, #6
 8003e42:	2200      	movs	r2, #0
 8003e44:	653b      	str	r3, [r7, #80]	@ 0x50
 8003e46:	657a      	str	r2, [r7, #84]	@ 0x54
 8003e48:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 8003e4a:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8003e4e:	64bb      	str	r3, [r7, #72]	@ 0x48
 8003e50:	2300      	movs	r3, #0
 8003e52:	64fb      	str	r3, [r7, #76]	@ 0x4c
 8003e54:	e9d7 4512 	ldrd	r4, r5, [r7, #72]	@ 0x48
 8003e58:	4622      	mov	r2, r4
 8003e5a:	462b      	mov	r3, r5
 8003e5c:	f04f 0000 	mov.w	r0, #0
 8003e60:	f04f 0100 	mov.w	r1, #0
 8003e64:	0159      	lsls	r1, r3, #5
 8003e66:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8003e6a:	0150      	lsls	r0, r2, #5
 8003e6c:	4602      	mov	r2, r0
 8003e6e:	460b      	mov	r3, r1
 8003e70:	4621      	mov	r1, r4
 8003e72:	1a51      	subs	r1, r2, r1
 8003e74:	6139      	str	r1, [r7, #16]
 8003e76:	4629      	mov	r1, r5
 8003e78:	eb63 0301 	sbc.w	r3, r3, r1
 8003e7c:	617b      	str	r3, [r7, #20]
 8003e7e:	f04f 0200 	mov.w	r2, #0
 8003e82:	f04f 0300 	mov.w	r3, #0
 8003e86:	e9d7 ab04 	ldrd	sl, fp, [r7, #16]
 8003e8a:	4659      	mov	r1, fp
 8003e8c:	018b      	lsls	r3, r1, #6
 8003e8e:	4651      	mov	r1, sl
 8003e90:	ea43 6391 	orr.w	r3, r3, r1, lsr #26
 8003e94:	4651      	mov	r1, sl
 8003e96:	018a      	lsls	r2, r1, #6
 8003e98:	4651      	mov	r1, sl
 8003e9a:	ebb2 0801 	subs.w	r8, r2, r1
 8003e9e:	4659      	mov	r1, fp
 8003ea0:	eb63 0901 	sbc.w	r9, r3, r1
 8003ea4:	f04f 0200 	mov.w	r2, #0
 8003ea8:	f04f 0300 	mov.w	r3, #0
 8003eac:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 8003eb0:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 8003eb4:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 8003eb8:	4690      	mov	r8, r2
 8003eba:	4699      	mov	r9, r3
 8003ebc:	4623      	mov	r3, r4
 8003ebe:	eb18 0303 	adds.w	r3, r8, r3
 8003ec2:	60bb      	str	r3, [r7, #8]
 8003ec4:	462b      	mov	r3, r5
 8003ec6:	eb49 0303 	adc.w	r3, r9, r3
 8003eca:	60fb      	str	r3, [r7, #12]
 8003ecc:	f04f 0200 	mov.w	r2, #0
 8003ed0:	f04f 0300 	mov.w	r3, #0
 8003ed4:	e9d7 4502 	ldrd	r4, r5, [r7, #8]
 8003ed8:	4629      	mov	r1, r5
 8003eda:	028b      	lsls	r3, r1, #10
 8003edc:	4621      	mov	r1, r4
 8003ede:	ea43 5391 	orr.w	r3, r3, r1, lsr #22
 8003ee2:	4621      	mov	r1, r4
 8003ee4:	028a      	lsls	r2, r1, #10
 8003ee6:	4610      	mov	r0, r2
 8003ee8:	4619      	mov	r1, r3
 8003eea:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 8003eee:	2200      	movs	r2, #0
 8003ef0:	643b      	str	r3, [r7, #64]	@ 0x40
 8003ef2:	647a      	str	r2, [r7, #68]	@ 0x44
 8003ef4:	e9d7 2310 	ldrd	r2, r3, [r7, #64]	@ 0x40
 8003ef8:	f7fc f98a 	bl	8000210 <__aeabi_uldivmod>
 8003efc:	4602      	mov	r2, r0
 8003efe:	460b      	mov	r3, r1
 8003f00:	4613      	mov	r3, r2
 8003f02:	f8c7 3094 	str.w	r3, [r7, #148]	@ 0x94
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) * 2U);
 8003f06:	4b60      	ldr	r3, [pc, #384]	@ (8004088 <HAL_RCC_GetSysClockFreq+0x348>)
 8003f08:	685b      	ldr	r3, [r3, #4]
 8003f0a:	0c1b      	lsrs	r3, r3, #16
 8003f0c:	f003 0303 	and.w	r3, r3, #3
 8003f10:	3301      	adds	r3, #1
 8003f12:	005b      	lsls	r3, r3, #1
 8003f14:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88

      sysclockfreq = pllvco / pllp;
 8003f18:	f8d7 2094 	ldr.w	r2, [r7, #148]	@ 0x94
 8003f1c:	f8d7 3088 	ldr.w	r3, [r7, #136]	@ 0x88
 8003f20:	fbb2 f3f3 	udiv	r3, r2, r3
 8003f24:	f8c7 3090 	str.w	r3, [r7, #144]	@ 0x90
      break;
 8003f28:	e0a6      	b.n	8004078 <HAL_RCC_GetSysClockFreq+0x338>
    }
    case RCC_CFGR_SWS_PLLR:  /* PLL/PLLR used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLR */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 8003f2a:	4b57      	ldr	r3, [pc, #348]	@ (8004088 <HAL_RCC_GetSysClockFreq+0x348>)
 8003f2c:	685b      	ldr	r3, [r3, #4]
 8003f2e:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 8003f32:	f8c7 308c 	str.w	r3, [r7, #140]	@ 0x8c
      if (__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 8003f36:	4b54      	ldr	r3, [pc, #336]	@ (8004088 <HAL_RCC_GetSysClockFreq+0x348>)
 8003f38:	685b      	ldr	r3, [r3, #4]
 8003f3a:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8003f3e:	2b00      	cmp	r3, #0
 8003f40:	d02a      	beq.n	8003f98 <HAL_RCC_GetSysClockFreq+0x258>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t)((((uint64_t) HSE_VALUE * ((uint64_t)((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8003f42:	4b51      	ldr	r3, [pc, #324]	@ (8004088 <HAL_RCC_GetSysClockFreq+0x348>)
 8003f44:	685b      	ldr	r3, [r3, #4]
 8003f46:	099b      	lsrs	r3, r3, #6
 8003f48:	2200      	movs	r2, #0
 8003f4a:	63bb      	str	r3, [r7, #56]	@ 0x38
 8003f4c:	63fa      	str	r2, [r7, #60]	@ 0x3c
 8003f4e:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8003f50:	f3c3 0008 	ubfx	r0, r3, #0, #9
 8003f54:	2100      	movs	r1, #0
 8003f56:	4b4e      	ldr	r3, [pc, #312]	@ (8004090 <HAL_RCC_GetSysClockFreq+0x350>)
 8003f58:	fb03 f201 	mul.w	r2, r3, r1
 8003f5c:	2300      	movs	r3, #0
 8003f5e:	fb00 f303 	mul.w	r3, r0, r3
 8003f62:	4413      	add	r3, r2
 8003f64:	4a4a      	ldr	r2, [pc, #296]	@ (8004090 <HAL_RCC_GetSysClockFreq+0x350>)
 8003f66:	fba0 1202 	umull	r1, r2, r0, r2
 8003f6a:	677a      	str	r2, [r7, #116]	@ 0x74
 8003f6c:	460a      	mov	r2, r1
 8003f6e:	673a      	str	r2, [r7, #112]	@ 0x70
 8003f70:	6f7a      	ldr	r2, [r7, #116]	@ 0x74
 8003f72:	4413      	add	r3, r2
 8003f74:	677b      	str	r3, [r7, #116]	@ 0x74
 8003f76:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 8003f7a:	2200      	movs	r2, #0
 8003f7c:	633b      	str	r3, [r7, #48]	@ 0x30
 8003f7e:	637a      	str	r2, [r7, #52]	@ 0x34
 8003f80:	e9d7 230c 	ldrd	r2, r3, [r7, #48]	@ 0x30
 8003f84:	e9d7 011c 	ldrd	r0, r1, [r7, #112]	@ 0x70
 8003f88:	f7fc f942 	bl	8000210 <__aeabi_uldivmod>
 8003f8c:	4602      	mov	r2, r0
 8003f8e:	460b      	mov	r3, r1
 8003f90:	4613      	mov	r3, r2
 8003f92:	f8c7 3094 	str.w	r3, [r7, #148]	@ 0x94
 8003f96:	e05b      	b.n	8004050 <HAL_RCC_GetSysClockFreq+0x310>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t)((((uint64_t) HSI_VALUE * ((uint64_t)((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8003f98:	4b3b      	ldr	r3, [pc, #236]	@ (8004088 <HAL_RCC_GetSysClockFreq+0x348>)
 8003f9a:	685b      	ldr	r3, [r3, #4]
 8003f9c:	099b      	lsrs	r3, r3, #6
 8003f9e:	2200      	movs	r2, #0
 8003fa0:	62bb      	str	r3, [r7, #40]	@ 0x28
 8003fa2:	62fa      	str	r2, [r7, #44]	@ 0x2c
 8003fa4:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8003fa6:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8003faa:	623b      	str	r3, [r7, #32]
 8003fac:	2300      	movs	r3, #0
 8003fae:	627b      	str	r3, [r7, #36]	@ 0x24
 8003fb0:	e9d7 8908 	ldrd	r8, r9, [r7, #32]
 8003fb4:	4642      	mov	r2, r8
 8003fb6:	464b      	mov	r3, r9
 8003fb8:	f04f 0000 	mov.w	r0, #0
 8003fbc:	f04f 0100 	mov.w	r1, #0
 8003fc0:	0159      	lsls	r1, r3, #5
 8003fc2:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8003fc6:	0150      	lsls	r0, r2, #5
 8003fc8:	4602      	mov	r2, r0
 8003fca:	460b      	mov	r3, r1
 8003fcc:	4641      	mov	r1, r8
 8003fce:	ebb2 0a01 	subs.w	sl, r2, r1
 8003fd2:	4649      	mov	r1, r9
 8003fd4:	eb63 0b01 	sbc.w	fp, r3, r1
 8003fd8:	f04f 0200 	mov.w	r2, #0
 8003fdc:	f04f 0300 	mov.w	r3, #0
 8003fe0:	ea4f 138b 	mov.w	r3, fp, lsl #6
 8003fe4:	ea43 639a 	orr.w	r3, r3, sl, lsr #26
 8003fe8:	ea4f 128a 	mov.w	r2, sl, lsl #6
 8003fec:	ebb2 040a 	subs.w	r4, r2, sl
 8003ff0:	eb63 050b 	sbc.w	r5, r3, fp
 8003ff4:	f04f 0200 	mov.w	r2, #0
 8003ff8:	f04f 0300 	mov.w	r3, #0
 8003ffc:	00eb      	lsls	r3, r5, #3
 8003ffe:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 8004002:	00e2      	lsls	r2, r4, #3
 8004004:	4614      	mov	r4, r2
 8004006:	461d      	mov	r5, r3
 8004008:	4643      	mov	r3, r8
 800400a:	18e3      	adds	r3, r4, r3
 800400c:	603b      	str	r3, [r7, #0]
 800400e:	464b      	mov	r3, r9
 8004010:	eb45 0303 	adc.w	r3, r5, r3
 8004014:	607b      	str	r3, [r7, #4]
 8004016:	f04f 0200 	mov.w	r2, #0
 800401a:	f04f 0300 	mov.w	r3, #0
 800401e:	e9d7 4500 	ldrd	r4, r5, [r7]
 8004022:	4629      	mov	r1, r5
 8004024:	028b      	lsls	r3, r1, #10
 8004026:	4621      	mov	r1, r4
 8004028:	ea43 5391 	orr.w	r3, r3, r1, lsr #22
 800402c:	4621      	mov	r1, r4
 800402e:	028a      	lsls	r2, r1, #10
 8004030:	4610      	mov	r0, r2
 8004032:	4619      	mov	r1, r3
 8004034:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 8004038:	2200      	movs	r2, #0
 800403a:	61bb      	str	r3, [r7, #24]
 800403c:	61fa      	str	r2, [r7, #28]
 800403e:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8004042:	f7fc f8e5 	bl	8000210 <__aeabi_uldivmod>
 8004046:	4602      	mov	r2, r0
 8004048:	460b      	mov	r3, r1
 800404a:	4613      	mov	r3, r2
 800404c:	f8c7 3094 	str.w	r3, [r7, #148]	@ 0x94
      }
      pllr = ((RCC->PLLCFGR & RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos);
 8004050:	4b0d      	ldr	r3, [pc, #52]	@ (8004088 <HAL_RCC_GetSysClockFreq+0x348>)
 8004052:	685b      	ldr	r3, [r3, #4]
 8004054:	0f1b      	lsrs	r3, r3, #28
 8004056:	f003 0307 	and.w	r3, r3, #7
 800405a:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84

      sysclockfreq = pllvco / pllr;
 800405e:	f8d7 2094 	ldr.w	r2, [r7, #148]	@ 0x94
 8004062:	f8d7 3084 	ldr.w	r3, [r7, #132]	@ 0x84
 8004066:	fbb2 f3f3 	udiv	r3, r2, r3
 800406a:	f8c7 3090 	str.w	r3, [r7, #144]	@ 0x90
      break;
 800406e:	e003      	b.n	8004078 <HAL_RCC_GetSysClockFreq+0x338>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 8004070:	4b06      	ldr	r3, [pc, #24]	@ (800408c <HAL_RCC_GetSysClockFreq+0x34c>)
 8004072:	f8c7 3090 	str.w	r3, [r7, #144]	@ 0x90
      break;
 8004076:	bf00      	nop
    }
  }
  return sysclockfreq;
 8004078:	f8d7 3090 	ldr.w	r3, [r7, #144]	@ 0x90
}
 800407c:	4618      	mov	r0, r3
 800407e:	3798      	adds	r7, #152	@ 0x98
 8004080:	46bd      	mov	sp, r7
 8004082:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8004086:	bf00      	nop
 8004088:	40023800 	.word	0x40023800
 800408c:	00f42400 	.word	0x00f42400
 8004090:	017d7840 	.word	0x017d7840

08004094 <HAL_RCC_OscConfig>:
  * @note   This function add the PLL/PLLR factor management during PLL configuration this feature
  *         is only available in STM32F410xx/STM32F446xx/STM32F469xx/STM32F479xx/STM32F412Zx/STM32F412Vx/STM32F412Rx/STM32F412Cx devices
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8004094:	b580      	push	{r7, lr}
 8004096:	b086      	sub	sp, #24
 8004098:	af00      	add	r7, sp, #0
 800409a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t pll_config;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 800409c:	687b      	ldr	r3, [r7, #4]
 800409e:	2b00      	cmp	r3, #0
 80040a0:	d101      	bne.n	80040a6 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 80040a2:	2301      	movs	r3, #1
 80040a4:	e28d      	b.n	80045c2 <HAL_RCC_OscConfig+0x52e>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 80040a6:	687b      	ldr	r3, [r7, #4]
 80040a8:	681b      	ldr	r3, [r3, #0]
 80040aa:	f003 0301 	and.w	r3, r3, #1
 80040ae:	2b00      	cmp	r3, #0
 80040b0:	f000 8083 	beq.w	80041ba <HAL_RCC_OscConfig+0x126>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
#if defined(STM32F446xx)
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE)
 80040b4:	4b94      	ldr	r3, [pc, #592]	@ (8004308 <HAL_RCC_OscConfig+0x274>)
 80040b6:	689b      	ldr	r3, [r3, #8]
 80040b8:	f003 030c 	and.w	r3, r3, #12
 80040bc:	2b04      	cmp	r3, #4
 80040be:	d019      	beq.n	80040f4 <HAL_RCC_OscConfig+0x60>
        || \
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)) || \
 80040c0:	4b91      	ldr	r3, [pc, #580]	@ (8004308 <HAL_RCC_OscConfig+0x274>)
 80040c2:	689b      	ldr	r3, [r3, #8]
 80040c4:	f003 030c 	and.w	r3, r3, #12
        || \
 80040c8:	2b08      	cmp	r3, #8
 80040ca:	d106      	bne.n	80040da <HAL_RCC_OscConfig+0x46>
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)) || \
 80040cc:	4b8e      	ldr	r3, [pc, #568]	@ (8004308 <HAL_RCC_OscConfig+0x274>)
 80040ce:	685b      	ldr	r3, [r3, #4]
 80040d0:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 80040d4:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 80040d8:	d00c      	beq.n	80040f4 <HAL_RCC_OscConfig+0x60>
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLLR) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 80040da:	4b8b      	ldr	r3, [pc, #556]	@ (8004308 <HAL_RCC_OscConfig+0x274>)
 80040dc:	689b      	ldr	r3, [r3, #8]
 80040de:	f003 030c 	and.w	r3, r3, #12
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)) || \
 80040e2:	2b0c      	cmp	r3, #12
 80040e4:	d112      	bne.n	800410c <HAL_RCC_OscConfig+0x78>
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLLR) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 80040e6:	4b88      	ldr	r3, [pc, #544]	@ (8004308 <HAL_RCC_OscConfig+0x274>)
 80040e8:	685b      	ldr	r3, [r3, #4]
 80040ea:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 80040ee:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 80040f2:	d10b      	bne.n	800410c <HAL_RCC_OscConfig+0x78>
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE)
        || \
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
#endif /* STM32F446xx */
    {
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80040f4:	4b84      	ldr	r3, [pc, #528]	@ (8004308 <HAL_RCC_OscConfig+0x274>)
 80040f6:	681b      	ldr	r3, [r3, #0]
 80040f8:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80040fc:	2b00      	cmp	r3, #0
 80040fe:	d05b      	beq.n	80041b8 <HAL_RCC_OscConfig+0x124>
 8004100:	687b      	ldr	r3, [r7, #4]
 8004102:	685b      	ldr	r3, [r3, #4]
 8004104:	2b00      	cmp	r3, #0
 8004106:	d157      	bne.n	80041b8 <HAL_RCC_OscConfig+0x124>
      {
        return HAL_ERROR;
 8004108:	2301      	movs	r3, #1
 800410a:	e25a      	b.n	80045c2 <HAL_RCC_OscConfig+0x52e>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 800410c:	687b      	ldr	r3, [r7, #4]
 800410e:	685b      	ldr	r3, [r3, #4]
 8004110:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8004114:	d106      	bne.n	8004124 <HAL_RCC_OscConfig+0x90>
 8004116:	4b7c      	ldr	r3, [pc, #496]	@ (8004308 <HAL_RCC_OscConfig+0x274>)
 8004118:	681b      	ldr	r3, [r3, #0]
 800411a:	4a7b      	ldr	r2, [pc, #492]	@ (8004308 <HAL_RCC_OscConfig+0x274>)
 800411c:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8004120:	6013      	str	r3, [r2, #0]
 8004122:	e01d      	b.n	8004160 <HAL_RCC_OscConfig+0xcc>
 8004124:	687b      	ldr	r3, [r7, #4]
 8004126:	685b      	ldr	r3, [r3, #4]
 8004128:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 800412c:	d10c      	bne.n	8004148 <HAL_RCC_OscConfig+0xb4>
 800412e:	4b76      	ldr	r3, [pc, #472]	@ (8004308 <HAL_RCC_OscConfig+0x274>)
 8004130:	681b      	ldr	r3, [r3, #0]
 8004132:	4a75      	ldr	r2, [pc, #468]	@ (8004308 <HAL_RCC_OscConfig+0x274>)
 8004134:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 8004138:	6013      	str	r3, [r2, #0]
 800413a:	4b73      	ldr	r3, [pc, #460]	@ (8004308 <HAL_RCC_OscConfig+0x274>)
 800413c:	681b      	ldr	r3, [r3, #0]
 800413e:	4a72      	ldr	r2, [pc, #456]	@ (8004308 <HAL_RCC_OscConfig+0x274>)
 8004140:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8004144:	6013      	str	r3, [r2, #0]
 8004146:	e00b      	b.n	8004160 <HAL_RCC_OscConfig+0xcc>
 8004148:	4b6f      	ldr	r3, [pc, #444]	@ (8004308 <HAL_RCC_OscConfig+0x274>)
 800414a:	681b      	ldr	r3, [r3, #0]
 800414c:	4a6e      	ldr	r2, [pc, #440]	@ (8004308 <HAL_RCC_OscConfig+0x274>)
 800414e:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8004152:	6013      	str	r3, [r2, #0]
 8004154:	4b6c      	ldr	r3, [pc, #432]	@ (8004308 <HAL_RCC_OscConfig+0x274>)
 8004156:	681b      	ldr	r3, [r3, #0]
 8004158:	4a6b      	ldr	r2, [pc, #428]	@ (8004308 <HAL_RCC_OscConfig+0x274>)
 800415a:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 800415e:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if ((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 8004160:	687b      	ldr	r3, [r7, #4]
 8004162:	685b      	ldr	r3, [r3, #4]
 8004164:	2b00      	cmp	r3, #0
 8004166:	d013      	beq.n	8004190 <HAL_RCC_OscConfig+0xfc>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8004168:	f7fc fe9a 	bl	8000ea0 <HAL_GetTick>
 800416c:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800416e:	e008      	b.n	8004182 <HAL_RCC_OscConfig+0xee>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8004170:	f7fc fe96 	bl	8000ea0 <HAL_GetTick>
 8004174:	4602      	mov	r2, r0
 8004176:	693b      	ldr	r3, [r7, #16]
 8004178:	1ad3      	subs	r3, r2, r3
 800417a:	2b64      	cmp	r3, #100	@ 0x64
 800417c:	d901      	bls.n	8004182 <HAL_RCC_OscConfig+0xee>
          {
            return HAL_TIMEOUT;
 800417e:	2303      	movs	r3, #3
 8004180:	e21f      	b.n	80045c2 <HAL_RCC_OscConfig+0x52e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8004182:	4b61      	ldr	r3, [pc, #388]	@ (8004308 <HAL_RCC_OscConfig+0x274>)
 8004184:	681b      	ldr	r3, [r3, #0]
 8004186:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800418a:	2b00      	cmp	r3, #0
 800418c:	d0f0      	beq.n	8004170 <HAL_RCC_OscConfig+0xdc>
 800418e:	e014      	b.n	80041ba <HAL_RCC_OscConfig+0x126>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8004190:	f7fc fe86 	bl	8000ea0 <HAL_GetTick>
 8004194:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8004196:	e008      	b.n	80041aa <HAL_RCC_OscConfig+0x116>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8004198:	f7fc fe82 	bl	8000ea0 <HAL_GetTick>
 800419c:	4602      	mov	r2, r0
 800419e:	693b      	ldr	r3, [r7, #16]
 80041a0:	1ad3      	subs	r3, r2, r3
 80041a2:	2b64      	cmp	r3, #100	@ 0x64
 80041a4:	d901      	bls.n	80041aa <HAL_RCC_OscConfig+0x116>
          {
            return HAL_TIMEOUT;
 80041a6:	2303      	movs	r3, #3
 80041a8:	e20b      	b.n	80045c2 <HAL_RCC_OscConfig+0x52e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 80041aa:	4b57      	ldr	r3, [pc, #348]	@ (8004308 <HAL_RCC_OscConfig+0x274>)
 80041ac:	681b      	ldr	r3, [r3, #0]
 80041ae:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80041b2:	2b00      	cmp	r3, #0
 80041b4:	d1f0      	bne.n	8004198 <HAL_RCC_OscConfig+0x104>
 80041b6:	e000      	b.n	80041ba <HAL_RCC_OscConfig+0x126>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80041b8:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 80041ba:	687b      	ldr	r3, [r7, #4]
 80041bc:	681b      	ldr	r3, [r3, #0]
 80041be:	f003 0302 	and.w	r3, r3, #2
 80041c2:	2b00      	cmp	r3, #0
 80041c4:	d06f      	beq.n	80042a6 <HAL_RCC_OscConfig+0x212>
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
#if defined(STM32F446xx)
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI)
 80041c6:	4b50      	ldr	r3, [pc, #320]	@ (8004308 <HAL_RCC_OscConfig+0x274>)
 80041c8:	689b      	ldr	r3, [r3, #8]
 80041ca:	f003 030c 	and.w	r3, r3, #12
 80041ce:	2b00      	cmp	r3, #0
 80041d0:	d017      	beq.n	8004202 <HAL_RCC_OscConfig+0x16e>
        || \
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)) || \
 80041d2:	4b4d      	ldr	r3, [pc, #308]	@ (8004308 <HAL_RCC_OscConfig+0x274>)
 80041d4:	689b      	ldr	r3, [r3, #8]
 80041d6:	f003 030c 	and.w	r3, r3, #12
        || \
 80041da:	2b08      	cmp	r3, #8
 80041dc:	d105      	bne.n	80041ea <HAL_RCC_OscConfig+0x156>
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)) || \
 80041de:	4b4a      	ldr	r3, [pc, #296]	@ (8004308 <HAL_RCC_OscConfig+0x274>)
 80041e0:	685b      	ldr	r3, [r3, #4]
 80041e2:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 80041e6:	2b00      	cmp	r3, #0
 80041e8:	d00b      	beq.n	8004202 <HAL_RCC_OscConfig+0x16e>
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLLR) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 80041ea:	4b47      	ldr	r3, [pc, #284]	@ (8004308 <HAL_RCC_OscConfig+0x274>)
 80041ec:	689b      	ldr	r3, [r3, #8]
 80041ee:	f003 030c 	and.w	r3, r3, #12
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)) || \
 80041f2:	2b0c      	cmp	r3, #12
 80041f4:	d11c      	bne.n	8004230 <HAL_RCC_OscConfig+0x19c>
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLLR) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 80041f6:	4b44      	ldr	r3, [pc, #272]	@ (8004308 <HAL_RCC_OscConfig+0x274>)
 80041f8:	685b      	ldr	r3, [r3, #4]
 80041fa:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 80041fe:	2b00      	cmp	r3, #0
 8004200:	d116      	bne.n	8004230 <HAL_RCC_OscConfig+0x19c>
        || \
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
#endif /* STM32F446xx */
    {
      /* When HSI is used as system clock it will not disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8004202:	4b41      	ldr	r3, [pc, #260]	@ (8004308 <HAL_RCC_OscConfig+0x274>)
 8004204:	681b      	ldr	r3, [r3, #0]
 8004206:	f003 0302 	and.w	r3, r3, #2
 800420a:	2b00      	cmp	r3, #0
 800420c:	d005      	beq.n	800421a <HAL_RCC_OscConfig+0x186>
 800420e:	687b      	ldr	r3, [r7, #4]
 8004210:	68db      	ldr	r3, [r3, #12]
 8004212:	2b01      	cmp	r3, #1
 8004214:	d001      	beq.n	800421a <HAL_RCC_OscConfig+0x186>
      {
        return HAL_ERROR;
 8004216:	2301      	movs	r3, #1
 8004218:	e1d3      	b.n	80045c2 <HAL_RCC_OscConfig+0x52e>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800421a:	4b3b      	ldr	r3, [pc, #236]	@ (8004308 <HAL_RCC_OscConfig+0x274>)
 800421c:	681b      	ldr	r3, [r3, #0]
 800421e:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 8004222:	687b      	ldr	r3, [r7, #4]
 8004224:	691b      	ldr	r3, [r3, #16]
 8004226:	00db      	lsls	r3, r3, #3
 8004228:	4937      	ldr	r1, [pc, #220]	@ (8004308 <HAL_RCC_OscConfig+0x274>)
 800422a:	4313      	orrs	r3, r2
 800422c:	600b      	str	r3, [r1, #0]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 800422e:	e03a      	b.n	80042a6 <HAL_RCC_OscConfig+0x212>
      }
    }
    else
    {
      /* Check the HSI State */
      if ((RCC_OscInitStruct->HSIState) != RCC_HSI_OFF)
 8004230:	687b      	ldr	r3, [r7, #4]
 8004232:	68db      	ldr	r3, [r3, #12]
 8004234:	2b00      	cmp	r3, #0
 8004236:	d020      	beq.n	800427a <HAL_RCC_OscConfig+0x1e6>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8004238:	4b34      	ldr	r3, [pc, #208]	@ (800430c <HAL_RCC_OscConfig+0x278>)
 800423a:	2201      	movs	r2, #1
 800423c:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800423e:	f7fc fe2f 	bl	8000ea0 <HAL_GetTick>
 8004242:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8004244:	e008      	b.n	8004258 <HAL_RCC_OscConfig+0x1c4>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8004246:	f7fc fe2b 	bl	8000ea0 <HAL_GetTick>
 800424a:	4602      	mov	r2, r0
 800424c:	693b      	ldr	r3, [r7, #16]
 800424e:	1ad3      	subs	r3, r2, r3
 8004250:	2b02      	cmp	r3, #2
 8004252:	d901      	bls.n	8004258 <HAL_RCC_OscConfig+0x1c4>
          {
            return HAL_TIMEOUT;
 8004254:	2303      	movs	r3, #3
 8004256:	e1b4      	b.n	80045c2 <HAL_RCC_OscConfig+0x52e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8004258:	4b2b      	ldr	r3, [pc, #172]	@ (8004308 <HAL_RCC_OscConfig+0x274>)
 800425a:	681b      	ldr	r3, [r3, #0]
 800425c:	f003 0302 	and.w	r3, r3, #2
 8004260:	2b00      	cmp	r3, #0
 8004262:	d0f0      	beq.n	8004246 <HAL_RCC_OscConfig+0x1b2>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8004264:	4b28      	ldr	r3, [pc, #160]	@ (8004308 <HAL_RCC_OscConfig+0x274>)
 8004266:	681b      	ldr	r3, [r3, #0]
 8004268:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 800426c:	687b      	ldr	r3, [r7, #4]
 800426e:	691b      	ldr	r3, [r3, #16]
 8004270:	00db      	lsls	r3, r3, #3
 8004272:	4925      	ldr	r1, [pc, #148]	@ (8004308 <HAL_RCC_OscConfig+0x274>)
 8004274:	4313      	orrs	r3, r2
 8004276:	600b      	str	r3, [r1, #0]
 8004278:	e015      	b.n	80042a6 <HAL_RCC_OscConfig+0x212>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 800427a:	4b24      	ldr	r3, [pc, #144]	@ (800430c <HAL_RCC_OscConfig+0x278>)
 800427c:	2200      	movs	r2, #0
 800427e:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8004280:	f7fc fe0e 	bl	8000ea0 <HAL_GetTick>
 8004284:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8004286:	e008      	b.n	800429a <HAL_RCC_OscConfig+0x206>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8004288:	f7fc fe0a 	bl	8000ea0 <HAL_GetTick>
 800428c:	4602      	mov	r2, r0
 800428e:	693b      	ldr	r3, [r7, #16]
 8004290:	1ad3      	subs	r3, r2, r3
 8004292:	2b02      	cmp	r3, #2
 8004294:	d901      	bls.n	800429a <HAL_RCC_OscConfig+0x206>
          {
            return HAL_TIMEOUT;
 8004296:	2303      	movs	r3, #3
 8004298:	e193      	b.n	80045c2 <HAL_RCC_OscConfig+0x52e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 800429a:	4b1b      	ldr	r3, [pc, #108]	@ (8004308 <HAL_RCC_OscConfig+0x274>)
 800429c:	681b      	ldr	r3, [r3, #0]
 800429e:	f003 0302 	and.w	r3, r3, #2
 80042a2:	2b00      	cmp	r3, #0
 80042a4:	d1f0      	bne.n	8004288 <HAL_RCC_OscConfig+0x1f4>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 80042a6:	687b      	ldr	r3, [r7, #4]
 80042a8:	681b      	ldr	r3, [r3, #0]
 80042aa:	f003 0308 	and.w	r3, r3, #8
 80042ae:	2b00      	cmp	r3, #0
 80042b0:	d036      	beq.n	8004320 <HAL_RCC_OscConfig+0x28c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if ((RCC_OscInitStruct->LSIState) != RCC_LSI_OFF)
 80042b2:	687b      	ldr	r3, [r7, #4]
 80042b4:	695b      	ldr	r3, [r3, #20]
 80042b6:	2b00      	cmp	r3, #0
 80042b8:	d016      	beq.n	80042e8 <HAL_RCC_OscConfig+0x254>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 80042ba:	4b15      	ldr	r3, [pc, #84]	@ (8004310 <HAL_RCC_OscConfig+0x27c>)
 80042bc:	2201      	movs	r2, #1
 80042be:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80042c0:	f7fc fdee 	bl	8000ea0 <HAL_GetTick>
 80042c4:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 80042c6:	e008      	b.n	80042da <HAL_RCC_OscConfig+0x246>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 80042c8:	f7fc fdea 	bl	8000ea0 <HAL_GetTick>
 80042cc:	4602      	mov	r2, r0
 80042ce:	693b      	ldr	r3, [r7, #16]
 80042d0:	1ad3      	subs	r3, r2, r3
 80042d2:	2b02      	cmp	r3, #2
 80042d4:	d901      	bls.n	80042da <HAL_RCC_OscConfig+0x246>
        {
          return HAL_TIMEOUT;
 80042d6:	2303      	movs	r3, #3
 80042d8:	e173      	b.n	80045c2 <HAL_RCC_OscConfig+0x52e>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 80042da:	4b0b      	ldr	r3, [pc, #44]	@ (8004308 <HAL_RCC_OscConfig+0x274>)
 80042dc:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 80042de:	f003 0302 	and.w	r3, r3, #2
 80042e2:	2b00      	cmp	r3, #0
 80042e4:	d0f0      	beq.n	80042c8 <HAL_RCC_OscConfig+0x234>
 80042e6:	e01b      	b.n	8004320 <HAL_RCC_OscConfig+0x28c>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 80042e8:	4b09      	ldr	r3, [pc, #36]	@ (8004310 <HAL_RCC_OscConfig+0x27c>)
 80042ea:	2200      	movs	r2, #0
 80042ec:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80042ee:	f7fc fdd7 	bl	8000ea0 <HAL_GetTick>
 80042f2:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 80042f4:	e00e      	b.n	8004314 <HAL_RCC_OscConfig+0x280>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 80042f6:	f7fc fdd3 	bl	8000ea0 <HAL_GetTick>
 80042fa:	4602      	mov	r2, r0
 80042fc:	693b      	ldr	r3, [r7, #16]
 80042fe:	1ad3      	subs	r3, r2, r3
 8004300:	2b02      	cmp	r3, #2
 8004302:	d907      	bls.n	8004314 <HAL_RCC_OscConfig+0x280>
        {
          return HAL_TIMEOUT;
 8004304:	2303      	movs	r3, #3
 8004306:	e15c      	b.n	80045c2 <HAL_RCC_OscConfig+0x52e>
 8004308:	40023800 	.word	0x40023800
 800430c:	42470000 	.word	0x42470000
 8004310:	42470e80 	.word	0x42470e80
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8004314:	4b8a      	ldr	r3, [pc, #552]	@ (8004540 <HAL_RCC_OscConfig+0x4ac>)
 8004316:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8004318:	f003 0302 	and.w	r3, r3, #2
 800431c:	2b00      	cmp	r3, #0
 800431e:	d1ea      	bne.n	80042f6 <HAL_RCC_OscConfig+0x262>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8004320:	687b      	ldr	r3, [r7, #4]
 8004322:	681b      	ldr	r3, [r3, #0]
 8004324:	f003 0304 	and.w	r3, r3, #4
 8004328:	2b00      	cmp	r3, #0
 800432a:	f000 8097 	beq.w	800445c <HAL_RCC_OscConfig+0x3c8>
  {
    FlagStatus       pwrclkchanged = RESET;
 800432e:	2300      	movs	r3, #0
 8004330:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 8004332:	4b83      	ldr	r3, [pc, #524]	@ (8004540 <HAL_RCC_OscConfig+0x4ac>)
 8004334:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8004336:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 800433a:	2b00      	cmp	r3, #0
 800433c:	d10f      	bne.n	800435e <HAL_RCC_OscConfig+0x2ca>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 800433e:	2300      	movs	r3, #0
 8004340:	60bb      	str	r3, [r7, #8]
 8004342:	4b7f      	ldr	r3, [pc, #508]	@ (8004540 <HAL_RCC_OscConfig+0x4ac>)
 8004344:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8004346:	4a7e      	ldr	r2, [pc, #504]	@ (8004540 <HAL_RCC_OscConfig+0x4ac>)
 8004348:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 800434c:	6413      	str	r3, [r2, #64]	@ 0x40
 800434e:	4b7c      	ldr	r3, [pc, #496]	@ (8004540 <HAL_RCC_OscConfig+0x4ac>)
 8004350:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8004352:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8004356:	60bb      	str	r3, [r7, #8]
 8004358:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 800435a:	2301      	movs	r3, #1
 800435c:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800435e:	4b79      	ldr	r3, [pc, #484]	@ (8004544 <HAL_RCC_OscConfig+0x4b0>)
 8004360:	681b      	ldr	r3, [r3, #0]
 8004362:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8004366:	2b00      	cmp	r3, #0
 8004368:	d118      	bne.n	800439c <HAL_RCC_OscConfig+0x308>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 800436a:	4b76      	ldr	r3, [pc, #472]	@ (8004544 <HAL_RCC_OscConfig+0x4b0>)
 800436c:	681b      	ldr	r3, [r3, #0]
 800436e:	4a75      	ldr	r2, [pc, #468]	@ (8004544 <HAL_RCC_OscConfig+0x4b0>)
 8004370:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8004374:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8004376:	f7fc fd93 	bl	8000ea0 <HAL_GetTick>
 800437a:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800437c:	e008      	b.n	8004390 <HAL_RCC_OscConfig+0x2fc>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 800437e:	f7fc fd8f 	bl	8000ea0 <HAL_GetTick>
 8004382:	4602      	mov	r2, r0
 8004384:	693b      	ldr	r3, [r7, #16]
 8004386:	1ad3      	subs	r3, r2, r3
 8004388:	2b02      	cmp	r3, #2
 800438a:	d901      	bls.n	8004390 <HAL_RCC_OscConfig+0x2fc>
        {
          return HAL_TIMEOUT;
 800438c:	2303      	movs	r3, #3
 800438e:	e118      	b.n	80045c2 <HAL_RCC_OscConfig+0x52e>
      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8004390:	4b6c      	ldr	r3, [pc, #432]	@ (8004544 <HAL_RCC_OscConfig+0x4b0>)
 8004392:	681b      	ldr	r3, [r3, #0]
 8004394:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8004398:	2b00      	cmp	r3, #0
 800439a:	d0f0      	beq.n	800437e <HAL_RCC_OscConfig+0x2ea>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 800439c:	687b      	ldr	r3, [r7, #4]
 800439e:	689b      	ldr	r3, [r3, #8]
 80043a0:	2b01      	cmp	r3, #1
 80043a2:	d106      	bne.n	80043b2 <HAL_RCC_OscConfig+0x31e>
 80043a4:	4b66      	ldr	r3, [pc, #408]	@ (8004540 <HAL_RCC_OscConfig+0x4ac>)
 80043a6:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80043a8:	4a65      	ldr	r2, [pc, #404]	@ (8004540 <HAL_RCC_OscConfig+0x4ac>)
 80043aa:	f043 0301 	orr.w	r3, r3, #1
 80043ae:	6713      	str	r3, [r2, #112]	@ 0x70
 80043b0:	e01c      	b.n	80043ec <HAL_RCC_OscConfig+0x358>
 80043b2:	687b      	ldr	r3, [r7, #4]
 80043b4:	689b      	ldr	r3, [r3, #8]
 80043b6:	2b05      	cmp	r3, #5
 80043b8:	d10c      	bne.n	80043d4 <HAL_RCC_OscConfig+0x340>
 80043ba:	4b61      	ldr	r3, [pc, #388]	@ (8004540 <HAL_RCC_OscConfig+0x4ac>)
 80043bc:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80043be:	4a60      	ldr	r2, [pc, #384]	@ (8004540 <HAL_RCC_OscConfig+0x4ac>)
 80043c0:	f043 0304 	orr.w	r3, r3, #4
 80043c4:	6713      	str	r3, [r2, #112]	@ 0x70
 80043c6:	4b5e      	ldr	r3, [pc, #376]	@ (8004540 <HAL_RCC_OscConfig+0x4ac>)
 80043c8:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80043ca:	4a5d      	ldr	r2, [pc, #372]	@ (8004540 <HAL_RCC_OscConfig+0x4ac>)
 80043cc:	f043 0301 	orr.w	r3, r3, #1
 80043d0:	6713      	str	r3, [r2, #112]	@ 0x70
 80043d2:	e00b      	b.n	80043ec <HAL_RCC_OscConfig+0x358>
 80043d4:	4b5a      	ldr	r3, [pc, #360]	@ (8004540 <HAL_RCC_OscConfig+0x4ac>)
 80043d6:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80043d8:	4a59      	ldr	r2, [pc, #356]	@ (8004540 <HAL_RCC_OscConfig+0x4ac>)
 80043da:	f023 0301 	bic.w	r3, r3, #1
 80043de:	6713      	str	r3, [r2, #112]	@ 0x70
 80043e0:	4b57      	ldr	r3, [pc, #348]	@ (8004540 <HAL_RCC_OscConfig+0x4ac>)
 80043e2:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80043e4:	4a56      	ldr	r2, [pc, #344]	@ (8004540 <HAL_RCC_OscConfig+0x4ac>)
 80043e6:	f023 0304 	bic.w	r3, r3, #4
 80043ea:	6713      	str	r3, [r2, #112]	@ 0x70
    /* Check the LSE State */
    if ((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 80043ec:	687b      	ldr	r3, [r7, #4]
 80043ee:	689b      	ldr	r3, [r3, #8]
 80043f0:	2b00      	cmp	r3, #0
 80043f2:	d015      	beq.n	8004420 <HAL_RCC_OscConfig+0x38c>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80043f4:	f7fc fd54 	bl	8000ea0 <HAL_GetTick>
 80043f8:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80043fa:	e00a      	b.n	8004412 <HAL_RCC_OscConfig+0x37e>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80043fc:	f7fc fd50 	bl	8000ea0 <HAL_GetTick>
 8004400:	4602      	mov	r2, r0
 8004402:	693b      	ldr	r3, [r7, #16]
 8004404:	1ad3      	subs	r3, r2, r3
 8004406:	f241 3288 	movw	r2, #5000	@ 0x1388
 800440a:	4293      	cmp	r3, r2
 800440c:	d901      	bls.n	8004412 <HAL_RCC_OscConfig+0x37e>
        {
          return HAL_TIMEOUT;
 800440e:	2303      	movs	r3, #3
 8004410:	e0d7      	b.n	80045c2 <HAL_RCC_OscConfig+0x52e>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8004412:	4b4b      	ldr	r3, [pc, #300]	@ (8004540 <HAL_RCC_OscConfig+0x4ac>)
 8004414:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8004416:	f003 0302 	and.w	r3, r3, #2
 800441a:	2b00      	cmp	r3, #0
 800441c:	d0ee      	beq.n	80043fc <HAL_RCC_OscConfig+0x368>
 800441e:	e014      	b.n	800444a <HAL_RCC_OscConfig+0x3b6>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8004420:	f7fc fd3e 	bl	8000ea0 <HAL_GetTick>
 8004424:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8004426:	e00a      	b.n	800443e <HAL_RCC_OscConfig+0x3aa>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8004428:	f7fc fd3a 	bl	8000ea0 <HAL_GetTick>
 800442c:	4602      	mov	r2, r0
 800442e:	693b      	ldr	r3, [r7, #16]
 8004430:	1ad3      	subs	r3, r2, r3
 8004432:	f241 3288 	movw	r2, #5000	@ 0x1388
 8004436:	4293      	cmp	r3, r2
 8004438:	d901      	bls.n	800443e <HAL_RCC_OscConfig+0x3aa>
        {
          return HAL_TIMEOUT;
 800443a:	2303      	movs	r3, #3
 800443c:	e0c1      	b.n	80045c2 <HAL_RCC_OscConfig+0x52e>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 800443e:	4b40      	ldr	r3, [pc, #256]	@ (8004540 <HAL_RCC_OscConfig+0x4ac>)
 8004440:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8004442:	f003 0302 	and.w	r3, r3, #2
 8004446:	2b00      	cmp	r3, #0
 8004448:	d1ee      	bne.n	8004428 <HAL_RCC_OscConfig+0x394>
        }
      }
    }

    /* Restore clock configuration if changed */
    if (pwrclkchanged == SET)
 800444a:	7dfb      	ldrb	r3, [r7, #23]
 800444c:	2b01      	cmp	r3, #1
 800444e:	d105      	bne.n	800445c <HAL_RCC_OscConfig+0x3c8>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8004450:	4b3b      	ldr	r3, [pc, #236]	@ (8004540 <HAL_RCC_OscConfig+0x4ac>)
 8004452:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8004454:	4a3a      	ldr	r2, [pc, #232]	@ (8004540 <HAL_RCC_OscConfig+0x4ac>)
 8004456:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 800445a:	6413      	str	r3, [r2, #64]	@ 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 800445c:	687b      	ldr	r3, [r7, #4]
 800445e:	699b      	ldr	r3, [r3, #24]
 8004460:	2b00      	cmp	r3, #0
 8004462:	f000 80ad 	beq.w	80045c0 <HAL_RCC_OscConfig+0x52c>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 8004466:	4b36      	ldr	r3, [pc, #216]	@ (8004540 <HAL_RCC_OscConfig+0x4ac>)
 8004468:	689b      	ldr	r3, [r3, #8]
 800446a:	f003 030c 	and.w	r3, r3, #12
 800446e:	2b08      	cmp	r3, #8
 8004470:	d060      	beq.n	8004534 <HAL_RCC_OscConfig+0x4a0>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8004472:	687b      	ldr	r3, [r7, #4]
 8004474:	699b      	ldr	r3, [r3, #24]
 8004476:	2b02      	cmp	r3, #2
 8004478:	d145      	bne.n	8004506 <HAL_RCC_OscConfig+0x472>
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
        assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 800447a:	4b33      	ldr	r3, [pc, #204]	@ (8004548 <HAL_RCC_OscConfig+0x4b4>)
 800447c:	2200      	movs	r2, #0
 800447e:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8004480:	f7fc fd0e 	bl	8000ea0 <HAL_GetTick>
 8004484:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8004486:	e008      	b.n	800449a <HAL_RCC_OscConfig+0x406>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8004488:	f7fc fd0a 	bl	8000ea0 <HAL_GetTick>
 800448c:	4602      	mov	r2, r0
 800448e:	693b      	ldr	r3, [r7, #16]
 8004490:	1ad3      	subs	r3, r2, r3
 8004492:	2b02      	cmp	r3, #2
 8004494:	d901      	bls.n	800449a <HAL_RCC_OscConfig+0x406>
          {
            return HAL_TIMEOUT;
 8004496:	2303      	movs	r3, #3
 8004498:	e093      	b.n	80045c2 <HAL_RCC_OscConfig+0x52e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 800449a:	4b29      	ldr	r3, [pc, #164]	@ (8004540 <HAL_RCC_OscConfig+0x4ac>)
 800449c:	681b      	ldr	r3, [r3, #0]
 800449e:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 80044a2:	2b00      	cmp	r3, #0
 80044a4:	d1f0      	bne.n	8004488 <HAL_RCC_OscConfig+0x3f4>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 80044a6:	687b      	ldr	r3, [r7, #4]
 80044a8:	69da      	ldr	r2, [r3, #28]
 80044aa:	687b      	ldr	r3, [r7, #4]
 80044ac:	6a1b      	ldr	r3, [r3, #32]
 80044ae:	431a      	orrs	r2, r3
 80044b0:	687b      	ldr	r3, [r7, #4]
 80044b2:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80044b4:	019b      	lsls	r3, r3, #6
 80044b6:	431a      	orrs	r2, r3
 80044b8:	687b      	ldr	r3, [r7, #4]
 80044ba:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80044bc:	085b      	lsrs	r3, r3, #1
 80044be:	3b01      	subs	r3, #1
 80044c0:	041b      	lsls	r3, r3, #16
 80044c2:	431a      	orrs	r2, r3
 80044c4:	687b      	ldr	r3, [r7, #4]
 80044c6:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80044c8:	061b      	lsls	r3, r3, #24
 80044ca:	431a      	orrs	r2, r3
 80044cc:	687b      	ldr	r3, [r7, #4]
 80044ce:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80044d0:	071b      	lsls	r3, r3, #28
 80044d2:	491b      	ldr	r1, [pc, #108]	@ (8004540 <HAL_RCC_OscConfig+0x4ac>)
 80044d4:	4313      	orrs	r3, r2
 80044d6:	604b      	str	r3, [r1, #4]
                                 (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)                       | \
                                 (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos)        | \
                                 (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)                       | \
                                 (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)));
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 80044d8:	4b1b      	ldr	r3, [pc, #108]	@ (8004548 <HAL_RCC_OscConfig+0x4b4>)
 80044da:	2201      	movs	r2, #1
 80044dc:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80044de:	f7fc fcdf 	bl	8000ea0 <HAL_GetTick>
 80044e2:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80044e4:	e008      	b.n	80044f8 <HAL_RCC_OscConfig+0x464>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80044e6:	f7fc fcdb 	bl	8000ea0 <HAL_GetTick>
 80044ea:	4602      	mov	r2, r0
 80044ec:	693b      	ldr	r3, [r7, #16]
 80044ee:	1ad3      	subs	r3, r2, r3
 80044f0:	2b02      	cmp	r3, #2
 80044f2:	d901      	bls.n	80044f8 <HAL_RCC_OscConfig+0x464>
          {
            return HAL_TIMEOUT;
 80044f4:	2303      	movs	r3, #3
 80044f6:	e064      	b.n	80045c2 <HAL_RCC_OscConfig+0x52e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80044f8:	4b11      	ldr	r3, [pc, #68]	@ (8004540 <HAL_RCC_OscConfig+0x4ac>)
 80044fa:	681b      	ldr	r3, [r3, #0]
 80044fc:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8004500:	2b00      	cmp	r3, #0
 8004502:	d0f0      	beq.n	80044e6 <HAL_RCC_OscConfig+0x452>
 8004504:	e05c      	b.n	80045c0 <HAL_RCC_OscConfig+0x52c>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8004506:	4b10      	ldr	r3, [pc, #64]	@ (8004548 <HAL_RCC_OscConfig+0x4b4>)
 8004508:	2200      	movs	r2, #0
 800450a:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800450c:	f7fc fcc8 	bl	8000ea0 <HAL_GetTick>
 8004510:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8004512:	e008      	b.n	8004526 <HAL_RCC_OscConfig+0x492>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8004514:	f7fc fcc4 	bl	8000ea0 <HAL_GetTick>
 8004518:	4602      	mov	r2, r0
 800451a:	693b      	ldr	r3, [r7, #16]
 800451c:	1ad3      	subs	r3, r2, r3
 800451e:	2b02      	cmp	r3, #2
 8004520:	d901      	bls.n	8004526 <HAL_RCC_OscConfig+0x492>
          {
            return HAL_TIMEOUT;
 8004522:	2303      	movs	r3, #3
 8004524:	e04d      	b.n	80045c2 <HAL_RCC_OscConfig+0x52e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8004526:	4b06      	ldr	r3, [pc, #24]	@ (8004540 <HAL_RCC_OscConfig+0x4ac>)
 8004528:	681b      	ldr	r3, [r3, #0]
 800452a:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 800452e:	2b00      	cmp	r3, #0
 8004530:	d1f0      	bne.n	8004514 <HAL_RCC_OscConfig+0x480>
 8004532:	e045      	b.n	80045c0 <HAL_RCC_OscConfig+0x52c>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8004534:	687b      	ldr	r3, [r7, #4]
 8004536:	699b      	ldr	r3, [r3, #24]
 8004538:	2b01      	cmp	r3, #1
 800453a:	d107      	bne.n	800454c <HAL_RCC_OscConfig+0x4b8>
      {
        return HAL_ERROR;
 800453c:	2301      	movs	r3, #1
 800453e:	e040      	b.n	80045c2 <HAL_RCC_OscConfig+0x52e>
 8004540:	40023800 	.word	0x40023800
 8004544:	40007000 	.word	0x40007000
 8004548:	42470060 	.word	0x42470060
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->PLLCFGR;
 800454c:	4b1f      	ldr	r3, [pc, #124]	@ (80045cc <HAL_RCC_OscConfig+0x538>)
 800454e:	685b      	ldr	r3, [r3, #4]
 8004550:	60fb      	str	r3, [r7, #12]
#if defined (RCC_PLLCFGR_PLLR)
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8004552:	687b      	ldr	r3, [r7, #4]
 8004554:	699b      	ldr	r3, [r3, #24]
 8004556:	2b01      	cmp	r3, #1
 8004558:	d030      	beq.n	80045bc <HAL_RCC_OscConfig+0x528>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 800455a:	68fb      	ldr	r3, [r7, #12]
 800455c:	f403 0280 	and.w	r2, r3, #4194304	@ 0x400000
 8004560:	687b      	ldr	r3, [r7, #4]
 8004562:	69db      	ldr	r3, [r3, #28]
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8004564:	429a      	cmp	r2, r3
 8004566:	d129      	bne.n	80045bc <HAL_RCC_OscConfig+0x528>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8004568:	68fb      	ldr	r3, [r7, #12]
 800456a:	f003 023f 	and.w	r2, r3, #63	@ 0x3f
 800456e:	687b      	ldr	r3, [r7, #4]
 8004570:	6a1b      	ldr	r3, [r3, #32]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8004572:	429a      	cmp	r2, r3
 8004574:	d122      	bne.n	80045bc <HAL_RCC_OscConfig+0x528>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8004576:	68fa      	ldr	r2, [r7, #12]
 8004578:	f647 73c0 	movw	r3, #32704	@ 0x7fc0
 800457c:	4013      	ands	r3, r2
 800457e:	687a      	ldr	r2, [r7, #4]
 8004580:	6a52      	ldr	r2, [r2, #36]	@ 0x24
 8004582:	0192      	lsls	r2, r2, #6
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8004584:	4293      	cmp	r3, r2
 8004586:	d119      	bne.n	80045bc <HAL_RCC_OscConfig+0x528>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8004588:	68fb      	ldr	r3, [r7, #12]
 800458a:	f403 3240 	and.w	r2, r3, #196608	@ 0x30000
 800458e:	687b      	ldr	r3, [r7, #4]
 8004590:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8004592:	085b      	lsrs	r3, r3, #1
 8004594:	3b01      	subs	r3, #1
 8004596:	041b      	lsls	r3, r3, #16
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8004598:	429a      	cmp	r2, r3
 800459a:	d10f      	bne.n	80045bc <HAL_RCC_OscConfig+0x528>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
 800459c:	68fb      	ldr	r3, [r7, #12]
 800459e:	f003 6270 	and.w	r2, r3, #251658240	@ 0xf000000
 80045a2:	687b      	ldr	r3, [r7, #4]
 80045a4:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80045a6:	061b      	lsls	r3, r3, #24
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 80045a8:	429a      	cmp	r2, r3
 80045aa:	d107      	bne.n	80045bc <HAL_RCC_OscConfig+0x528>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
 80045ac:	68fb      	ldr	r3, [r7, #12]
 80045ae:	f003 42e0 	and.w	r2, r3, #1879048192	@ 0x70000000
 80045b2:	687b      	ldr	r3, [r7, #4]
 80045b4:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80045b6:	071b      	lsls	r3, r3, #28
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
 80045b8:	429a      	cmp	r2, r3
 80045ba:	d001      	beq.n	80045c0 <HAL_RCC_OscConfig+0x52c>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
#endif /* RCC_PLLCFGR_PLLR */
        {
          return HAL_ERROR;
 80045bc:	2301      	movs	r3, #1
 80045be:	e000      	b.n	80045c2 <HAL_RCC_OscConfig+0x52e>
        }
      }
    }
  }
  return HAL_OK;
 80045c0:	2300      	movs	r3, #0
}
 80045c2:	4618      	mov	r0, r3
 80045c4:	3718      	adds	r7, #24
 80045c6:	46bd      	mov	sp, r7
 80045c8:	bd80      	pop	{r7, pc}
 80045ca:	bf00      	nop
 80045cc:	40023800 	.word	0x40023800

080045d0 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 80045d0:	b580      	push	{r7, lr}
 80045d2:	b082      	sub	sp, #8
 80045d4:	af00      	add	r7, sp, #0
 80045d6:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 80045d8:	687b      	ldr	r3, [r7, #4]
 80045da:	2b00      	cmp	r3, #0
 80045dc:	d101      	bne.n	80045e2 <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 80045de:	2301      	movs	r3, #1
 80045e0:	e041      	b.n	8004666 <HAL_TIM_Base_Init+0x96>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 80045e2:	687b      	ldr	r3, [r7, #4]
 80045e4:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 80045e8:	b2db      	uxtb	r3, r3
 80045ea:	2b00      	cmp	r3, #0
 80045ec:	d106      	bne.n	80045fc <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 80045ee:	687b      	ldr	r3, [r7, #4]
 80045f0:	2200      	movs	r2, #0
 80045f2:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 80045f6:	6878      	ldr	r0, [r7, #4]
 80045f8:	f000 f839 	bl	800466e <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 80045fc:	687b      	ldr	r3, [r7, #4]
 80045fe:	2202      	movs	r2, #2
 8004600:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8004604:	687b      	ldr	r3, [r7, #4]
 8004606:	681a      	ldr	r2, [r3, #0]
 8004608:	687b      	ldr	r3, [r7, #4]
 800460a:	3304      	adds	r3, #4
 800460c:	4619      	mov	r1, r3
 800460e:	4610      	mov	r0, r2
 8004610:	f000 fbd4 	bl	8004dbc <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8004614:	687b      	ldr	r3, [r7, #4]
 8004616:	2201      	movs	r2, #1
 8004618:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 800461c:	687b      	ldr	r3, [r7, #4]
 800461e:	2201      	movs	r2, #1
 8004620:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 8004624:	687b      	ldr	r3, [r7, #4]
 8004626:	2201      	movs	r2, #1
 8004628:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 800462c:	687b      	ldr	r3, [r7, #4]
 800462e:	2201      	movs	r2, #1
 8004630:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 8004634:	687b      	ldr	r3, [r7, #4]
 8004636:	2201      	movs	r2, #1
 8004638:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 800463c:	687b      	ldr	r3, [r7, #4]
 800463e:	2201      	movs	r2, #1
 8004640:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
 8004644:	687b      	ldr	r3, [r7, #4]
 8004646:	2201      	movs	r2, #1
 8004648:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
 800464c:	687b      	ldr	r3, [r7, #4]
 800464e:	2201      	movs	r2, #1
 8004650:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 8004654:	687b      	ldr	r3, [r7, #4]
 8004656:	2201      	movs	r2, #1
 8004658:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 800465c:	687b      	ldr	r3, [r7, #4]
 800465e:	2201      	movs	r2, #1
 8004660:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  return HAL_OK;
 8004664:	2300      	movs	r3, #0
}
 8004666:	4618      	mov	r0, r3
 8004668:	3708      	adds	r7, #8
 800466a:	46bd      	mov	sp, r7
 800466c:	bd80      	pop	{r7, pc}

0800466e <HAL_TIM_Base_MspInit>:
  * @brief  Initializes the TIM Base MSP.
  * @param  htim TIM Base handle
  * @retval None
  */
__weak void HAL_TIM_Base_MspInit(TIM_HandleTypeDef *htim)
{
 800466e:	b480      	push	{r7}
 8004670:	b083      	sub	sp, #12
 8004672:	af00      	add	r7, sp, #0
 8004674:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_Base_MspInit could be implemented in the user file
   */
}
 8004676:	bf00      	nop
 8004678:	370c      	adds	r7, #12
 800467a:	46bd      	mov	sp, r7
 800467c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004680:	4770      	bx	lr
	...

08004684 <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 8004684:	b480      	push	{r7}
 8004686:	b085      	sub	sp, #20
 8004688:	af00      	add	r7, sp, #0
 800468a:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 800468c:	687b      	ldr	r3, [r7, #4]
 800468e:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8004692:	b2db      	uxtb	r3, r3
 8004694:	2b01      	cmp	r3, #1
 8004696:	d001      	beq.n	800469c <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 8004698:	2301      	movs	r3, #1
 800469a:	e04e      	b.n	800473a <HAL_TIM_Base_Start_IT+0xb6>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 800469c:	687b      	ldr	r3, [r7, #4]
 800469e:	2202      	movs	r2, #2
 80046a0:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 80046a4:	687b      	ldr	r3, [r7, #4]
 80046a6:	681b      	ldr	r3, [r3, #0]
 80046a8:	68da      	ldr	r2, [r3, #12]
 80046aa:	687b      	ldr	r3, [r7, #4]
 80046ac:	681b      	ldr	r3, [r3, #0]
 80046ae:	f042 0201 	orr.w	r2, r2, #1
 80046b2:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 80046b4:	687b      	ldr	r3, [r7, #4]
 80046b6:	681b      	ldr	r3, [r3, #0]
 80046b8:	4a23      	ldr	r2, [pc, #140]	@ (8004748 <HAL_TIM_Base_Start_IT+0xc4>)
 80046ba:	4293      	cmp	r3, r2
 80046bc:	d022      	beq.n	8004704 <HAL_TIM_Base_Start_IT+0x80>
 80046be:	687b      	ldr	r3, [r7, #4]
 80046c0:	681b      	ldr	r3, [r3, #0]
 80046c2:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 80046c6:	d01d      	beq.n	8004704 <HAL_TIM_Base_Start_IT+0x80>
 80046c8:	687b      	ldr	r3, [r7, #4]
 80046ca:	681b      	ldr	r3, [r3, #0]
 80046cc:	4a1f      	ldr	r2, [pc, #124]	@ (800474c <HAL_TIM_Base_Start_IT+0xc8>)
 80046ce:	4293      	cmp	r3, r2
 80046d0:	d018      	beq.n	8004704 <HAL_TIM_Base_Start_IT+0x80>
 80046d2:	687b      	ldr	r3, [r7, #4]
 80046d4:	681b      	ldr	r3, [r3, #0]
 80046d6:	4a1e      	ldr	r2, [pc, #120]	@ (8004750 <HAL_TIM_Base_Start_IT+0xcc>)
 80046d8:	4293      	cmp	r3, r2
 80046da:	d013      	beq.n	8004704 <HAL_TIM_Base_Start_IT+0x80>
 80046dc:	687b      	ldr	r3, [r7, #4]
 80046de:	681b      	ldr	r3, [r3, #0]
 80046e0:	4a1c      	ldr	r2, [pc, #112]	@ (8004754 <HAL_TIM_Base_Start_IT+0xd0>)
 80046e2:	4293      	cmp	r3, r2
 80046e4:	d00e      	beq.n	8004704 <HAL_TIM_Base_Start_IT+0x80>
 80046e6:	687b      	ldr	r3, [r7, #4]
 80046e8:	681b      	ldr	r3, [r3, #0]
 80046ea:	4a1b      	ldr	r2, [pc, #108]	@ (8004758 <HAL_TIM_Base_Start_IT+0xd4>)
 80046ec:	4293      	cmp	r3, r2
 80046ee:	d009      	beq.n	8004704 <HAL_TIM_Base_Start_IT+0x80>
 80046f0:	687b      	ldr	r3, [r7, #4]
 80046f2:	681b      	ldr	r3, [r3, #0]
 80046f4:	4a19      	ldr	r2, [pc, #100]	@ (800475c <HAL_TIM_Base_Start_IT+0xd8>)
 80046f6:	4293      	cmp	r3, r2
 80046f8:	d004      	beq.n	8004704 <HAL_TIM_Base_Start_IT+0x80>
 80046fa:	687b      	ldr	r3, [r7, #4]
 80046fc:	681b      	ldr	r3, [r3, #0]
 80046fe:	4a18      	ldr	r2, [pc, #96]	@ (8004760 <HAL_TIM_Base_Start_IT+0xdc>)
 8004700:	4293      	cmp	r3, r2
 8004702:	d111      	bne.n	8004728 <HAL_TIM_Base_Start_IT+0xa4>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8004704:	687b      	ldr	r3, [r7, #4]
 8004706:	681b      	ldr	r3, [r3, #0]
 8004708:	689b      	ldr	r3, [r3, #8]
 800470a:	f003 0307 	and.w	r3, r3, #7
 800470e:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8004710:	68fb      	ldr	r3, [r7, #12]
 8004712:	2b06      	cmp	r3, #6
 8004714:	d010      	beq.n	8004738 <HAL_TIM_Base_Start_IT+0xb4>
    {
      __HAL_TIM_ENABLE(htim);
 8004716:	687b      	ldr	r3, [r7, #4]
 8004718:	681b      	ldr	r3, [r3, #0]
 800471a:	681a      	ldr	r2, [r3, #0]
 800471c:	687b      	ldr	r3, [r7, #4]
 800471e:	681b      	ldr	r3, [r3, #0]
 8004720:	f042 0201 	orr.w	r2, r2, #1
 8004724:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8004726:	e007      	b.n	8004738 <HAL_TIM_Base_Start_IT+0xb4>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8004728:	687b      	ldr	r3, [r7, #4]
 800472a:	681b      	ldr	r3, [r3, #0]
 800472c:	681a      	ldr	r2, [r3, #0]
 800472e:	687b      	ldr	r3, [r7, #4]
 8004730:	681b      	ldr	r3, [r3, #0]
 8004732:	f042 0201 	orr.w	r2, r2, #1
 8004736:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 8004738:	2300      	movs	r3, #0
}
 800473a:	4618      	mov	r0, r3
 800473c:	3714      	adds	r7, #20
 800473e:	46bd      	mov	sp, r7
 8004740:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004744:	4770      	bx	lr
 8004746:	bf00      	nop
 8004748:	40010000 	.word	0x40010000
 800474c:	40000400 	.word	0x40000400
 8004750:	40000800 	.word	0x40000800
 8004754:	40000c00 	.word	0x40000c00
 8004758:	40010400 	.word	0x40010400
 800475c:	40014000 	.word	0x40014000
 8004760:	40001800 	.word	0x40001800

08004764 <HAL_TIM_IC_Init>:
  *         Ex: call @ref HAL_TIM_IC_DeInit() before HAL_TIM_IC_Init()
  * @param  htim TIM Input Capture handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_IC_Init(TIM_HandleTypeDef *htim)
{
 8004764:	b580      	push	{r7, lr}
 8004766:	b082      	sub	sp, #8
 8004768:	af00      	add	r7, sp, #0
 800476a:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 800476c:	687b      	ldr	r3, [r7, #4]
 800476e:	2b00      	cmp	r3, #0
 8004770:	d101      	bne.n	8004776 <HAL_TIM_IC_Init+0x12>
  {
    return HAL_ERROR;
 8004772:	2301      	movs	r3, #1
 8004774:	e041      	b.n	80047fa <HAL_TIM_IC_Init+0x96>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8004776:	687b      	ldr	r3, [r7, #4]
 8004778:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 800477c:	b2db      	uxtb	r3, r3
 800477e:	2b00      	cmp	r3, #0
 8004780:	d106      	bne.n	8004790 <HAL_TIM_IC_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8004782:	687b      	ldr	r3, [r7, #4]
 8004784:	2200      	movs	r2, #0
 8004786:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->IC_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_IC_MspInit(htim);
 800478a:	6878      	ldr	r0, [r7, #4]
 800478c:	f7fc fa06 	bl	8000b9c <HAL_TIM_IC_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8004790:	687b      	ldr	r3, [r7, #4]
 8004792:	2202      	movs	r2, #2
 8004794:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Init the base time for the input capture */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8004798:	687b      	ldr	r3, [r7, #4]
 800479a:	681a      	ldr	r2, [r3, #0]
 800479c:	687b      	ldr	r3, [r7, #4]
 800479e:	3304      	adds	r3, #4
 80047a0:	4619      	mov	r1, r3
 80047a2:	4610      	mov	r0, r2
 80047a4:	f000 fb0a 	bl	8004dbc <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 80047a8:	687b      	ldr	r3, [r7, #4]
 80047aa:	2201      	movs	r2, #1
 80047ac:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80047b0:	687b      	ldr	r3, [r7, #4]
 80047b2:	2201      	movs	r2, #1
 80047b4:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 80047b8:	687b      	ldr	r3, [r7, #4]
 80047ba:	2201      	movs	r2, #1
 80047bc:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 80047c0:	687b      	ldr	r3, [r7, #4]
 80047c2:	2201      	movs	r2, #1
 80047c4:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 80047c8:	687b      	ldr	r3, [r7, #4]
 80047ca:	2201      	movs	r2, #1
 80047cc:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80047d0:	687b      	ldr	r3, [r7, #4]
 80047d2:	2201      	movs	r2, #1
 80047d4:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
 80047d8:	687b      	ldr	r3, [r7, #4]
 80047da:	2201      	movs	r2, #1
 80047dc:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
 80047e0:	687b      	ldr	r3, [r7, #4]
 80047e2:	2201      	movs	r2, #1
 80047e4:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 80047e8:	687b      	ldr	r3, [r7, #4]
 80047ea:	2201      	movs	r2, #1
 80047ec:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 80047f0:	687b      	ldr	r3, [r7, #4]
 80047f2:	2201      	movs	r2, #1
 80047f4:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  return HAL_OK;
 80047f8:	2300      	movs	r3, #0
}
 80047fa:	4618      	mov	r0, r3
 80047fc:	3708      	adds	r7, #8
 80047fe:	46bd      	mov	sp, r7
 8004800:	bd80      	pop	{r7, pc}
	...

08004804 <HAL_TIM_IC_Start_IT>:
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  *            @arg TIM_CHANNEL_4: TIM Channel 4 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_IC_Start_IT(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 8004804:	b580      	push	{r7, lr}
 8004806:	b084      	sub	sp, #16
 8004808:	af00      	add	r7, sp, #0
 800480a:	6078      	str	r0, [r7, #4]
 800480c:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 800480e:	2300      	movs	r3, #0
 8004810:	73fb      	strb	r3, [r7, #15]
  uint32_t tmpsmcr;

  HAL_TIM_ChannelStateTypeDef channel_state = TIM_CHANNEL_STATE_GET(htim, Channel);
 8004812:	683b      	ldr	r3, [r7, #0]
 8004814:	2b00      	cmp	r3, #0
 8004816:	d104      	bne.n	8004822 <HAL_TIM_IC_Start_IT+0x1e>
 8004818:	687b      	ldr	r3, [r7, #4]
 800481a:	f893 303e 	ldrb.w	r3, [r3, #62]	@ 0x3e
 800481e:	b2db      	uxtb	r3, r3
 8004820:	e013      	b.n	800484a <HAL_TIM_IC_Start_IT+0x46>
 8004822:	683b      	ldr	r3, [r7, #0]
 8004824:	2b04      	cmp	r3, #4
 8004826:	d104      	bne.n	8004832 <HAL_TIM_IC_Start_IT+0x2e>
 8004828:	687b      	ldr	r3, [r7, #4]
 800482a:	f893 303f 	ldrb.w	r3, [r3, #63]	@ 0x3f
 800482e:	b2db      	uxtb	r3, r3
 8004830:	e00b      	b.n	800484a <HAL_TIM_IC_Start_IT+0x46>
 8004832:	683b      	ldr	r3, [r7, #0]
 8004834:	2b08      	cmp	r3, #8
 8004836:	d104      	bne.n	8004842 <HAL_TIM_IC_Start_IT+0x3e>
 8004838:	687b      	ldr	r3, [r7, #4]
 800483a:	f893 3040 	ldrb.w	r3, [r3, #64]	@ 0x40
 800483e:	b2db      	uxtb	r3, r3
 8004840:	e003      	b.n	800484a <HAL_TIM_IC_Start_IT+0x46>
 8004842:	687b      	ldr	r3, [r7, #4]
 8004844:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8004848:	b2db      	uxtb	r3, r3
 800484a:	73bb      	strb	r3, [r7, #14]
  HAL_TIM_ChannelStateTypeDef complementary_channel_state = TIM_CHANNEL_N_STATE_GET(htim, Channel);
 800484c:	683b      	ldr	r3, [r7, #0]
 800484e:	2b00      	cmp	r3, #0
 8004850:	d104      	bne.n	800485c <HAL_TIM_IC_Start_IT+0x58>
 8004852:	687b      	ldr	r3, [r7, #4]
 8004854:	f893 3042 	ldrb.w	r3, [r3, #66]	@ 0x42
 8004858:	b2db      	uxtb	r3, r3
 800485a:	e013      	b.n	8004884 <HAL_TIM_IC_Start_IT+0x80>
 800485c:	683b      	ldr	r3, [r7, #0]
 800485e:	2b04      	cmp	r3, #4
 8004860:	d104      	bne.n	800486c <HAL_TIM_IC_Start_IT+0x68>
 8004862:	687b      	ldr	r3, [r7, #4]
 8004864:	f893 3043 	ldrb.w	r3, [r3, #67]	@ 0x43
 8004868:	b2db      	uxtb	r3, r3
 800486a:	e00b      	b.n	8004884 <HAL_TIM_IC_Start_IT+0x80>
 800486c:	683b      	ldr	r3, [r7, #0]
 800486e:	2b08      	cmp	r3, #8
 8004870:	d104      	bne.n	800487c <HAL_TIM_IC_Start_IT+0x78>
 8004872:	687b      	ldr	r3, [r7, #4]
 8004874:	f893 3044 	ldrb.w	r3, [r3, #68]	@ 0x44
 8004878:	b2db      	uxtb	r3, r3
 800487a:	e003      	b.n	8004884 <HAL_TIM_IC_Start_IT+0x80>
 800487c:	687b      	ldr	r3, [r7, #4]
 800487e:	f893 3045 	ldrb.w	r3, [r3, #69]	@ 0x45
 8004882:	b2db      	uxtb	r3, r3
 8004884:	737b      	strb	r3, [r7, #13]

  /* Check the parameters */
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));

  /* Check the TIM channel state */
  if ((channel_state != HAL_TIM_CHANNEL_STATE_READY)
 8004886:	7bbb      	ldrb	r3, [r7, #14]
 8004888:	2b01      	cmp	r3, #1
 800488a:	d102      	bne.n	8004892 <HAL_TIM_IC_Start_IT+0x8e>
      || (complementary_channel_state != HAL_TIM_CHANNEL_STATE_READY))
 800488c:	7b7b      	ldrb	r3, [r7, #13]
 800488e:	2b01      	cmp	r3, #1
 8004890:	d001      	beq.n	8004896 <HAL_TIM_IC_Start_IT+0x92>
  {
    return HAL_ERROR;
 8004892:	2301      	movs	r3, #1
 8004894:	e0cc      	b.n	8004a30 <HAL_TIM_IC_Start_IT+0x22c>
  }

  /* Set the TIM channel state */
  TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 8004896:	683b      	ldr	r3, [r7, #0]
 8004898:	2b00      	cmp	r3, #0
 800489a:	d104      	bne.n	80048a6 <HAL_TIM_IC_Start_IT+0xa2>
 800489c:	687b      	ldr	r3, [r7, #4]
 800489e:	2202      	movs	r2, #2
 80048a0:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 80048a4:	e013      	b.n	80048ce <HAL_TIM_IC_Start_IT+0xca>
 80048a6:	683b      	ldr	r3, [r7, #0]
 80048a8:	2b04      	cmp	r3, #4
 80048aa:	d104      	bne.n	80048b6 <HAL_TIM_IC_Start_IT+0xb2>
 80048ac:	687b      	ldr	r3, [r7, #4]
 80048ae:	2202      	movs	r2, #2
 80048b0:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 80048b4:	e00b      	b.n	80048ce <HAL_TIM_IC_Start_IT+0xca>
 80048b6:	683b      	ldr	r3, [r7, #0]
 80048b8:	2b08      	cmp	r3, #8
 80048ba:	d104      	bne.n	80048c6 <HAL_TIM_IC_Start_IT+0xc2>
 80048bc:	687b      	ldr	r3, [r7, #4]
 80048be:	2202      	movs	r2, #2
 80048c0:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 80048c4:	e003      	b.n	80048ce <HAL_TIM_IC_Start_IT+0xca>
 80048c6:	687b      	ldr	r3, [r7, #4]
 80048c8:	2202      	movs	r2, #2
 80048ca:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
  TIM_CHANNEL_N_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 80048ce:	683b      	ldr	r3, [r7, #0]
 80048d0:	2b00      	cmp	r3, #0
 80048d2:	d104      	bne.n	80048de <HAL_TIM_IC_Start_IT+0xda>
 80048d4:	687b      	ldr	r3, [r7, #4]
 80048d6:	2202      	movs	r2, #2
 80048d8:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
 80048dc:	e013      	b.n	8004906 <HAL_TIM_IC_Start_IT+0x102>
 80048de:	683b      	ldr	r3, [r7, #0]
 80048e0:	2b04      	cmp	r3, #4
 80048e2:	d104      	bne.n	80048ee <HAL_TIM_IC_Start_IT+0xea>
 80048e4:	687b      	ldr	r3, [r7, #4]
 80048e6:	2202      	movs	r2, #2
 80048e8:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
 80048ec:	e00b      	b.n	8004906 <HAL_TIM_IC_Start_IT+0x102>
 80048ee:	683b      	ldr	r3, [r7, #0]
 80048f0:	2b08      	cmp	r3, #8
 80048f2:	d104      	bne.n	80048fe <HAL_TIM_IC_Start_IT+0xfa>
 80048f4:	687b      	ldr	r3, [r7, #4]
 80048f6:	2202      	movs	r2, #2
 80048f8:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 80048fc:	e003      	b.n	8004906 <HAL_TIM_IC_Start_IT+0x102>
 80048fe:	687b      	ldr	r3, [r7, #4]
 8004900:	2202      	movs	r2, #2
 8004902:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45

  switch (Channel)
 8004906:	683b      	ldr	r3, [r7, #0]
 8004908:	2b0c      	cmp	r3, #12
 800490a:	d841      	bhi.n	8004990 <HAL_TIM_IC_Start_IT+0x18c>
 800490c:	a201      	add	r2, pc, #4	@ (adr r2, 8004914 <HAL_TIM_IC_Start_IT+0x110>)
 800490e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004912:	bf00      	nop
 8004914:	08004949 	.word	0x08004949
 8004918:	08004991 	.word	0x08004991
 800491c:	08004991 	.word	0x08004991
 8004920:	08004991 	.word	0x08004991
 8004924:	0800495b 	.word	0x0800495b
 8004928:	08004991 	.word	0x08004991
 800492c:	08004991 	.word	0x08004991
 8004930:	08004991 	.word	0x08004991
 8004934:	0800496d 	.word	0x0800496d
 8004938:	08004991 	.word	0x08004991
 800493c:	08004991 	.word	0x08004991
 8004940:	08004991 	.word	0x08004991
 8004944:	0800497f 	.word	0x0800497f
  {
    case TIM_CHANNEL_1:
    {
      /* Enable the TIM Capture/Compare 1 interrupt */
      __HAL_TIM_ENABLE_IT(htim, TIM_IT_CC1);
 8004948:	687b      	ldr	r3, [r7, #4]
 800494a:	681b      	ldr	r3, [r3, #0]
 800494c:	68da      	ldr	r2, [r3, #12]
 800494e:	687b      	ldr	r3, [r7, #4]
 8004950:	681b      	ldr	r3, [r3, #0]
 8004952:	f042 0202 	orr.w	r2, r2, #2
 8004956:	60da      	str	r2, [r3, #12]
      break;
 8004958:	e01d      	b.n	8004996 <HAL_TIM_IC_Start_IT+0x192>
    }

    case TIM_CHANNEL_2:
    {
      /* Enable the TIM Capture/Compare 2 interrupt */
      __HAL_TIM_ENABLE_IT(htim, TIM_IT_CC2);
 800495a:	687b      	ldr	r3, [r7, #4]
 800495c:	681b      	ldr	r3, [r3, #0]
 800495e:	68da      	ldr	r2, [r3, #12]
 8004960:	687b      	ldr	r3, [r7, #4]
 8004962:	681b      	ldr	r3, [r3, #0]
 8004964:	f042 0204 	orr.w	r2, r2, #4
 8004968:	60da      	str	r2, [r3, #12]
      break;
 800496a:	e014      	b.n	8004996 <HAL_TIM_IC_Start_IT+0x192>
    }

    case TIM_CHANNEL_3:
    {
      /* Enable the TIM Capture/Compare 3 interrupt */
      __HAL_TIM_ENABLE_IT(htim, TIM_IT_CC3);
 800496c:	687b      	ldr	r3, [r7, #4]
 800496e:	681b      	ldr	r3, [r3, #0]
 8004970:	68da      	ldr	r2, [r3, #12]
 8004972:	687b      	ldr	r3, [r7, #4]
 8004974:	681b      	ldr	r3, [r3, #0]
 8004976:	f042 0208 	orr.w	r2, r2, #8
 800497a:	60da      	str	r2, [r3, #12]
      break;
 800497c:	e00b      	b.n	8004996 <HAL_TIM_IC_Start_IT+0x192>
    }

    case TIM_CHANNEL_4:
    {
      /* Enable the TIM Capture/Compare 4 interrupt */
      __HAL_TIM_ENABLE_IT(htim, TIM_IT_CC4);
 800497e:	687b      	ldr	r3, [r7, #4]
 8004980:	681b      	ldr	r3, [r3, #0]
 8004982:	68da      	ldr	r2, [r3, #12]
 8004984:	687b      	ldr	r3, [r7, #4]
 8004986:	681b      	ldr	r3, [r3, #0]
 8004988:	f042 0210 	orr.w	r2, r2, #16
 800498c:	60da      	str	r2, [r3, #12]
      break;
 800498e:	e002      	b.n	8004996 <HAL_TIM_IC_Start_IT+0x192>
    }

    default:
      status = HAL_ERROR;
 8004990:	2301      	movs	r3, #1
 8004992:	73fb      	strb	r3, [r7, #15]
      break;
 8004994:	bf00      	nop
  }

  if (status == HAL_OK)
 8004996:	7bfb      	ldrb	r3, [r7, #15]
 8004998:	2b00      	cmp	r3, #0
 800499a:	d148      	bne.n	8004a2e <HAL_TIM_IC_Start_IT+0x22a>
  {
    /* Enable the Input Capture channel */
    TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_ENABLE);
 800499c:	687b      	ldr	r3, [r7, #4]
 800499e:	681b      	ldr	r3, [r3, #0]
 80049a0:	2201      	movs	r2, #1
 80049a2:	6839      	ldr	r1, [r7, #0]
 80049a4:	4618      	mov	r0, r3
 80049a6:	f000 fbdf 	bl	8005168 <TIM_CCxChannelCmd>

    /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
    if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 80049aa:	687b      	ldr	r3, [r7, #4]
 80049ac:	681b      	ldr	r3, [r3, #0]
 80049ae:	4a22      	ldr	r2, [pc, #136]	@ (8004a38 <HAL_TIM_IC_Start_IT+0x234>)
 80049b0:	4293      	cmp	r3, r2
 80049b2:	d022      	beq.n	80049fa <HAL_TIM_IC_Start_IT+0x1f6>
 80049b4:	687b      	ldr	r3, [r7, #4]
 80049b6:	681b      	ldr	r3, [r3, #0]
 80049b8:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 80049bc:	d01d      	beq.n	80049fa <HAL_TIM_IC_Start_IT+0x1f6>
 80049be:	687b      	ldr	r3, [r7, #4]
 80049c0:	681b      	ldr	r3, [r3, #0]
 80049c2:	4a1e      	ldr	r2, [pc, #120]	@ (8004a3c <HAL_TIM_IC_Start_IT+0x238>)
 80049c4:	4293      	cmp	r3, r2
 80049c6:	d018      	beq.n	80049fa <HAL_TIM_IC_Start_IT+0x1f6>
 80049c8:	687b      	ldr	r3, [r7, #4]
 80049ca:	681b      	ldr	r3, [r3, #0]
 80049cc:	4a1c      	ldr	r2, [pc, #112]	@ (8004a40 <HAL_TIM_IC_Start_IT+0x23c>)
 80049ce:	4293      	cmp	r3, r2
 80049d0:	d013      	beq.n	80049fa <HAL_TIM_IC_Start_IT+0x1f6>
 80049d2:	687b      	ldr	r3, [r7, #4]
 80049d4:	681b      	ldr	r3, [r3, #0]
 80049d6:	4a1b      	ldr	r2, [pc, #108]	@ (8004a44 <HAL_TIM_IC_Start_IT+0x240>)
 80049d8:	4293      	cmp	r3, r2
 80049da:	d00e      	beq.n	80049fa <HAL_TIM_IC_Start_IT+0x1f6>
 80049dc:	687b      	ldr	r3, [r7, #4]
 80049de:	681b      	ldr	r3, [r3, #0]
 80049e0:	4a19      	ldr	r2, [pc, #100]	@ (8004a48 <HAL_TIM_IC_Start_IT+0x244>)
 80049e2:	4293      	cmp	r3, r2
 80049e4:	d009      	beq.n	80049fa <HAL_TIM_IC_Start_IT+0x1f6>
 80049e6:	687b      	ldr	r3, [r7, #4]
 80049e8:	681b      	ldr	r3, [r3, #0]
 80049ea:	4a18      	ldr	r2, [pc, #96]	@ (8004a4c <HAL_TIM_IC_Start_IT+0x248>)
 80049ec:	4293      	cmp	r3, r2
 80049ee:	d004      	beq.n	80049fa <HAL_TIM_IC_Start_IT+0x1f6>
 80049f0:	687b      	ldr	r3, [r7, #4]
 80049f2:	681b      	ldr	r3, [r3, #0]
 80049f4:	4a16      	ldr	r2, [pc, #88]	@ (8004a50 <HAL_TIM_IC_Start_IT+0x24c>)
 80049f6:	4293      	cmp	r3, r2
 80049f8:	d111      	bne.n	8004a1e <HAL_TIM_IC_Start_IT+0x21a>
    {
      tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 80049fa:	687b      	ldr	r3, [r7, #4]
 80049fc:	681b      	ldr	r3, [r3, #0]
 80049fe:	689b      	ldr	r3, [r3, #8]
 8004a00:	f003 0307 	and.w	r3, r3, #7
 8004a04:	60bb      	str	r3, [r7, #8]
      if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8004a06:	68bb      	ldr	r3, [r7, #8]
 8004a08:	2b06      	cmp	r3, #6
 8004a0a:	d010      	beq.n	8004a2e <HAL_TIM_IC_Start_IT+0x22a>
      {
        __HAL_TIM_ENABLE(htim);
 8004a0c:	687b      	ldr	r3, [r7, #4]
 8004a0e:	681b      	ldr	r3, [r3, #0]
 8004a10:	681a      	ldr	r2, [r3, #0]
 8004a12:	687b      	ldr	r3, [r7, #4]
 8004a14:	681b      	ldr	r3, [r3, #0]
 8004a16:	f042 0201 	orr.w	r2, r2, #1
 8004a1a:	601a      	str	r2, [r3, #0]
      if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8004a1c:	e007      	b.n	8004a2e <HAL_TIM_IC_Start_IT+0x22a>
      }
    }
    else
    {
      __HAL_TIM_ENABLE(htim);
 8004a1e:	687b      	ldr	r3, [r7, #4]
 8004a20:	681b      	ldr	r3, [r3, #0]
 8004a22:	681a      	ldr	r2, [r3, #0]
 8004a24:	687b      	ldr	r3, [r7, #4]
 8004a26:	681b      	ldr	r3, [r3, #0]
 8004a28:	f042 0201 	orr.w	r2, r2, #1
 8004a2c:	601a      	str	r2, [r3, #0]
    }
  }

  /* Return function status */
  return status;
 8004a2e:	7bfb      	ldrb	r3, [r7, #15]
}
 8004a30:	4618      	mov	r0, r3
 8004a32:	3710      	adds	r7, #16
 8004a34:	46bd      	mov	sp, r7
 8004a36:	bd80      	pop	{r7, pc}
 8004a38:	40010000 	.word	0x40010000
 8004a3c:	40000400 	.word	0x40000400
 8004a40:	40000800 	.word	0x40000800
 8004a44:	40000c00 	.word	0x40000c00
 8004a48:	40010400 	.word	0x40010400
 8004a4c:	40014000 	.word	0x40014000
 8004a50:	40001800 	.word	0x40001800

08004a54 <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 8004a54:	b580      	push	{r7, lr}
 8004a56:	b084      	sub	sp, #16
 8004a58:	af00      	add	r7, sp, #0
 8004a5a:	6078      	str	r0, [r7, #4]
  uint32_t itsource = htim->Instance->DIER;
 8004a5c:	687b      	ldr	r3, [r7, #4]
 8004a5e:	681b      	ldr	r3, [r3, #0]
 8004a60:	68db      	ldr	r3, [r3, #12]
 8004a62:	60fb      	str	r3, [r7, #12]
  uint32_t itflag   = htim->Instance->SR;
 8004a64:	687b      	ldr	r3, [r7, #4]
 8004a66:	681b      	ldr	r3, [r3, #0]
 8004a68:	691b      	ldr	r3, [r3, #16]
 8004a6a:	60bb      	str	r3, [r7, #8]

  /* Capture compare 1 event */
  if ((itflag & (TIM_FLAG_CC1)) == (TIM_FLAG_CC1))
 8004a6c:	68bb      	ldr	r3, [r7, #8]
 8004a6e:	f003 0302 	and.w	r3, r3, #2
 8004a72:	2b00      	cmp	r3, #0
 8004a74:	d020      	beq.n	8004ab8 <HAL_TIM_IRQHandler+0x64>
  {
    if ((itsource & (TIM_IT_CC1)) == (TIM_IT_CC1))
 8004a76:	68fb      	ldr	r3, [r7, #12]
 8004a78:	f003 0302 	and.w	r3, r3, #2
 8004a7c:	2b00      	cmp	r3, #0
 8004a7e:	d01b      	beq.n	8004ab8 <HAL_TIM_IRQHandler+0x64>
    {
      {
        __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC1);
 8004a80:	687b      	ldr	r3, [r7, #4]
 8004a82:	681b      	ldr	r3, [r3, #0]
 8004a84:	f06f 0202 	mvn.w	r2, #2
 8004a88:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 8004a8a:	687b      	ldr	r3, [r7, #4]
 8004a8c:	2201      	movs	r2, #1
 8004a8e:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 8004a90:	687b      	ldr	r3, [r7, #4]
 8004a92:	681b      	ldr	r3, [r3, #0]
 8004a94:	699b      	ldr	r3, [r3, #24]
 8004a96:	f003 0303 	and.w	r3, r3, #3
 8004a9a:	2b00      	cmp	r3, #0
 8004a9c:	d003      	beq.n	8004aa6 <HAL_TIM_IRQHandler+0x52>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 8004a9e:	6878      	ldr	r0, [r7, #4]
 8004aa0:	f000 f96e 	bl	8004d80 <HAL_TIM_IC_CaptureCallback>
 8004aa4:	e005      	b.n	8004ab2 <HAL_TIM_IRQHandler+0x5e>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 8004aa6:	6878      	ldr	r0, [r7, #4]
 8004aa8:	f000 f960 	bl	8004d6c <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 8004aac:	6878      	ldr	r0, [r7, #4]
 8004aae:	f000 f971 	bl	8004d94 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8004ab2:	687b      	ldr	r3, [r7, #4]
 8004ab4:	2200      	movs	r2, #0
 8004ab6:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if ((itflag & (TIM_FLAG_CC2)) == (TIM_FLAG_CC2))
 8004ab8:	68bb      	ldr	r3, [r7, #8]
 8004aba:	f003 0304 	and.w	r3, r3, #4
 8004abe:	2b00      	cmp	r3, #0
 8004ac0:	d020      	beq.n	8004b04 <HAL_TIM_IRQHandler+0xb0>
  {
    if ((itsource & (TIM_IT_CC2)) == (TIM_IT_CC2))
 8004ac2:	68fb      	ldr	r3, [r7, #12]
 8004ac4:	f003 0304 	and.w	r3, r3, #4
 8004ac8:	2b00      	cmp	r3, #0
 8004aca:	d01b      	beq.n	8004b04 <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC2);
 8004acc:	687b      	ldr	r3, [r7, #4]
 8004ace:	681b      	ldr	r3, [r3, #0]
 8004ad0:	f06f 0204 	mvn.w	r2, #4
 8004ad4:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 8004ad6:	687b      	ldr	r3, [r7, #4]
 8004ad8:	2202      	movs	r2, #2
 8004ada:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 8004adc:	687b      	ldr	r3, [r7, #4]
 8004ade:	681b      	ldr	r3, [r3, #0]
 8004ae0:	699b      	ldr	r3, [r3, #24]
 8004ae2:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 8004ae6:	2b00      	cmp	r3, #0
 8004ae8:	d003      	beq.n	8004af2 <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8004aea:	6878      	ldr	r0, [r7, #4]
 8004aec:	f000 f948 	bl	8004d80 <HAL_TIM_IC_CaptureCallback>
 8004af0:	e005      	b.n	8004afe <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8004af2:	6878      	ldr	r0, [r7, #4]
 8004af4:	f000 f93a 	bl	8004d6c <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8004af8:	6878      	ldr	r0, [r7, #4]
 8004afa:	f000 f94b 	bl	8004d94 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8004afe:	687b      	ldr	r3, [r7, #4]
 8004b00:	2200      	movs	r2, #0
 8004b02:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if ((itflag & (TIM_FLAG_CC3)) == (TIM_FLAG_CC3))
 8004b04:	68bb      	ldr	r3, [r7, #8]
 8004b06:	f003 0308 	and.w	r3, r3, #8
 8004b0a:	2b00      	cmp	r3, #0
 8004b0c:	d020      	beq.n	8004b50 <HAL_TIM_IRQHandler+0xfc>
  {
    if ((itsource & (TIM_IT_CC3)) == (TIM_IT_CC3))
 8004b0e:	68fb      	ldr	r3, [r7, #12]
 8004b10:	f003 0308 	and.w	r3, r3, #8
 8004b14:	2b00      	cmp	r3, #0
 8004b16:	d01b      	beq.n	8004b50 <HAL_TIM_IRQHandler+0xfc>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC3);
 8004b18:	687b      	ldr	r3, [r7, #4]
 8004b1a:	681b      	ldr	r3, [r3, #0]
 8004b1c:	f06f 0208 	mvn.w	r2, #8
 8004b20:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 8004b22:	687b      	ldr	r3, [r7, #4]
 8004b24:	2204      	movs	r2, #4
 8004b26:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 8004b28:	687b      	ldr	r3, [r7, #4]
 8004b2a:	681b      	ldr	r3, [r3, #0]
 8004b2c:	69db      	ldr	r3, [r3, #28]
 8004b2e:	f003 0303 	and.w	r3, r3, #3
 8004b32:	2b00      	cmp	r3, #0
 8004b34:	d003      	beq.n	8004b3e <HAL_TIM_IRQHandler+0xea>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8004b36:	6878      	ldr	r0, [r7, #4]
 8004b38:	f000 f922 	bl	8004d80 <HAL_TIM_IC_CaptureCallback>
 8004b3c:	e005      	b.n	8004b4a <HAL_TIM_IRQHandler+0xf6>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8004b3e:	6878      	ldr	r0, [r7, #4]
 8004b40:	f000 f914 	bl	8004d6c <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8004b44:	6878      	ldr	r0, [r7, #4]
 8004b46:	f000 f925 	bl	8004d94 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8004b4a:	687b      	ldr	r3, [r7, #4]
 8004b4c:	2200      	movs	r2, #0
 8004b4e:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if ((itflag & (TIM_FLAG_CC4)) == (TIM_FLAG_CC4))
 8004b50:	68bb      	ldr	r3, [r7, #8]
 8004b52:	f003 0310 	and.w	r3, r3, #16
 8004b56:	2b00      	cmp	r3, #0
 8004b58:	d020      	beq.n	8004b9c <HAL_TIM_IRQHandler+0x148>
  {
    if ((itsource & (TIM_IT_CC4)) == (TIM_IT_CC4))
 8004b5a:	68fb      	ldr	r3, [r7, #12]
 8004b5c:	f003 0310 	and.w	r3, r3, #16
 8004b60:	2b00      	cmp	r3, #0
 8004b62:	d01b      	beq.n	8004b9c <HAL_TIM_IRQHandler+0x148>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC4);
 8004b64:	687b      	ldr	r3, [r7, #4]
 8004b66:	681b      	ldr	r3, [r3, #0]
 8004b68:	f06f 0210 	mvn.w	r2, #16
 8004b6c:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 8004b6e:	687b      	ldr	r3, [r7, #4]
 8004b70:	2208      	movs	r2, #8
 8004b72:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 8004b74:	687b      	ldr	r3, [r7, #4]
 8004b76:	681b      	ldr	r3, [r3, #0]
 8004b78:	69db      	ldr	r3, [r3, #28]
 8004b7a:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 8004b7e:	2b00      	cmp	r3, #0
 8004b80:	d003      	beq.n	8004b8a <HAL_TIM_IRQHandler+0x136>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8004b82:	6878      	ldr	r0, [r7, #4]
 8004b84:	f000 f8fc 	bl	8004d80 <HAL_TIM_IC_CaptureCallback>
 8004b88:	e005      	b.n	8004b96 <HAL_TIM_IRQHandler+0x142>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8004b8a:	6878      	ldr	r0, [r7, #4]
 8004b8c:	f000 f8ee 	bl	8004d6c <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8004b90:	6878      	ldr	r0, [r7, #4]
 8004b92:	f000 f8ff 	bl	8004d94 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8004b96:	687b      	ldr	r3, [r7, #4]
 8004b98:	2200      	movs	r2, #0
 8004b9a:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if ((itflag & (TIM_FLAG_UPDATE)) == (TIM_FLAG_UPDATE))
 8004b9c:	68bb      	ldr	r3, [r7, #8]
 8004b9e:	f003 0301 	and.w	r3, r3, #1
 8004ba2:	2b00      	cmp	r3, #0
 8004ba4:	d00c      	beq.n	8004bc0 <HAL_TIM_IRQHandler+0x16c>
  {
    if ((itsource & (TIM_IT_UPDATE)) == (TIM_IT_UPDATE))
 8004ba6:	68fb      	ldr	r3, [r7, #12]
 8004ba8:	f003 0301 	and.w	r3, r3, #1
 8004bac:	2b00      	cmp	r3, #0
 8004bae:	d007      	beq.n	8004bc0 <HAL_TIM_IRQHandler+0x16c>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_UPDATE);
 8004bb0:	687b      	ldr	r3, [r7, #4]
 8004bb2:	681b      	ldr	r3, [r3, #0]
 8004bb4:	f06f 0201 	mvn.w	r2, #1
 8004bb8:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 8004bba:	6878      	ldr	r0, [r7, #4]
 8004bbc:	f7fb ff2a 	bl	8000a14 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if ((itflag & (TIM_FLAG_BREAK)) == (TIM_FLAG_BREAK))
 8004bc0:	68bb      	ldr	r3, [r7, #8]
 8004bc2:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8004bc6:	2b00      	cmp	r3, #0
 8004bc8:	d00c      	beq.n	8004be4 <HAL_TIM_IRQHandler+0x190>
  {
    if ((itsource & (TIM_IT_BREAK)) == (TIM_IT_BREAK))
 8004bca:	68fb      	ldr	r3, [r7, #12]
 8004bcc:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8004bd0:	2b00      	cmp	r3, #0
 8004bd2:	d007      	beq.n	8004be4 <HAL_TIM_IRQHandler+0x190>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK);
 8004bd4:	687b      	ldr	r3, [r7, #4]
 8004bd6:	681b      	ldr	r3, [r3, #0]
 8004bd8:	f06f 0280 	mvn.w	r2, #128	@ 0x80
 8004bdc:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 8004bde:	6878      	ldr	r0, [r7, #4]
 8004be0:	f000 fb6e 	bl	80052c0 <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if ((itflag & (TIM_FLAG_TRIGGER)) == (TIM_FLAG_TRIGGER))
 8004be4:	68bb      	ldr	r3, [r7, #8]
 8004be6:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8004bea:	2b00      	cmp	r3, #0
 8004bec:	d00c      	beq.n	8004c08 <HAL_TIM_IRQHandler+0x1b4>
  {
    if ((itsource & (TIM_IT_TRIGGER)) == (TIM_IT_TRIGGER))
 8004bee:	68fb      	ldr	r3, [r7, #12]
 8004bf0:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8004bf4:	2b00      	cmp	r3, #0
 8004bf6:	d007      	beq.n	8004c08 <HAL_TIM_IRQHandler+0x1b4>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_TRIGGER);
 8004bf8:	687b      	ldr	r3, [r7, #4]
 8004bfa:	681b      	ldr	r3, [r3, #0]
 8004bfc:	f06f 0240 	mvn.w	r2, #64	@ 0x40
 8004c00:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 8004c02:	6878      	ldr	r0, [r7, #4]
 8004c04:	f000 f8d0 	bl	8004da8 <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if ((itflag & (TIM_FLAG_COM)) == (TIM_FLAG_COM))
 8004c08:	68bb      	ldr	r3, [r7, #8]
 8004c0a:	f003 0320 	and.w	r3, r3, #32
 8004c0e:	2b00      	cmp	r3, #0
 8004c10:	d00c      	beq.n	8004c2c <HAL_TIM_IRQHandler+0x1d8>
  {
    if ((itsource & (TIM_IT_COM)) == (TIM_IT_COM))
 8004c12:	68fb      	ldr	r3, [r7, #12]
 8004c14:	f003 0320 	and.w	r3, r3, #32
 8004c18:	2b00      	cmp	r3, #0
 8004c1a:	d007      	beq.n	8004c2c <HAL_TIM_IRQHandler+0x1d8>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_COM);
 8004c1c:	687b      	ldr	r3, [r7, #4]
 8004c1e:	681b      	ldr	r3, [r3, #0]
 8004c20:	f06f 0220 	mvn.w	r2, #32
 8004c24:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 8004c26:	6878      	ldr	r0, [r7, #4]
 8004c28:	f000 fb40 	bl	80052ac <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 8004c2c:	bf00      	nop
 8004c2e:	3710      	adds	r7, #16
 8004c30:	46bd      	mov	sp, r7
 8004c32:	bd80      	pop	{r7, pc}

08004c34 <HAL_TIM_IC_ConfigChannel>:
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  *            @arg TIM_CHANNEL_4: TIM Channel 4 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_IC_ConfigChannel(TIM_HandleTypeDef *htim, const TIM_IC_InitTypeDef *sConfig, uint32_t Channel)
{
 8004c34:	b580      	push	{r7, lr}
 8004c36:	b086      	sub	sp, #24
 8004c38:	af00      	add	r7, sp, #0
 8004c3a:	60f8      	str	r0, [r7, #12]
 8004c3c:	60b9      	str	r1, [r7, #8]
 8004c3e:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8004c40:	2300      	movs	r3, #0
 8004c42:	75fb      	strb	r3, [r7, #23]
  assert_param(IS_TIM_IC_SELECTION(sConfig->ICSelection));
  assert_param(IS_TIM_IC_PRESCALER(sConfig->ICPrescaler));
  assert_param(IS_TIM_IC_FILTER(sConfig->ICFilter));

  /* Process Locked */
  __HAL_LOCK(htim);
 8004c44:	68fb      	ldr	r3, [r7, #12]
 8004c46:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 8004c4a:	2b01      	cmp	r3, #1
 8004c4c:	d101      	bne.n	8004c52 <HAL_TIM_IC_ConfigChannel+0x1e>
 8004c4e:	2302      	movs	r3, #2
 8004c50:	e088      	b.n	8004d64 <HAL_TIM_IC_ConfigChannel+0x130>
 8004c52:	68fb      	ldr	r3, [r7, #12]
 8004c54:	2201      	movs	r2, #1
 8004c56:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  if (Channel == TIM_CHANNEL_1)
 8004c5a:	687b      	ldr	r3, [r7, #4]
 8004c5c:	2b00      	cmp	r3, #0
 8004c5e:	d11b      	bne.n	8004c98 <HAL_TIM_IC_ConfigChannel+0x64>
  {
    /* TI1 Configuration */
    TIM_TI1_SetConfig(htim->Instance,
 8004c60:	68fb      	ldr	r3, [r7, #12]
 8004c62:	6818      	ldr	r0, [r3, #0]
                      sConfig->ICPolarity,
 8004c64:	68bb      	ldr	r3, [r7, #8]
 8004c66:	6819      	ldr	r1, [r3, #0]
                      sConfig->ICSelection,
 8004c68:	68bb      	ldr	r3, [r7, #8]
 8004c6a:	685a      	ldr	r2, [r3, #4]
                      sConfig->ICFilter);
 8004c6c:	68bb      	ldr	r3, [r7, #8]
 8004c6e:	68db      	ldr	r3, [r3, #12]
    TIM_TI1_SetConfig(htim->Instance,
 8004c70:	f000 f950 	bl	8004f14 <TIM_TI1_SetConfig>

    /* Reset the IC1PSC Bits */
    htim->Instance->CCMR1 &= ~TIM_CCMR1_IC1PSC;
 8004c74:	68fb      	ldr	r3, [r7, #12]
 8004c76:	681b      	ldr	r3, [r3, #0]
 8004c78:	699a      	ldr	r2, [r3, #24]
 8004c7a:	68fb      	ldr	r3, [r7, #12]
 8004c7c:	681b      	ldr	r3, [r3, #0]
 8004c7e:	f022 020c 	bic.w	r2, r2, #12
 8004c82:	619a      	str	r2, [r3, #24]

    /* Set the IC1PSC value */
    htim->Instance->CCMR1 |= sConfig->ICPrescaler;
 8004c84:	68fb      	ldr	r3, [r7, #12]
 8004c86:	681b      	ldr	r3, [r3, #0]
 8004c88:	6999      	ldr	r1, [r3, #24]
 8004c8a:	68bb      	ldr	r3, [r7, #8]
 8004c8c:	689a      	ldr	r2, [r3, #8]
 8004c8e:	68fb      	ldr	r3, [r7, #12]
 8004c90:	681b      	ldr	r3, [r3, #0]
 8004c92:	430a      	orrs	r2, r1
 8004c94:	619a      	str	r2, [r3, #24]
 8004c96:	e060      	b.n	8004d5a <HAL_TIM_IC_ConfigChannel+0x126>
  }
  else if (Channel == TIM_CHANNEL_2)
 8004c98:	687b      	ldr	r3, [r7, #4]
 8004c9a:	2b04      	cmp	r3, #4
 8004c9c:	d11c      	bne.n	8004cd8 <HAL_TIM_IC_ConfigChannel+0xa4>
  {
    /* TI2 Configuration */
    assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

    TIM_TI2_SetConfig(htim->Instance,
 8004c9e:	68fb      	ldr	r3, [r7, #12]
 8004ca0:	6818      	ldr	r0, [r3, #0]
                      sConfig->ICPolarity,
 8004ca2:	68bb      	ldr	r3, [r7, #8]
 8004ca4:	6819      	ldr	r1, [r3, #0]
                      sConfig->ICSelection,
 8004ca6:	68bb      	ldr	r3, [r7, #8]
 8004ca8:	685a      	ldr	r2, [r3, #4]
                      sConfig->ICFilter);
 8004caa:	68bb      	ldr	r3, [r7, #8]
 8004cac:	68db      	ldr	r3, [r3, #12]
    TIM_TI2_SetConfig(htim->Instance,
 8004cae:	f000 f9a5 	bl	8004ffc <TIM_TI2_SetConfig>

    /* Reset the IC2PSC Bits */
    htim->Instance->CCMR1 &= ~TIM_CCMR1_IC2PSC;
 8004cb2:	68fb      	ldr	r3, [r7, #12]
 8004cb4:	681b      	ldr	r3, [r3, #0]
 8004cb6:	699a      	ldr	r2, [r3, #24]
 8004cb8:	68fb      	ldr	r3, [r7, #12]
 8004cba:	681b      	ldr	r3, [r3, #0]
 8004cbc:	f422 6240 	bic.w	r2, r2, #3072	@ 0xc00
 8004cc0:	619a      	str	r2, [r3, #24]

    /* Set the IC2PSC value */
    htim->Instance->CCMR1 |= (sConfig->ICPrescaler << 8U);
 8004cc2:	68fb      	ldr	r3, [r7, #12]
 8004cc4:	681b      	ldr	r3, [r3, #0]
 8004cc6:	6999      	ldr	r1, [r3, #24]
 8004cc8:	68bb      	ldr	r3, [r7, #8]
 8004cca:	689b      	ldr	r3, [r3, #8]
 8004ccc:	021a      	lsls	r2, r3, #8
 8004cce:	68fb      	ldr	r3, [r7, #12]
 8004cd0:	681b      	ldr	r3, [r3, #0]
 8004cd2:	430a      	orrs	r2, r1
 8004cd4:	619a      	str	r2, [r3, #24]
 8004cd6:	e040      	b.n	8004d5a <HAL_TIM_IC_ConfigChannel+0x126>
  }
  else if (Channel == TIM_CHANNEL_3)
 8004cd8:	687b      	ldr	r3, [r7, #4]
 8004cda:	2b08      	cmp	r3, #8
 8004cdc:	d11b      	bne.n	8004d16 <HAL_TIM_IC_ConfigChannel+0xe2>
  {
    /* TI3 Configuration */
    assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

    TIM_TI3_SetConfig(htim->Instance,
 8004cde:	68fb      	ldr	r3, [r7, #12]
 8004ce0:	6818      	ldr	r0, [r3, #0]
                      sConfig->ICPolarity,
 8004ce2:	68bb      	ldr	r3, [r7, #8]
 8004ce4:	6819      	ldr	r1, [r3, #0]
                      sConfig->ICSelection,
 8004ce6:	68bb      	ldr	r3, [r7, #8]
 8004ce8:	685a      	ldr	r2, [r3, #4]
                      sConfig->ICFilter);
 8004cea:	68bb      	ldr	r3, [r7, #8]
 8004cec:	68db      	ldr	r3, [r3, #12]
    TIM_TI3_SetConfig(htim->Instance,
 8004cee:	f000 f9c2 	bl	8005076 <TIM_TI3_SetConfig>

    /* Reset the IC3PSC Bits */
    htim->Instance->CCMR2 &= ~TIM_CCMR2_IC3PSC;
 8004cf2:	68fb      	ldr	r3, [r7, #12]
 8004cf4:	681b      	ldr	r3, [r3, #0]
 8004cf6:	69da      	ldr	r2, [r3, #28]
 8004cf8:	68fb      	ldr	r3, [r7, #12]
 8004cfa:	681b      	ldr	r3, [r3, #0]
 8004cfc:	f022 020c 	bic.w	r2, r2, #12
 8004d00:	61da      	str	r2, [r3, #28]

    /* Set the IC3PSC value */
    htim->Instance->CCMR2 |= sConfig->ICPrescaler;
 8004d02:	68fb      	ldr	r3, [r7, #12]
 8004d04:	681b      	ldr	r3, [r3, #0]
 8004d06:	69d9      	ldr	r1, [r3, #28]
 8004d08:	68bb      	ldr	r3, [r7, #8]
 8004d0a:	689a      	ldr	r2, [r3, #8]
 8004d0c:	68fb      	ldr	r3, [r7, #12]
 8004d0e:	681b      	ldr	r3, [r3, #0]
 8004d10:	430a      	orrs	r2, r1
 8004d12:	61da      	str	r2, [r3, #28]
 8004d14:	e021      	b.n	8004d5a <HAL_TIM_IC_ConfigChannel+0x126>
  }
  else if (Channel == TIM_CHANNEL_4)
 8004d16:	687b      	ldr	r3, [r7, #4]
 8004d18:	2b0c      	cmp	r3, #12
 8004d1a:	d11c      	bne.n	8004d56 <HAL_TIM_IC_ConfigChannel+0x122>
  {
    /* TI4 Configuration */
    assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

    TIM_TI4_SetConfig(htim->Instance,
 8004d1c:	68fb      	ldr	r3, [r7, #12]
 8004d1e:	6818      	ldr	r0, [r3, #0]
                      sConfig->ICPolarity,
 8004d20:	68bb      	ldr	r3, [r7, #8]
 8004d22:	6819      	ldr	r1, [r3, #0]
                      sConfig->ICSelection,
 8004d24:	68bb      	ldr	r3, [r7, #8]
 8004d26:	685a      	ldr	r2, [r3, #4]
                      sConfig->ICFilter);
 8004d28:	68bb      	ldr	r3, [r7, #8]
 8004d2a:	68db      	ldr	r3, [r3, #12]
    TIM_TI4_SetConfig(htim->Instance,
 8004d2c:	f000 f9df 	bl	80050ee <TIM_TI4_SetConfig>

    /* Reset the IC4PSC Bits */
    htim->Instance->CCMR2 &= ~TIM_CCMR2_IC4PSC;
 8004d30:	68fb      	ldr	r3, [r7, #12]
 8004d32:	681b      	ldr	r3, [r3, #0]
 8004d34:	69da      	ldr	r2, [r3, #28]
 8004d36:	68fb      	ldr	r3, [r7, #12]
 8004d38:	681b      	ldr	r3, [r3, #0]
 8004d3a:	f422 6240 	bic.w	r2, r2, #3072	@ 0xc00
 8004d3e:	61da      	str	r2, [r3, #28]

    /* Set the IC4PSC value */
    htim->Instance->CCMR2 |= (sConfig->ICPrescaler << 8U);
 8004d40:	68fb      	ldr	r3, [r7, #12]
 8004d42:	681b      	ldr	r3, [r3, #0]
 8004d44:	69d9      	ldr	r1, [r3, #28]
 8004d46:	68bb      	ldr	r3, [r7, #8]
 8004d48:	689b      	ldr	r3, [r3, #8]
 8004d4a:	021a      	lsls	r2, r3, #8
 8004d4c:	68fb      	ldr	r3, [r7, #12]
 8004d4e:	681b      	ldr	r3, [r3, #0]
 8004d50:	430a      	orrs	r2, r1
 8004d52:	61da      	str	r2, [r3, #28]
 8004d54:	e001      	b.n	8004d5a <HAL_TIM_IC_ConfigChannel+0x126>
  }
  else
  {
    status = HAL_ERROR;
 8004d56:	2301      	movs	r3, #1
 8004d58:	75fb      	strb	r3, [r7, #23]
  }

  __HAL_UNLOCK(htim);
 8004d5a:	68fb      	ldr	r3, [r7, #12]
 8004d5c:	2200      	movs	r2, #0
 8004d5e:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return status;
 8004d62:	7dfb      	ldrb	r3, [r7, #23]
}
 8004d64:	4618      	mov	r0, r3
 8004d66:	3718      	adds	r7, #24
 8004d68:	46bd      	mov	sp, r7
 8004d6a:	bd80      	pop	{r7, pc}

08004d6c <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 8004d6c:	b480      	push	{r7}
 8004d6e:	b083      	sub	sp, #12
 8004d70:	af00      	add	r7, sp, #0
 8004d72:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 8004d74:	bf00      	nop
 8004d76:	370c      	adds	r7, #12
 8004d78:	46bd      	mov	sp, r7
 8004d7a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004d7e:	4770      	bx	lr

08004d80 <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 8004d80:	b480      	push	{r7}
 8004d82:	b083      	sub	sp, #12
 8004d84:	af00      	add	r7, sp, #0
 8004d86:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 8004d88:	bf00      	nop
 8004d8a:	370c      	adds	r7, #12
 8004d8c:	46bd      	mov	sp, r7
 8004d8e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004d92:	4770      	bx	lr

08004d94 <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 8004d94:	b480      	push	{r7}
 8004d96:	b083      	sub	sp, #12
 8004d98:	af00      	add	r7, sp, #0
 8004d9a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 8004d9c:	bf00      	nop
 8004d9e:	370c      	adds	r7, #12
 8004da0:	46bd      	mov	sp, r7
 8004da2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004da6:	4770      	bx	lr

08004da8 <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 8004da8:	b480      	push	{r7}
 8004daa:	b083      	sub	sp, #12
 8004dac:	af00      	add	r7, sp, #0
 8004dae:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 8004db0:	bf00      	nop
 8004db2:	370c      	adds	r7, #12
 8004db4:	46bd      	mov	sp, r7
 8004db6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004dba:	4770      	bx	lr

08004dbc <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, const TIM_Base_InitTypeDef *Structure)
{
 8004dbc:	b480      	push	{r7}
 8004dbe:	b085      	sub	sp, #20
 8004dc0:	af00      	add	r7, sp, #0
 8004dc2:	6078      	str	r0, [r7, #4]
 8004dc4:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 8004dc6:	687b      	ldr	r3, [r7, #4]
 8004dc8:	681b      	ldr	r3, [r3, #0]
 8004dca:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8004dcc:	687b      	ldr	r3, [r7, #4]
 8004dce:	4a46      	ldr	r2, [pc, #280]	@ (8004ee8 <TIM_Base_SetConfig+0x12c>)
 8004dd0:	4293      	cmp	r3, r2
 8004dd2:	d013      	beq.n	8004dfc <TIM_Base_SetConfig+0x40>
 8004dd4:	687b      	ldr	r3, [r7, #4]
 8004dd6:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8004dda:	d00f      	beq.n	8004dfc <TIM_Base_SetConfig+0x40>
 8004ddc:	687b      	ldr	r3, [r7, #4]
 8004dde:	4a43      	ldr	r2, [pc, #268]	@ (8004eec <TIM_Base_SetConfig+0x130>)
 8004de0:	4293      	cmp	r3, r2
 8004de2:	d00b      	beq.n	8004dfc <TIM_Base_SetConfig+0x40>
 8004de4:	687b      	ldr	r3, [r7, #4]
 8004de6:	4a42      	ldr	r2, [pc, #264]	@ (8004ef0 <TIM_Base_SetConfig+0x134>)
 8004de8:	4293      	cmp	r3, r2
 8004dea:	d007      	beq.n	8004dfc <TIM_Base_SetConfig+0x40>
 8004dec:	687b      	ldr	r3, [r7, #4]
 8004dee:	4a41      	ldr	r2, [pc, #260]	@ (8004ef4 <TIM_Base_SetConfig+0x138>)
 8004df0:	4293      	cmp	r3, r2
 8004df2:	d003      	beq.n	8004dfc <TIM_Base_SetConfig+0x40>
 8004df4:	687b      	ldr	r3, [r7, #4]
 8004df6:	4a40      	ldr	r2, [pc, #256]	@ (8004ef8 <TIM_Base_SetConfig+0x13c>)
 8004df8:	4293      	cmp	r3, r2
 8004dfa:	d108      	bne.n	8004e0e <TIM_Base_SetConfig+0x52>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8004dfc:	68fb      	ldr	r3, [r7, #12]
 8004dfe:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8004e02:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8004e04:	683b      	ldr	r3, [r7, #0]
 8004e06:	685b      	ldr	r3, [r3, #4]
 8004e08:	68fa      	ldr	r2, [r7, #12]
 8004e0a:	4313      	orrs	r3, r2
 8004e0c:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8004e0e:	687b      	ldr	r3, [r7, #4]
 8004e10:	4a35      	ldr	r2, [pc, #212]	@ (8004ee8 <TIM_Base_SetConfig+0x12c>)
 8004e12:	4293      	cmp	r3, r2
 8004e14:	d02b      	beq.n	8004e6e <TIM_Base_SetConfig+0xb2>
 8004e16:	687b      	ldr	r3, [r7, #4]
 8004e18:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8004e1c:	d027      	beq.n	8004e6e <TIM_Base_SetConfig+0xb2>
 8004e1e:	687b      	ldr	r3, [r7, #4]
 8004e20:	4a32      	ldr	r2, [pc, #200]	@ (8004eec <TIM_Base_SetConfig+0x130>)
 8004e22:	4293      	cmp	r3, r2
 8004e24:	d023      	beq.n	8004e6e <TIM_Base_SetConfig+0xb2>
 8004e26:	687b      	ldr	r3, [r7, #4]
 8004e28:	4a31      	ldr	r2, [pc, #196]	@ (8004ef0 <TIM_Base_SetConfig+0x134>)
 8004e2a:	4293      	cmp	r3, r2
 8004e2c:	d01f      	beq.n	8004e6e <TIM_Base_SetConfig+0xb2>
 8004e2e:	687b      	ldr	r3, [r7, #4]
 8004e30:	4a30      	ldr	r2, [pc, #192]	@ (8004ef4 <TIM_Base_SetConfig+0x138>)
 8004e32:	4293      	cmp	r3, r2
 8004e34:	d01b      	beq.n	8004e6e <TIM_Base_SetConfig+0xb2>
 8004e36:	687b      	ldr	r3, [r7, #4]
 8004e38:	4a2f      	ldr	r2, [pc, #188]	@ (8004ef8 <TIM_Base_SetConfig+0x13c>)
 8004e3a:	4293      	cmp	r3, r2
 8004e3c:	d017      	beq.n	8004e6e <TIM_Base_SetConfig+0xb2>
 8004e3e:	687b      	ldr	r3, [r7, #4]
 8004e40:	4a2e      	ldr	r2, [pc, #184]	@ (8004efc <TIM_Base_SetConfig+0x140>)
 8004e42:	4293      	cmp	r3, r2
 8004e44:	d013      	beq.n	8004e6e <TIM_Base_SetConfig+0xb2>
 8004e46:	687b      	ldr	r3, [r7, #4]
 8004e48:	4a2d      	ldr	r2, [pc, #180]	@ (8004f00 <TIM_Base_SetConfig+0x144>)
 8004e4a:	4293      	cmp	r3, r2
 8004e4c:	d00f      	beq.n	8004e6e <TIM_Base_SetConfig+0xb2>
 8004e4e:	687b      	ldr	r3, [r7, #4]
 8004e50:	4a2c      	ldr	r2, [pc, #176]	@ (8004f04 <TIM_Base_SetConfig+0x148>)
 8004e52:	4293      	cmp	r3, r2
 8004e54:	d00b      	beq.n	8004e6e <TIM_Base_SetConfig+0xb2>
 8004e56:	687b      	ldr	r3, [r7, #4]
 8004e58:	4a2b      	ldr	r2, [pc, #172]	@ (8004f08 <TIM_Base_SetConfig+0x14c>)
 8004e5a:	4293      	cmp	r3, r2
 8004e5c:	d007      	beq.n	8004e6e <TIM_Base_SetConfig+0xb2>
 8004e5e:	687b      	ldr	r3, [r7, #4]
 8004e60:	4a2a      	ldr	r2, [pc, #168]	@ (8004f0c <TIM_Base_SetConfig+0x150>)
 8004e62:	4293      	cmp	r3, r2
 8004e64:	d003      	beq.n	8004e6e <TIM_Base_SetConfig+0xb2>
 8004e66:	687b      	ldr	r3, [r7, #4]
 8004e68:	4a29      	ldr	r2, [pc, #164]	@ (8004f10 <TIM_Base_SetConfig+0x154>)
 8004e6a:	4293      	cmp	r3, r2
 8004e6c:	d108      	bne.n	8004e80 <TIM_Base_SetConfig+0xc4>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 8004e6e:	68fb      	ldr	r3, [r7, #12]
 8004e70:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8004e74:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8004e76:	683b      	ldr	r3, [r7, #0]
 8004e78:	68db      	ldr	r3, [r3, #12]
 8004e7a:	68fa      	ldr	r2, [r7, #12]
 8004e7c:	4313      	orrs	r3, r2
 8004e7e:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8004e80:	68fb      	ldr	r3, [r7, #12]
 8004e82:	f023 0280 	bic.w	r2, r3, #128	@ 0x80
 8004e86:	683b      	ldr	r3, [r7, #0]
 8004e88:	695b      	ldr	r3, [r3, #20]
 8004e8a:	4313      	orrs	r3, r2
 8004e8c:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 8004e8e:	687b      	ldr	r3, [r7, #4]
 8004e90:	68fa      	ldr	r2, [r7, #12]
 8004e92:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8004e94:	683b      	ldr	r3, [r7, #0]
 8004e96:	689a      	ldr	r2, [r3, #8]
 8004e98:	687b      	ldr	r3, [r7, #4]
 8004e9a:	62da      	str	r2, [r3, #44]	@ 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8004e9c:	683b      	ldr	r3, [r7, #0]
 8004e9e:	681a      	ldr	r2, [r3, #0]
 8004ea0:	687b      	ldr	r3, [r7, #4]
 8004ea2:	629a      	str	r2, [r3, #40]	@ 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8004ea4:	687b      	ldr	r3, [r7, #4]
 8004ea6:	4a10      	ldr	r2, [pc, #64]	@ (8004ee8 <TIM_Base_SetConfig+0x12c>)
 8004ea8:	4293      	cmp	r3, r2
 8004eaa:	d003      	beq.n	8004eb4 <TIM_Base_SetConfig+0xf8>
 8004eac:	687b      	ldr	r3, [r7, #4]
 8004eae:	4a12      	ldr	r2, [pc, #72]	@ (8004ef8 <TIM_Base_SetConfig+0x13c>)
 8004eb0:	4293      	cmp	r3, r2
 8004eb2:	d103      	bne.n	8004ebc <TIM_Base_SetConfig+0x100>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8004eb4:	683b      	ldr	r3, [r7, #0]
 8004eb6:	691a      	ldr	r2, [r3, #16]
 8004eb8:	687b      	ldr	r3, [r7, #4]
 8004eba:	631a      	str	r2, [r3, #48]	@ 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8004ebc:	687b      	ldr	r3, [r7, #4]
 8004ebe:	2201      	movs	r2, #1
 8004ec0:	615a      	str	r2, [r3, #20]

  /* Check if the update flag is set after the Update Generation, if so clear the UIF flag */
  if (HAL_IS_BIT_SET(TIMx->SR, TIM_FLAG_UPDATE))
 8004ec2:	687b      	ldr	r3, [r7, #4]
 8004ec4:	691b      	ldr	r3, [r3, #16]
 8004ec6:	f003 0301 	and.w	r3, r3, #1
 8004eca:	2b01      	cmp	r3, #1
 8004ecc:	d105      	bne.n	8004eda <TIM_Base_SetConfig+0x11e>
  {
    /* Clear the update flag */
    CLEAR_BIT(TIMx->SR, TIM_FLAG_UPDATE);
 8004ece:	687b      	ldr	r3, [r7, #4]
 8004ed0:	691b      	ldr	r3, [r3, #16]
 8004ed2:	f023 0201 	bic.w	r2, r3, #1
 8004ed6:	687b      	ldr	r3, [r7, #4]
 8004ed8:	611a      	str	r2, [r3, #16]
  }
}
 8004eda:	bf00      	nop
 8004edc:	3714      	adds	r7, #20
 8004ede:	46bd      	mov	sp, r7
 8004ee0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004ee4:	4770      	bx	lr
 8004ee6:	bf00      	nop
 8004ee8:	40010000 	.word	0x40010000
 8004eec:	40000400 	.word	0x40000400
 8004ef0:	40000800 	.word	0x40000800
 8004ef4:	40000c00 	.word	0x40000c00
 8004ef8:	40010400 	.word	0x40010400
 8004efc:	40014000 	.word	0x40014000
 8004f00:	40014400 	.word	0x40014400
 8004f04:	40014800 	.word	0x40014800
 8004f08:	40001800 	.word	0x40001800
 8004f0c:	40001c00 	.word	0x40001c00
 8004f10:	40002000 	.word	0x40002000

08004f14 <TIM_TI1_SetConfig>:
  *       (on channel2 path) is used as the input signal. Therefore CCMR1 must be
  *        protected against un-initialized filter and polarity values.
  */
void TIM_TI1_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICSelection,
                       uint32_t TIM_ICFilter)
{
 8004f14:	b480      	push	{r7}
 8004f16:	b087      	sub	sp, #28
 8004f18:	af00      	add	r7, sp, #0
 8004f1a:	60f8      	str	r0, [r7, #12]
 8004f1c:	60b9      	str	r1, [r7, #8]
 8004f1e:	607a      	str	r2, [r7, #4]
 8004f20:	603b      	str	r3, [r7, #0]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 8004f22:	68fb      	ldr	r3, [r7, #12]
 8004f24:	6a1b      	ldr	r3, [r3, #32]
 8004f26:	613b      	str	r3, [r7, #16]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8004f28:	68fb      	ldr	r3, [r7, #12]
 8004f2a:	6a1b      	ldr	r3, [r3, #32]
 8004f2c:	f023 0201 	bic.w	r2, r3, #1
 8004f30:	68fb      	ldr	r3, [r7, #12]
 8004f32:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8004f34:	68fb      	ldr	r3, [r7, #12]
 8004f36:	699b      	ldr	r3, [r3, #24]
 8004f38:	617b      	str	r3, [r7, #20]

  /* Select the Input */
  if (IS_TIM_CC2_INSTANCE(TIMx) != RESET)
 8004f3a:	68fb      	ldr	r3, [r7, #12]
 8004f3c:	4a28      	ldr	r2, [pc, #160]	@ (8004fe0 <TIM_TI1_SetConfig+0xcc>)
 8004f3e:	4293      	cmp	r3, r2
 8004f40:	d01b      	beq.n	8004f7a <TIM_TI1_SetConfig+0x66>
 8004f42:	68fb      	ldr	r3, [r7, #12]
 8004f44:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8004f48:	d017      	beq.n	8004f7a <TIM_TI1_SetConfig+0x66>
 8004f4a:	68fb      	ldr	r3, [r7, #12]
 8004f4c:	4a25      	ldr	r2, [pc, #148]	@ (8004fe4 <TIM_TI1_SetConfig+0xd0>)
 8004f4e:	4293      	cmp	r3, r2
 8004f50:	d013      	beq.n	8004f7a <TIM_TI1_SetConfig+0x66>
 8004f52:	68fb      	ldr	r3, [r7, #12]
 8004f54:	4a24      	ldr	r2, [pc, #144]	@ (8004fe8 <TIM_TI1_SetConfig+0xd4>)
 8004f56:	4293      	cmp	r3, r2
 8004f58:	d00f      	beq.n	8004f7a <TIM_TI1_SetConfig+0x66>
 8004f5a:	68fb      	ldr	r3, [r7, #12]
 8004f5c:	4a23      	ldr	r2, [pc, #140]	@ (8004fec <TIM_TI1_SetConfig+0xd8>)
 8004f5e:	4293      	cmp	r3, r2
 8004f60:	d00b      	beq.n	8004f7a <TIM_TI1_SetConfig+0x66>
 8004f62:	68fb      	ldr	r3, [r7, #12]
 8004f64:	4a22      	ldr	r2, [pc, #136]	@ (8004ff0 <TIM_TI1_SetConfig+0xdc>)
 8004f66:	4293      	cmp	r3, r2
 8004f68:	d007      	beq.n	8004f7a <TIM_TI1_SetConfig+0x66>
 8004f6a:	68fb      	ldr	r3, [r7, #12]
 8004f6c:	4a21      	ldr	r2, [pc, #132]	@ (8004ff4 <TIM_TI1_SetConfig+0xe0>)
 8004f6e:	4293      	cmp	r3, r2
 8004f70:	d003      	beq.n	8004f7a <TIM_TI1_SetConfig+0x66>
 8004f72:	68fb      	ldr	r3, [r7, #12]
 8004f74:	4a20      	ldr	r2, [pc, #128]	@ (8004ff8 <TIM_TI1_SetConfig+0xe4>)
 8004f76:	4293      	cmp	r3, r2
 8004f78:	d101      	bne.n	8004f7e <TIM_TI1_SetConfig+0x6a>
 8004f7a:	2301      	movs	r3, #1
 8004f7c:	e000      	b.n	8004f80 <TIM_TI1_SetConfig+0x6c>
 8004f7e:	2300      	movs	r3, #0
 8004f80:	2b00      	cmp	r3, #0
 8004f82:	d008      	beq.n	8004f96 <TIM_TI1_SetConfig+0x82>
  {
    tmpccmr1 &= ~TIM_CCMR1_CC1S;
 8004f84:	697b      	ldr	r3, [r7, #20]
 8004f86:	f023 0303 	bic.w	r3, r3, #3
 8004f8a:	617b      	str	r3, [r7, #20]
    tmpccmr1 |= TIM_ICSelection;
 8004f8c:	697a      	ldr	r2, [r7, #20]
 8004f8e:	687b      	ldr	r3, [r7, #4]
 8004f90:	4313      	orrs	r3, r2
 8004f92:	617b      	str	r3, [r7, #20]
 8004f94:	e003      	b.n	8004f9e <TIM_TI1_SetConfig+0x8a>
  }
  else
  {
    tmpccmr1 |= TIM_CCMR1_CC1S_0;
 8004f96:	697b      	ldr	r3, [r7, #20]
 8004f98:	f043 0301 	orr.w	r3, r3, #1
 8004f9c:	617b      	str	r3, [r7, #20]
  }

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 8004f9e:	697b      	ldr	r3, [r7, #20]
 8004fa0:	f023 03f0 	bic.w	r3, r3, #240	@ 0xf0
 8004fa4:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= ((TIM_ICFilter << 4U) & TIM_CCMR1_IC1F);
 8004fa6:	683b      	ldr	r3, [r7, #0]
 8004fa8:	011b      	lsls	r3, r3, #4
 8004faa:	b2db      	uxtb	r3, r3
 8004fac:	697a      	ldr	r2, [r7, #20]
 8004fae:	4313      	orrs	r3, r2
 8004fb0:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 8004fb2:	693b      	ldr	r3, [r7, #16]
 8004fb4:	f023 030a 	bic.w	r3, r3, #10
 8004fb8:	613b      	str	r3, [r7, #16]
  tmpccer |= (TIM_ICPolarity & (TIM_CCER_CC1P | TIM_CCER_CC1NP));
 8004fba:	68bb      	ldr	r3, [r7, #8]
 8004fbc:	f003 030a 	and.w	r3, r3, #10
 8004fc0:	693a      	ldr	r2, [r7, #16]
 8004fc2:	4313      	orrs	r3, r2
 8004fc4:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 8004fc6:	68fb      	ldr	r3, [r7, #12]
 8004fc8:	697a      	ldr	r2, [r7, #20]
 8004fca:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8004fcc:	68fb      	ldr	r3, [r7, #12]
 8004fce:	693a      	ldr	r2, [r7, #16]
 8004fd0:	621a      	str	r2, [r3, #32]
}
 8004fd2:	bf00      	nop
 8004fd4:	371c      	adds	r7, #28
 8004fd6:	46bd      	mov	sp, r7
 8004fd8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004fdc:	4770      	bx	lr
 8004fde:	bf00      	nop
 8004fe0:	40010000 	.word	0x40010000
 8004fe4:	40000400 	.word	0x40000400
 8004fe8:	40000800 	.word	0x40000800
 8004fec:	40000c00 	.word	0x40000c00
 8004ff0:	40010400 	.word	0x40010400
 8004ff4:	40014000 	.word	0x40014000
 8004ff8:	40001800 	.word	0x40001800

08004ffc <TIM_TI2_SetConfig>:
  *       (on channel1 path) is used as the input signal. Therefore CCMR1 must be
  *        protected against un-initialized filter and polarity values.
  */
static void TIM_TI2_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICSelection,
                              uint32_t TIM_ICFilter)
{
 8004ffc:	b480      	push	{r7}
 8004ffe:	b087      	sub	sp, #28
 8005000:	af00      	add	r7, sp, #0
 8005002:	60f8      	str	r0, [r7, #12]
 8005004:	60b9      	str	r1, [r7, #8]
 8005006:	607a      	str	r2, [r7, #4]
 8005008:	603b      	str	r3, [r7, #0]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  tmpccer = TIMx->CCER;
 800500a:	68fb      	ldr	r3, [r7, #12]
 800500c:	6a1b      	ldr	r3, [r3, #32]
 800500e:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8005010:	68fb      	ldr	r3, [r7, #12]
 8005012:	6a1b      	ldr	r3, [r3, #32]
 8005014:	f023 0210 	bic.w	r2, r3, #16
 8005018:	68fb      	ldr	r3, [r7, #12]
 800501a:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 800501c:	68fb      	ldr	r3, [r7, #12]
 800501e:	699b      	ldr	r3, [r3, #24]
 8005020:	613b      	str	r3, [r7, #16]

  /* Select the Input */
  tmpccmr1 &= ~TIM_CCMR1_CC2S;
 8005022:	693b      	ldr	r3, [r7, #16]
 8005024:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8005028:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICSelection << 8U);
 800502a:	687b      	ldr	r3, [r7, #4]
 800502c:	021b      	lsls	r3, r3, #8
 800502e:	693a      	ldr	r2, [r7, #16]
 8005030:	4313      	orrs	r3, r2
 8005032:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 8005034:	693b      	ldr	r3, [r7, #16]
 8005036:	f423 4370 	bic.w	r3, r3, #61440	@ 0xf000
 800503a:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= ((TIM_ICFilter << 12U) & TIM_CCMR1_IC2F);
 800503c:	683b      	ldr	r3, [r7, #0]
 800503e:	031b      	lsls	r3, r3, #12
 8005040:	b29b      	uxth	r3, r3
 8005042:	693a      	ldr	r2, [r7, #16]
 8005044:	4313      	orrs	r3, r2
 8005046:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 8005048:	697b      	ldr	r3, [r7, #20]
 800504a:	f023 03a0 	bic.w	r3, r3, #160	@ 0xa0
 800504e:	617b      	str	r3, [r7, #20]
  tmpccer |= ((TIM_ICPolarity << 4U) & (TIM_CCER_CC2P | TIM_CCER_CC2NP));
 8005050:	68bb      	ldr	r3, [r7, #8]
 8005052:	011b      	lsls	r3, r3, #4
 8005054:	f003 03a0 	and.w	r3, r3, #160	@ 0xa0
 8005058:	697a      	ldr	r2, [r7, #20]
 800505a:	4313      	orrs	r3, r2
 800505c:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 800505e:	68fb      	ldr	r3, [r7, #12]
 8005060:	693a      	ldr	r2, [r7, #16]
 8005062:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8005064:	68fb      	ldr	r3, [r7, #12]
 8005066:	697a      	ldr	r2, [r7, #20]
 8005068:	621a      	str	r2, [r3, #32]
}
 800506a:	bf00      	nop
 800506c:	371c      	adds	r7, #28
 800506e:	46bd      	mov	sp, r7
 8005070:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005074:	4770      	bx	lr

08005076 <TIM_TI3_SetConfig>:
  *       (on channel1 path) is used as the input signal. Therefore CCMR2 must be
  *        protected against un-initialized filter and polarity values.
  */
static void TIM_TI3_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICSelection,
                              uint32_t TIM_ICFilter)
{
 8005076:	b480      	push	{r7}
 8005078:	b087      	sub	sp, #28
 800507a:	af00      	add	r7, sp, #0
 800507c:	60f8      	str	r0, [r7, #12]
 800507e:	60b9      	str	r1, [r7, #8]
 8005080:	607a      	str	r2, [r7, #4]
 8005082:	603b      	str	r3, [r7, #0]
  uint32_t tmpccmr2;
  uint32_t tmpccer;

  /* Disable the Channel 3: Reset the CC3E Bit */
  tmpccer = TIMx->CCER;
 8005084:	68fb      	ldr	r3, [r7, #12]
 8005086:	6a1b      	ldr	r3, [r3, #32]
 8005088:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC3E;
 800508a:	68fb      	ldr	r3, [r7, #12]
 800508c:	6a1b      	ldr	r3, [r3, #32]
 800508e:	f423 7280 	bic.w	r2, r3, #256	@ 0x100
 8005092:	68fb      	ldr	r3, [r7, #12]
 8005094:	621a      	str	r2, [r3, #32]
  tmpccmr2 = TIMx->CCMR2;
 8005096:	68fb      	ldr	r3, [r7, #12]
 8005098:	69db      	ldr	r3, [r3, #28]
 800509a:	613b      	str	r3, [r7, #16]

  /* Select the Input */
  tmpccmr2 &= ~TIM_CCMR2_CC3S;
 800509c:	693b      	ldr	r3, [r7, #16]
 800509e:	f023 0303 	bic.w	r3, r3, #3
 80050a2:	613b      	str	r3, [r7, #16]
  tmpccmr2 |= TIM_ICSelection;
 80050a4:	693a      	ldr	r2, [r7, #16]
 80050a6:	687b      	ldr	r3, [r7, #4]
 80050a8:	4313      	orrs	r3, r2
 80050aa:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr2 &= ~TIM_CCMR2_IC3F;
 80050ac:	693b      	ldr	r3, [r7, #16]
 80050ae:	f023 03f0 	bic.w	r3, r3, #240	@ 0xf0
 80050b2:	613b      	str	r3, [r7, #16]
  tmpccmr2 |= ((TIM_ICFilter << 4U) & TIM_CCMR2_IC3F);
 80050b4:	683b      	ldr	r3, [r7, #0]
 80050b6:	011b      	lsls	r3, r3, #4
 80050b8:	b2db      	uxtb	r3, r3
 80050ba:	693a      	ldr	r2, [r7, #16]
 80050bc:	4313      	orrs	r3, r2
 80050be:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC3E Bit */
  tmpccer &= ~(TIM_CCER_CC3P | TIM_CCER_CC3NP);
 80050c0:	697b      	ldr	r3, [r7, #20]
 80050c2:	f423 6320 	bic.w	r3, r3, #2560	@ 0xa00
 80050c6:	617b      	str	r3, [r7, #20]
  tmpccer |= ((TIM_ICPolarity << 8U) & (TIM_CCER_CC3P | TIM_CCER_CC3NP));
 80050c8:	68bb      	ldr	r3, [r7, #8]
 80050ca:	021b      	lsls	r3, r3, #8
 80050cc:	f403 6320 	and.w	r3, r3, #2560	@ 0xa00
 80050d0:	697a      	ldr	r2, [r7, #20]
 80050d2:	4313      	orrs	r3, r2
 80050d4:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR2 and CCER registers */
  TIMx->CCMR2 = tmpccmr2;
 80050d6:	68fb      	ldr	r3, [r7, #12]
 80050d8:	693a      	ldr	r2, [r7, #16]
 80050da:	61da      	str	r2, [r3, #28]
  TIMx->CCER = tmpccer;
 80050dc:	68fb      	ldr	r3, [r7, #12]
 80050de:	697a      	ldr	r2, [r7, #20]
 80050e0:	621a      	str	r2, [r3, #32]
}
 80050e2:	bf00      	nop
 80050e4:	371c      	adds	r7, #28
 80050e6:	46bd      	mov	sp, r7
 80050e8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80050ec:	4770      	bx	lr

080050ee <TIM_TI4_SetConfig>:
  *        protected against un-initialized filter and polarity values.
  * @retval None
  */
static void TIM_TI4_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICSelection,
                              uint32_t TIM_ICFilter)
{
 80050ee:	b480      	push	{r7}
 80050f0:	b087      	sub	sp, #28
 80050f2:	af00      	add	r7, sp, #0
 80050f4:	60f8      	str	r0, [r7, #12]
 80050f6:	60b9      	str	r1, [r7, #8]
 80050f8:	607a      	str	r2, [r7, #4]
 80050fa:	603b      	str	r3, [r7, #0]
  uint32_t tmpccmr2;
  uint32_t tmpccer;

  /* Disable the Channel 4: Reset the CC4E Bit */
  tmpccer = TIMx->CCER;
 80050fc:	68fb      	ldr	r3, [r7, #12]
 80050fe:	6a1b      	ldr	r3, [r3, #32]
 8005100:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC4E;
 8005102:	68fb      	ldr	r3, [r7, #12]
 8005104:	6a1b      	ldr	r3, [r3, #32]
 8005106:	f423 5280 	bic.w	r2, r3, #4096	@ 0x1000
 800510a:	68fb      	ldr	r3, [r7, #12]
 800510c:	621a      	str	r2, [r3, #32]
  tmpccmr2 = TIMx->CCMR2;
 800510e:	68fb      	ldr	r3, [r7, #12]
 8005110:	69db      	ldr	r3, [r3, #28]
 8005112:	613b      	str	r3, [r7, #16]

  /* Select the Input */
  tmpccmr2 &= ~TIM_CCMR2_CC4S;
 8005114:	693b      	ldr	r3, [r7, #16]
 8005116:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 800511a:	613b      	str	r3, [r7, #16]
  tmpccmr2 |= (TIM_ICSelection << 8U);
 800511c:	687b      	ldr	r3, [r7, #4]
 800511e:	021b      	lsls	r3, r3, #8
 8005120:	693a      	ldr	r2, [r7, #16]
 8005122:	4313      	orrs	r3, r2
 8005124:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr2 &= ~TIM_CCMR2_IC4F;
 8005126:	693b      	ldr	r3, [r7, #16]
 8005128:	f423 4370 	bic.w	r3, r3, #61440	@ 0xf000
 800512c:	613b      	str	r3, [r7, #16]
  tmpccmr2 |= ((TIM_ICFilter << 12U) & TIM_CCMR2_IC4F);
 800512e:	683b      	ldr	r3, [r7, #0]
 8005130:	031b      	lsls	r3, r3, #12
 8005132:	b29b      	uxth	r3, r3
 8005134:	693a      	ldr	r2, [r7, #16]
 8005136:	4313      	orrs	r3, r2
 8005138:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC4E Bit */
  tmpccer &= ~(TIM_CCER_CC4P | TIM_CCER_CC4NP);
 800513a:	697b      	ldr	r3, [r7, #20]
 800513c:	f423 4320 	bic.w	r3, r3, #40960	@ 0xa000
 8005140:	617b      	str	r3, [r7, #20]
  tmpccer |= ((TIM_ICPolarity << 12U) & (TIM_CCER_CC4P | TIM_CCER_CC4NP));
 8005142:	68bb      	ldr	r3, [r7, #8]
 8005144:	031b      	lsls	r3, r3, #12
 8005146:	f403 4320 	and.w	r3, r3, #40960	@ 0xa000
 800514a:	697a      	ldr	r2, [r7, #20]
 800514c:	4313      	orrs	r3, r2
 800514e:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR2 and CCER registers */
  TIMx->CCMR2 = tmpccmr2;
 8005150:	68fb      	ldr	r3, [r7, #12]
 8005152:	693a      	ldr	r2, [r7, #16]
 8005154:	61da      	str	r2, [r3, #28]
  TIMx->CCER = tmpccer ;
 8005156:	68fb      	ldr	r3, [r7, #12]
 8005158:	697a      	ldr	r2, [r7, #20]
 800515a:	621a      	str	r2, [r3, #32]
}
 800515c:	bf00      	nop
 800515e:	371c      	adds	r7, #28
 8005160:	46bd      	mov	sp, r7
 8005162:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005166:	4770      	bx	lr

08005168 <TIM_CCxChannelCmd>:
  * @param  ChannelState specifies the TIM Channel CCxE bit new state.
  *          This parameter can be: TIM_CCx_ENABLE or TIM_CCx_DISABLE.
  * @retval None
  */
void TIM_CCxChannelCmd(TIM_TypeDef *TIMx, uint32_t Channel, uint32_t ChannelState)
{
 8005168:	b480      	push	{r7}
 800516a:	b087      	sub	sp, #28
 800516c:	af00      	add	r7, sp, #0
 800516e:	60f8      	str	r0, [r7, #12]
 8005170:	60b9      	str	r1, [r7, #8]
 8005172:	607a      	str	r2, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_CC1_INSTANCE(TIMx));
  assert_param(IS_TIM_CHANNELS(Channel));

  tmp = TIM_CCER_CC1E << (Channel & 0x1FU); /* 0x1FU = 31 bits max shift */
 8005174:	68bb      	ldr	r3, [r7, #8]
 8005176:	f003 031f 	and.w	r3, r3, #31
 800517a:	2201      	movs	r2, #1
 800517c:	fa02 f303 	lsl.w	r3, r2, r3
 8005180:	617b      	str	r3, [r7, #20]

  /* Reset the CCxE Bit */
  TIMx->CCER &= ~tmp;
 8005182:	68fb      	ldr	r3, [r7, #12]
 8005184:	6a1a      	ldr	r2, [r3, #32]
 8005186:	697b      	ldr	r3, [r7, #20]
 8005188:	43db      	mvns	r3, r3
 800518a:	401a      	ands	r2, r3
 800518c:	68fb      	ldr	r3, [r7, #12]
 800518e:	621a      	str	r2, [r3, #32]

  /* Set or reset the CCxE Bit */
  TIMx->CCER |= (uint32_t)(ChannelState << (Channel & 0x1FU)); /* 0x1FU = 31 bits max shift */
 8005190:	68fb      	ldr	r3, [r7, #12]
 8005192:	6a1a      	ldr	r2, [r3, #32]
 8005194:	68bb      	ldr	r3, [r7, #8]
 8005196:	f003 031f 	and.w	r3, r3, #31
 800519a:	6879      	ldr	r1, [r7, #4]
 800519c:	fa01 f303 	lsl.w	r3, r1, r3
 80051a0:	431a      	orrs	r2, r3
 80051a2:	68fb      	ldr	r3, [r7, #12]
 80051a4:	621a      	str	r2, [r3, #32]
}
 80051a6:	bf00      	nop
 80051a8:	371c      	adds	r7, #28
 80051aa:	46bd      	mov	sp, r7
 80051ac:	f85d 7b04 	ldr.w	r7, [sp], #4
 80051b0:	4770      	bx	lr
	...

080051b4 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        const TIM_MasterConfigTypeDef *sMasterConfig)
{
 80051b4:	b480      	push	{r7}
 80051b6:	b085      	sub	sp, #20
 80051b8:	af00      	add	r7, sp, #0
 80051ba:	6078      	str	r0, [r7, #4]
 80051bc:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 80051be:	687b      	ldr	r3, [r7, #4]
 80051c0:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 80051c4:	2b01      	cmp	r3, #1
 80051c6:	d101      	bne.n	80051cc <HAL_TIMEx_MasterConfigSynchronization+0x18>
 80051c8:	2302      	movs	r3, #2
 80051ca:	e05a      	b.n	8005282 <HAL_TIMEx_MasterConfigSynchronization+0xce>
 80051cc:	687b      	ldr	r3, [r7, #4]
 80051ce:	2201      	movs	r2, #1
 80051d0:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 80051d4:	687b      	ldr	r3, [r7, #4]
 80051d6:	2202      	movs	r2, #2
 80051d8:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 80051dc:	687b      	ldr	r3, [r7, #4]
 80051de:	681b      	ldr	r3, [r3, #0]
 80051e0:	685b      	ldr	r3, [r3, #4]
 80051e2:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 80051e4:	687b      	ldr	r3, [r7, #4]
 80051e6:	681b      	ldr	r3, [r3, #0]
 80051e8:	689b      	ldr	r3, [r3, #8]
 80051ea:	60bb      	str	r3, [r7, #8]

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 80051ec:	68fb      	ldr	r3, [r7, #12]
 80051ee:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 80051f2:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 80051f4:	683b      	ldr	r3, [r7, #0]
 80051f6:	681b      	ldr	r3, [r3, #0]
 80051f8:	68fa      	ldr	r2, [r7, #12]
 80051fa:	4313      	orrs	r3, r2
 80051fc:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 80051fe:	687b      	ldr	r3, [r7, #4]
 8005200:	681b      	ldr	r3, [r3, #0]
 8005202:	68fa      	ldr	r2, [r7, #12]
 8005204:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8005206:	687b      	ldr	r3, [r7, #4]
 8005208:	681b      	ldr	r3, [r3, #0]
 800520a:	4a21      	ldr	r2, [pc, #132]	@ (8005290 <HAL_TIMEx_MasterConfigSynchronization+0xdc>)
 800520c:	4293      	cmp	r3, r2
 800520e:	d022      	beq.n	8005256 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8005210:	687b      	ldr	r3, [r7, #4]
 8005212:	681b      	ldr	r3, [r3, #0]
 8005214:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8005218:	d01d      	beq.n	8005256 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 800521a:	687b      	ldr	r3, [r7, #4]
 800521c:	681b      	ldr	r3, [r3, #0]
 800521e:	4a1d      	ldr	r2, [pc, #116]	@ (8005294 <HAL_TIMEx_MasterConfigSynchronization+0xe0>)
 8005220:	4293      	cmp	r3, r2
 8005222:	d018      	beq.n	8005256 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8005224:	687b      	ldr	r3, [r7, #4]
 8005226:	681b      	ldr	r3, [r3, #0]
 8005228:	4a1b      	ldr	r2, [pc, #108]	@ (8005298 <HAL_TIMEx_MasterConfigSynchronization+0xe4>)
 800522a:	4293      	cmp	r3, r2
 800522c:	d013      	beq.n	8005256 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 800522e:	687b      	ldr	r3, [r7, #4]
 8005230:	681b      	ldr	r3, [r3, #0]
 8005232:	4a1a      	ldr	r2, [pc, #104]	@ (800529c <HAL_TIMEx_MasterConfigSynchronization+0xe8>)
 8005234:	4293      	cmp	r3, r2
 8005236:	d00e      	beq.n	8005256 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8005238:	687b      	ldr	r3, [r7, #4]
 800523a:	681b      	ldr	r3, [r3, #0]
 800523c:	4a18      	ldr	r2, [pc, #96]	@ (80052a0 <HAL_TIMEx_MasterConfigSynchronization+0xec>)
 800523e:	4293      	cmp	r3, r2
 8005240:	d009      	beq.n	8005256 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8005242:	687b      	ldr	r3, [r7, #4]
 8005244:	681b      	ldr	r3, [r3, #0]
 8005246:	4a17      	ldr	r2, [pc, #92]	@ (80052a4 <HAL_TIMEx_MasterConfigSynchronization+0xf0>)
 8005248:	4293      	cmp	r3, r2
 800524a:	d004      	beq.n	8005256 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 800524c:	687b      	ldr	r3, [r7, #4]
 800524e:	681b      	ldr	r3, [r3, #0]
 8005250:	4a15      	ldr	r2, [pc, #84]	@ (80052a8 <HAL_TIMEx_MasterConfigSynchronization+0xf4>)
 8005252:	4293      	cmp	r3, r2
 8005254:	d10c      	bne.n	8005270 <HAL_TIMEx_MasterConfigSynchronization+0xbc>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 8005256:	68bb      	ldr	r3, [r7, #8]
 8005258:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 800525c:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 800525e:	683b      	ldr	r3, [r7, #0]
 8005260:	685b      	ldr	r3, [r3, #4]
 8005262:	68ba      	ldr	r2, [r7, #8]
 8005264:	4313      	orrs	r3, r2
 8005266:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 8005268:	687b      	ldr	r3, [r7, #4]
 800526a:	681b      	ldr	r3, [r3, #0]
 800526c:	68ba      	ldr	r2, [r7, #8]
 800526e:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 8005270:	687b      	ldr	r3, [r7, #4]
 8005272:	2201      	movs	r2, #1
 8005274:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  __HAL_UNLOCK(htim);
 8005278:	687b      	ldr	r3, [r7, #4]
 800527a:	2200      	movs	r2, #0
 800527c:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return HAL_OK;
 8005280:	2300      	movs	r3, #0
}
 8005282:	4618      	mov	r0, r3
 8005284:	3714      	adds	r7, #20
 8005286:	46bd      	mov	sp, r7
 8005288:	f85d 7b04 	ldr.w	r7, [sp], #4
 800528c:	4770      	bx	lr
 800528e:	bf00      	nop
 8005290:	40010000 	.word	0x40010000
 8005294:	40000400 	.word	0x40000400
 8005298:	40000800 	.word	0x40000800
 800529c:	40000c00 	.word	0x40000c00
 80052a0:	40010400 	.word	0x40010400
 80052a4:	40014000 	.word	0x40014000
 80052a8:	40001800 	.word	0x40001800

080052ac <HAL_TIMEx_CommutCallback>:
  * @brief  Commutation callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 80052ac:	b480      	push	{r7}
 80052ae:	b083      	sub	sp, #12
 80052b0:	af00      	add	r7, sp, #0
 80052b2:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 80052b4:	bf00      	nop
 80052b6:	370c      	adds	r7, #12
 80052b8:	46bd      	mov	sp, r7
 80052ba:	f85d 7b04 	ldr.w	r7, [sp], #4
 80052be:	4770      	bx	lr

080052c0 <HAL_TIMEx_BreakCallback>:
  * @brief  Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 80052c0:	b480      	push	{r7}
 80052c2:	b083      	sub	sp, #12
 80052c4:	af00      	add	r7, sp, #0
 80052c6:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 80052c8:	bf00      	nop
 80052ca:	370c      	adds	r7, #12
 80052cc:	46bd      	mov	sp, r7
 80052ce:	f85d 7b04 	ldr.w	r7, [sp], #4
 80052d2:	4770      	bx	lr

080052d4 <makeFreeRtosPriority>:

extern void xPortSysTickHandler(void);

/* Convert from CMSIS type osPriority to FreeRTOS priority number */
static unsigned portBASE_TYPE makeFreeRtosPriority (osPriority priority)
{
 80052d4:	b480      	push	{r7}
 80052d6:	b085      	sub	sp, #20
 80052d8:	af00      	add	r7, sp, #0
 80052da:	4603      	mov	r3, r0
 80052dc:	80fb      	strh	r3, [r7, #6]
  unsigned portBASE_TYPE fpriority = tskIDLE_PRIORITY;
 80052de:	2300      	movs	r3, #0
 80052e0:	60fb      	str	r3, [r7, #12]
  
  if (priority != osPriorityError) {
 80052e2:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 80052e6:	2b84      	cmp	r3, #132	@ 0x84
 80052e8:	d005      	beq.n	80052f6 <makeFreeRtosPriority+0x22>
    fpriority += (priority - osPriorityIdle);
 80052ea:	f9b7 2006 	ldrsh.w	r2, [r7, #6]
 80052ee:	68fb      	ldr	r3, [r7, #12]
 80052f0:	4413      	add	r3, r2
 80052f2:	3303      	adds	r3, #3
 80052f4:	60fb      	str	r3, [r7, #12]
  }
  
  return fpriority;
 80052f6:	68fb      	ldr	r3, [r7, #12]
}
 80052f8:	4618      	mov	r0, r3
 80052fa:	3714      	adds	r7, #20
 80052fc:	46bd      	mov	sp, r7
 80052fe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005302:	4770      	bx	lr

08005304 <osKernelStart>:
* @param  argument      pointer that is passed to the thread function as start argument.
* @retval status code that indicates the execution status of the function
* @note   MUST REMAIN UNCHANGED: \b osKernelStart shall be consistent in every CMSIS-RTOS.
*/
osStatus osKernelStart (void)
{
 8005304:	b580      	push	{r7, lr}
 8005306:	af00      	add	r7, sp, #0
  vTaskStartScheduler();
 8005308:	f000 ffb8 	bl	800627c <vTaskStartScheduler>
  
  return osOK;
 800530c:	2300      	movs	r3, #0
}
 800530e:	4618      	mov	r0, r3
 8005310:	bd80      	pop	{r7, pc}

08005312 <osThreadCreate>:
* @param  argument      pointer that is passed to the thread function as start argument.
* @retval thread ID for reference by other functions or NULL in case of error.
* @note   MUST REMAIN UNCHANGED: \b osThreadCreate shall be consistent in every CMSIS-RTOS.
*/
osThreadId osThreadCreate (const osThreadDef_t *thread_def, void *argument)
{
 8005312:	b5f0      	push	{r4, r5, r6, r7, lr}
 8005314:	b089      	sub	sp, #36	@ 0x24
 8005316:	af04      	add	r7, sp, #16
 8005318:	6078      	str	r0, [r7, #4]
 800531a:	6039      	str	r1, [r7, #0]
  TaskHandle_t handle;
  
#if( configSUPPORT_STATIC_ALLOCATION == 1 ) &&  ( configSUPPORT_DYNAMIC_ALLOCATION == 1 )
  if((thread_def->buffer != NULL) && (thread_def->controlblock != NULL)) {
 800531c:	687b      	ldr	r3, [r7, #4]
 800531e:	695b      	ldr	r3, [r3, #20]
 8005320:	2b00      	cmp	r3, #0
 8005322:	d020      	beq.n	8005366 <osThreadCreate+0x54>
 8005324:	687b      	ldr	r3, [r7, #4]
 8005326:	699b      	ldr	r3, [r3, #24]
 8005328:	2b00      	cmp	r3, #0
 800532a:	d01c      	beq.n	8005366 <osThreadCreate+0x54>
    handle = xTaskCreateStatic((TaskFunction_t)thread_def->pthread,(const portCHAR *)thread_def->name,
 800532c:	687b      	ldr	r3, [r7, #4]
 800532e:	685c      	ldr	r4, [r3, #4]
 8005330:	687b      	ldr	r3, [r7, #4]
 8005332:	681d      	ldr	r5, [r3, #0]
              thread_def->stacksize, argument, makeFreeRtosPriority(thread_def->tpriority),
 8005334:	687b      	ldr	r3, [r7, #4]
 8005336:	691e      	ldr	r6, [r3, #16]
 8005338:	687b      	ldr	r3, [r7, #4]
 800533a:	f9b3 3008 	ldrsh.w	r3, [r3, #8]
    handle = xTaskCreateStatic((TaskFunction_t)thread_def->pthread,(const portCHAR *)thread_def->name,
 800533e:	4618      	mov	r0, r3
 8005340:	f7ff ffc8 	bl	80052d4 <makeFreeRtosPriority>
 8005344:	4601      	mov	r1, r0
              thread_def->buffer, thread_def->controlblock);
 8005346:	687b      	ldr	r3, [r7, #4]
 8005348:	695b      	ldr	r3, [r3, #20]
 800534a:	687a      	ldr	r2, [r7, #4]
 800534c:	6992      	ldr	r2, [r2, #24]
    handle = xTaskCreateStatic((TaskFunction_t)thread_def->pthread,(const portCHAR *)thread_def->name,
 800534e:	9202      	str	r2, [sp, #8]
 8005350:	9301      	str	r3, [sp, #4]
 8005352:	9100      	str	r1, [sp, #0]
 8005354:	683b      	ldr	r3, [r7, #0]
 8005356:	4632      	mov	r2, r6
 8005358:	4629      	mov	r1, r5
 800535a:	4620      	mov	r0, r4
 800535c:	f000 fda8 	bl	8005eb0 <xTaskCreateStatic>
 8005360:	4603      	mov	r3, r0
 8005362:	60fb      	str	r3, [r7, #12]
 8005364:	e01c      	b.n	80053a0 <osThreadCreate+0x8e>
  }
  else {
    if (xTaskCreate((TaskFunction_t)thread_def->pthread,(const portCHAR *)thread_def->name,
 8005366:	687b      	ldr	r3, [r7, #4]
 8005368:	685c      	ldr	r4, [r3, #4]
 800536a:	687b      	ldr	r3, [r7, #4]
 800536c:	681d      	ldr	r5, [r3, #0]
              thread_def->stacksize, argument, makeFreeRtosPriority(thread_def->tpriority),
 800536e:	687b      	ldr	r3, [r7, #4]
 8005370:	691b      	ldr	r3, [r3, #16]
    if (xTaskCreate((TaskFunction_t)thread_def->pthread,(const portCHAR *)thread_def->name,
 8005372:	b29e      	uxth	r6, r3
              thread_def->stacksize, argument, makeFreeRtosPriority(thread_def->tpriority),
 8005374:	687b      	ldr	r3, [r7, #4]
 8005376:	f9b3 3008 	ldrsh.w	r3, [r3, #8]
    if (xTaskCreate((TaskFunction_t)thread_def->pthread,(const portCHAR *)thread_def->name,
 800537a:	4618      	mov	r0, r3
 800537c:	f7ff ffaa 	bl	80052d4 <makeFreeRtosPriority>
 8005380:	4602      	mov	r2, r0
 8005382:	f107 030c 	add.w	r3, r7, #12
 8005386:	9301      	str	r3, [sp, #4]
 8005388:	9200      	str	r2, [sp, #0]
 800538a:	683b      	ldr	r3, [r7, #0]
 800538c:	4632      	mov	r2, r6
 800538e:	4629      	mov	r1, r5
 8005390:	4620      	mov	r0, r4
 8005392:	f000 fded 	bl	8005f70 <xTaskCreate>
 8005396:	4603      	mov	r3, r0
 8005398:	2b01      	cmp	r3, #1
 800539a:	d001      	beq.n	80053a0 <osThreadCreate+0x8e>
              &handle) != pdPASS)  {
      return NULL;
 800539c:	2300      	movs	r3, #0
 800539e:	e000      	b.n	80053a2 <osThreadCreate+0x90>
                   &handle) != pdPASS)  {
    return NULL;
  }     
#endif
  
  return handle;
 80053a0:	68fb      	ldr	r3, [r7, #12]
}
 80053a2:	4618      	mov	r0, r3
 80053a4:	3714      	adds	r7, #20
 80053a6:	46bd      	mov	sp, r7
 80053a8:	bdf0      	pop	{r4, r5, r6, r7, pc}

080053aa <osDelay>:
* @brief   Wait for Timeout (Time Delay)
* @param   millisec      time delay value
* @retval  status code that indicates the execution status of the function.
*/
osStatus osDelay (uint32_t millisec)
{
 80053aa:	b580      	push	{r7, lr}
 80053ac:	b084      	sub	sp, #16
 80053ae:	af00      	add	r7, sp, #0
 80053b0:	6078      	str	r0, [r7, #4]
#if INCLUDE_vTaskDelay
  TickType_t ticks = millisec / portTICK_PERIOD_MS;
 80053b2:	687b      	ldr	r3, [r7, #4]
 80053b4:	60fb      	str	r3, [r7, #12]
  
  vTaskDelay(ticks ? ticks : 1);          /* Minimum delay = 1 tick */
 80053b6:	68fb      	ldr	r3, [r7, #12]
 80053b8:	2b00      	cmp	r3, #0
 80053ba:	d001      	beq.n	80053c0 <osDelay+0x16>
 80053bc:	68fb      	ldr	r3, [r7, #12]
 80053be:	e000      	b.n	80053c2 <osDelay+0x18>
 80053c0:	2301      	movs	r3, #1
 80053c2:	4618      	mov	r0, r3
 80053c4:	f000 ff24 	bl	8006210 <vTaskDelay>
  
  return osOK;
 80053c8:	2300      	movs	r3, #0
#else
  (void) millisec;
  
  return osErrorResource;
#endif
}
 80053ca:	4618      	mov	r0, r3
 80053cc:	3710      	adds	r7, #16
 80053ce:	46bd      	mov	sp, r7
 80053d0:	bd80      	pop	{r7, pc}

080053d2 <osMutexCreate>:
* @param  mutex_def     mutex definition referenced with \ref osMutex.
* @retval  mutex ID for reference by other functions or NULL in case of error.
* @note   MUST REMAIN UNCHANGED: \b osMutexCreate shall be consistent in every CMSIS-RTOS.
*/
osMutexId osMutexCreate (const osMutexDef_t *mutex_def)
{
 80053d2:	b580      	push	{r7, lr}
 80053d4:	b082      	sub	sp, #8
 80053d6:	af00      	add	r7, sp, #0
 80053d8:	6078      	str	r0, [r7, #4]
#if ( configUSE_MUTEXES == 1)

#if( configSUPPORT_STATIC_ALLOCATION == 1 ) && ( configSUPPORT_DYNAMIC_ALLOCATION == 1 )

  if (mutex_def->controlblock != NULL) {
 80053da:	687b      	ldr	r3, [r7, #4]
 80053dc:	685b      	ldr	r3, [r3, #4]
 80053de:	2b00      	cmp	r3, #0
 80053e0:	d007      	beq.n	80053f2 <osMutexCreate+0x20>
    return xSemaphoreCreateMutexStatic( mutex_def->controlblock );
 80053e2:	687b      	ldr	r3, [r7, #4]
 80053e4:	685b      	ldr	r3, [r3, #4]
 80053e6:	4619      	mov	r1, r3
 80053e8:	2001      	movs	r0, #1
 80053ea:	f000 fa32 	bl	8005852 <xQueueCreateMutexStatic>
 80053ee:	4603      	mov	r3, r0
 80053f0:	e003      	b.n	80053fa <osMutexCreate+0x28>
     }
  else {
    return xSemaphoreCreateMutex(); 
 80053f2:	2001      	movs	r0, #1
 80053f4:	f000 fa15 	bl	8005822 <xQueueCreateMutex>
 80053f8:	4603      	mov	r3, r0
    return xSemaphoreCreateMutex(); 
#endif
#else
  return NULL;
#endif
}
 80053fa:	4618      	mov	r0, r3
 80053fc:	3708      	adds	r7, #8
 80053fe:	46bd      	mov	sp, r7
 8005400:	bd80      	pop	{r7, pc}

08005402 <vListInitialise>:
/*-----------------------------------------------------------
 * PUBLIC LIST API documented in list.h
 *----------------------------------------------------------*/

void vListInitialise( List_t * const pxList )
{
 8005402:	b480      	push	{r7}
 8005404:	b083      	sub	sp, #12
 8005406:	af00      	add	r7, sp, #0
 8005408:	6078      	str	r0, [r7, #4]
	/* The list structure contains a list item which is used to mark the
	end of the list.  To initialise the list the list end is inserted
	as the only list entry. */
	pxList->pxIndex = ( ListItem_t * ) &( pxList->xListEnd );			/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 800540a:	687b      	ldr	r3, [r7, #4]
 800540c:	f103 0208 	add.w	r2, r3, #8
 8005410:	687b      	ldr	r3, [r7, #4]
 8005412:	605a      	str	r2, [r3, #4]

	/* The list end value is the highest possible value in the list to
	ensure it remains at the end of the list. */
	pxList->xListEnd.xItemValue = portMAX_DELAY;
 8005414:	687b      	ldr	r3, [r7, #4]
 8005416:	f04f 32ff 	mov.w	r2, #4294967295
 800541a:	609a      	str	r2, [r3, #8]

	/* The list end next and previous pointers point to itself so we know
	when the list is empty. */
	pxList->xListEnd.pxNext = ( ListItem_t * ) &( pxList->xListEnd );	/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 800541c:	687b      	ldr	r3, [r7, #4]
 800541e:	f103 0208 	add.w	r2, r3, #8
 8005422:	687b      	ldr	r3, [r7, #4]
 8005424:	60da      	str	r2, [r3, #12]
	pxList->xListEnd.pxPrevious = ( ListItem_t * ) &( pxList->xListEnd );/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8005426:	687b      	ldr	r3, [r7, #4]
 8005428:	f103 0208 	add.w	r2, r3, #8
 800542c:	687b      	ldr	r3, [r7, #4]
 800542e:	611a      	str	r2, [r3, #16]

	pxList->uxNumberOfItems = ( UBaseType_t ) 0U;
 8005430:	687b      	ldr	r3, [r7, #4]
 8005432:	2200      	movs	r2, #0
 8005434:	601a      	str	r2, [r3, #0]

	/* Write known values into the list if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_LIST_INTEGRITY_CHECK_1_VALUE( pxList );
	listSET_LIST_INTEGRITY_CHECK_2_VALUE( pxList );
}
 8005436:	bf00      	nop
 8005438:	370c      	adds	r7, #12
 800543a:	46bd      	mov	sp, r7
 800543c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005440:	4770      	bx	lr

08005442 <vListInitialiseItem>:
/*-----------------------------------------------------------*/

void vListInitialiseItem( ListItem_t * const pxItem )
{
 8005442:	b480      	push	{r7}
 8005444:	b083      	sub	sp, #12
 8005446:	af00      	add	r7, sp, #0
 8005448:	6078      	str	r0, [r7, #4]
	/* Make sure the list item is not recorded as being on a list. */
	pxItem->pxContainer = NULL;
 800544a:	687b      	ldr	r3, [r7, #4]
 800544c:	2200      	movs	r2, #0
 800544e:	611a      	str	r2, [r3, #16]

	/* Write known values into the list item if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_FIRST_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
	listSET_SECOND_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
}
 8005450:	bf00      	nop
 8005452:	370c      	adds	r7, #12
 8005454:	46bd      	mov	sp, r7
 8005456:	f85d 7b04 	ldr.w	r7, [sp], #4
 800545a:	4770      	bx	lr

0800545c <vListInsertEnd>:
/*-----------------------------------------------------------*/

void vListInsertEnd( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 800545c:	b480      	push	{r7}
 800545e:	b085      	sub	sp, #20
 8005460:	af00      	add	r7, sp, #0
 8005462:	6078      	str	r0, [r7, #4]
 8005464:	6039      	str	r1, [r7, #0]
ListItem_t * const pxIndex = pxList->pxIndex;
 8005466:	687b      	ldr	r3, [r7, #4]
 8005468:	685b      	ldr	r3, [r3, #4]
 800546a:	60fb      	str	r3, [r7, #12]
	listTEST_LIST_ITEM_INTEGRITY( pxNewListItem );

	/* Insert a new list item into pxList, but rather than sort the list,
	makes the new list item the last item to be removed by a call to
	listGET_OWNER_OF_NEXT_ENTRY(). */
	pxNewListItem->pxNext = pxIndex;
 800546c:	683b      	ldr	r3, [r7, #0]
 800546e:	68fa      	ldr	r2, [r7, #12]
 8005470:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxPrevious = pxIndex->pxPrevious;
 8005472:	68fb      	ldr	r3, [r7, #12]
 8005474:	689a      	ldr	r2, [r3, #8]
 8005476:	683b      	ldr	r3, [r7, #0]
 8005478:	609a      	str	r2, [r3, #8]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	pxIndex->pxPrevious->pxNext = pxNewListItem;
 800547a:	68fb      	ldr	r3, [r7, #12]
 800547c:	689b      	ldr	r3, [r3, #8]
 800547e:	683a      	ldr	r2, [r7, #0]
 8005480:	605a      	str	r2, [r3, #4]
	pxIndex->pxPrevious = pxNewListItem;
 8005482:	68fb      	ldr	r3, [r7, #12]
 8005484:	683a      	ldr	r2, [r7, #0]
 8005486:	609a      	str	r2, [r3, #8]

	/* Remember which list the item is in. */
	pxNewListItem->pxContainer = pxList;
 8005488:	683b      	ldr	r3, [r7, #0]
 800548a:	687a      	ldr	r2, [r7, #4]
 800548c:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 800548e:	687b      	ldr	r3, [r7, #4]
 8005490:	681b      	ldr	r3, [r3, #0]
 8005492:	1c5a      	adds	r2, r3, #1
 8005494:	687b      	ldr	r3, [r7, #4]
 8005496:	601a      	str	r2, [r3, #0]
}
 8005498:	bf00      	nop
 800549a:	3714      	adds	r7, #20
 800549c:	46bd      	mov	sp, r7
 800549e:	f85d 7b04 	ldr.w	r7, [sp], #4
 80054a2:	4770      	bx	lr

080054a4 <vListInsert>:
/*-----------------------------------------------------------*/

void vListInsert( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 80054a4:	b480      	push	{r7}
 80054a6:	b085      	sub	sp, #20
 80054a8:	af00      	add	r7, sp, #0
 80054aa:	6078      	str	r0, [r7, #4]
 80054ac:	6039      	str	r1, [r7, #0]
ListItem_t *pxIterator;
const TickType_t xValueOfInsertion = pxNewListItem->xItemValue;
 80054ae:	683b      	ldr	r3, [r7, #0]
 80054b0:	681b      	ldr	r3, [r3, #0]
 80054b2:	60bb      	str	r3, [r7, #8]
	new list item should be placed after it.  This ensures that TCBs which are
	stored in ready lists (all of which have the same xItemValue value) get a
	share of the CPU.  However, if the xItemValue is the same as the back marker
	the iteration loop below will not end.  Therefore the value is checked
	first, and the algorithm slightly modified if necessary. */
	if( xValueOfInsertion == portMAX_DELAY )
 80054b4:	68bb      	ldr	r3, [r7, #8]
 80054b6:	f1b3 3fff 	cmp.w	r3, #4294967295
 80054ba:	d103      	bne.n	80054c4 <vListInsert+0x20>
	{
		pxIterator = pxList->xListEnd.pxPrevious;
 80054bc:	687b      	ldr	r3, [r7, #4]
 80054be:	691b      	ldr	r3, [r3, #16]
 80054c0:	60fb      	str	r3, [r7, #12]
 80054c2:	e00c      	b.n	80054de <vListInsert+0x3a>
			4) Using a queue or semaphore before it has been initialised or
			   before the scheduler has been started (are interrupts firing
			   before vTaskStartScheduler() has been called?).
		**********************************************************************/

		for( pxIterator = ( ListItem_t * ) &( pxList->xListEnd ); pxIterator->pxNext->xItemValue <= xValueOfInsertion; pxIterator = pxIterator->pxNext ) /*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. *//*lint !e440 The iterator moves to a different value, not xValueOfInsertion. */
 80054c4:	687b      	ldr	r3, [r7, #4]
 80054c6:	3308      	adds	r3, #8
 80054c8:	60fb      	str	r3, [r7, #12]
 80054ca:	e002      	b.n	80054d2 <vListInsert+0x2e>
 80054cc:	68fb      	ldr	r3, [r7, #12]
 80054ce:	685b      	ldr	r3, [r3, #4]
 80054d0:	60fb      	str	r3, [r7, #12]
 80054d2:	68fb      	ldr	r3, [r7, #12]
 80054d4:	685b      	ldr	r3, [r3, #4]
 80054d6:	681b      	ldr	r3, [r3, #0]
 80054d8:	68ba      	ldr	r2, [r7, #8]
 80054da:	429a      	cmp	r2, r3
 80054dc:	d2f6      	bcs.n	80054cc <vListInsert+0x28>
			/* There is nothing to do here, just iterating to the wanted
			insertion position. */
		}
	}

	pxNewListItem->pxNext = pxIterator->pxNext;
 80054de:	68fb      	ldr	r3, [r7, #12]
 80054e0:	685a      	ldr	r2, [r3, #4]
 80054e2:	683b      	ldr	r3, [r7, #0]
 80054e4:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxNext->pxPrevious = pxNewListItem;
 80054e6:	683b      	ldr	r3, [r7, #0]
 80054e8:	685b      	ldr	r3, [r3, #4]
 80054ea:	683a      	ldr	r2, [r7, #0]
 80054ec:	609a      	str	r2, [r3, #8]
	pxNewListItem->pxPrevious = pxIterator;
 80054ee:	683b      	ldr	r3, [r7, #0]
 80054f0:	68fa      	ldr	r2, [r7, #12]
 80054f2:	609a      	str	r2, [r3, #8]
	pxIterator->pxNext = pxNewListItem;
 80054f4:	68fb      	ldr	r3, [r7, #12]
 80054f6:	683a      	ldr	r2, [r7, #0]
 80054f8:	605a      	str	r2, [r3, #4]

	/* Remember which list the item is in.  This allows fast removal of the
	item later. */
	pxNewListItem->pxContainer = pxList;
 80054fa:	683b      	ldr	r3, [r7, #0]
 80054fc:	687a      	ldr	r2, [r7, #4]
 80054fe:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 8005500:	687b      	ldr	r3, [r7, #4]
 8005502:	681b      	ldr	r3, [r3, #0]
 8005504:	1c5a      	adds	r2, r3, #1
 8005506:	687b      	ldr	r3, [r7, #4]
 8005508:	601a      	str	r2, [r3, #0]
}
 800550a:	bf00      	nop
 800550c:	3714      	adds	r7, #20
 800550e:	46bd      	mov	sp, r7
 8005510:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005514:	4770      	bx	lr

08005516 <uxListRemove>:
/*-----------------------------------------------------------*/

UBaseType_t uxListRemove( ListItem_t * const pxItemToRemove )
{
 8005516:	b480      	push	{r7}
 8005518:	b085      	sub	sp, #20
 800551a:	af00      	add	r7, sp, #0
 800551c:	6078      	str	r0, [r7, #4]
/* The list item knows which list it is in.  Obtain the list from the list
item. */
List_t * const pxList = pxItemToRemove->pxContainer;
 800551e:	687b      	ldr	r3, [r7, #4]
 8005520:	691b      	ldr	r3, [r3, #16]
 8005522:	60fb      	str	r3, [r7, #12]

	pxItemToRemove->pxNext->pxPrevious = pxItemToRemove->pxPrevious;
 8005524:	687b      	ldr	r3, [r7, #4]
 8005526:	685b      	ldr	r3, [r3, #4]
 8005528:	687a      	ldr	r2, [r7, #4]
 800552a:	6892      	ldr	r2, [r2, #8]
 800552c:	609a      	str	r2, [r3, #8]
	pxItemToRemove->pxPrevious->pxNext = pxItemToRemove->pxNext;
 800552e:	687b      	ldr	r3, [r7, #4]
 8005530:	689b      	ldr	r3, [r3, #8]
 8005532:	687a      	ldr	r2, [r7, #4]
 8005534:	6852      	ldr	r2, [r2, #4]
 8005536:	605a      	str	r2, [r3, #4]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	/* Make sure the index is left pointing to a valid item. */
	if( pxList->pxIndex == pxItemToRemove )
 8005538:	68fb      	ldr	r3, [r7, #12]
 800553a:	685b      	ldr	r3, [r3, #4]
 800553c:	687a      	ldr	r2, [r7, #4]
 800553e:	429a      	cmp	r2, r3
 8005540:	d103      	bne.n	800554a <uxListRemove+0x34>
	{
		pxList->pxIndex = pxItemToRemove->pxPrevious;
 8005542:	687b      	ldr	r3, [r7, #4]
 8005544:	689a      	ldr	r2, [r3, #8]
 8005546:	68fb      	ldr	r3, [r7, #12]
 8005548:	605a      	str	r2, [r3, #4]
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxItemToRemove->pxContainer = NULL;
 800554a:	687b      	ldr	r3, [r7, #4]
 800554c:	2200      	movs	r2, #0
 800554e:	611a      	str	r2, [r3, #16]
	( pxList->uxNumberOfItems )--;
 8005550:	68fb      	ldr	r3, [r7, #12]
 8005552:	681b      	ldr	r3, [r3, #0]
 8005554:	1e5a      	subs	r2, r3, #1
 8005556:	68fb      	ldr	r3, [r7, #12]
 8005558:	601a      	str	r2, [r3, #0]

	return pxList->uxNumberOfItems;
 800555a:	68fb      	ldr	r3, [r7, #12]
 800555c:	681b      	ldr	r3, [r3, #0]
}
 800555e:	4618      	mov	r0, r3
 8005560:	3714      	adds	r7, #20
 8005562:	46bd      	mov	sp, r7
 8005564:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005568:	4770      	bx	lr
	...

0800556c <xQueueGenericReset>:
	}														\
	taskEXIT_CRITICAL()
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericReset( QueueHandle_t xQueue, BaseType_t xNewQueue )
{
 800556c:	b580      	push	{r7, lr}
 800556e:	b084      	sub	sp, #16
 8005570:	af00      	add	r7, sp, #0
 8005572:	6078      	str	r0, [r7, #4]
 8005574:	6039      	str	r1, [r7, #0]
Queue_t * const pxQueue = xQueue;
 8005576:	687b      	ldr	r3, [r7, #4]
 8005578:	60fb      	str	r3, [r7, #12]

	configASSERT( pxQueue );
 800557a:	68fb      	ldr	r3, [r7, #12]
 800557c:	2b00      	cmp	r3, #0
 800557e:	d10b      	bne.n	8005598 <xQueueGenericReset+0x2c>

portFORCE_INLINE static void vPortRaiseBASEPRI( void )
{
uint32_t ulNewBASEPRI;

	__asm volatile
 8005580:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8005584:	f383 8811 	msr	BASEPRI, r3
 8005588:	f3bf 8f6f 	isb	sy
 800558c:	f3bf 8f4f 	dsb	sy
 8005590:	60bb      	str	r3, [r7, #8]
		"	msr basepri, %0											\n" \
		"	isb														\n" \
		"	dsb														\n" \
		:"=r" (ulNewBASEPRI) : "i" ( configMAX_SYSCALL_INTERRUPT_PRIORITY ) : "memory"
	);
}
 8005592:	bf00      	nop
 8005594:	bf00      	nop
 8005596:	e7fd      	b.n	8005594 <xQueueGenericReset+0x28>

	taskENTER_CRITICAL();
 8005598:	f001 fde6 	bl	8007168 <vPortEnterCritical>
	{
		pxQueue->u.xQueue.pcTail = pxQueue->pcHead + ( pxQueue->uxLength * pxQueue->uxItemSize ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 800559c:	68fb      	ldr	r3, [r7, #12]
 800559e:	681a      	ldr	r2, [r3, #0]
 80055a0:	68fb      	ldr	r3, [r7, #12]
 80055a2:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80055a4:	68f9      	ldr	r1, [r7, #12]
 80055a6:	6c09      	ldr	r1, [r1, #64]	@ 0x40
 80055a8:	fb01 f303 	mul.w	r3, r1, r3
 80055ac:	441a      	add	r2, r3
 80055ae:	68fb      	ldr	r3, [r7, #12]
 80055b0:	609a      	str	r2, [r3, #8]
		pxQueue->uxMessagesWaiting = ( UBaseType_t ) 0U;
 80055b2:	68fb      	ldr	r3, [r7, #12]
 80055b4:	2200      	movs	r2, #0
 80055b6:	639a      	str	r2, [r3, #56]	@ 0x38
		pxQueue->pcWriteTo = pxQueue->pcHead;
 80055b8:	68fb      	ldr	r3, [r7, #12]
 80055ba:	681a      	ldr	r2, [r3, #0]
 80055bc:	68fb      	ldr	r3, [r7, #12]
 80055be:	605a      	str	r2, [r3, #4]
		pxQueue->u.xQueue.pcReadFrom = pxQueue->pcHead + ( ( pxQueue->uxLength - 1U ) * pxQueue->uxItemSize ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 80055c0:	68fb      	ldr	r3, [r7, #12]
 80055c2:	681a      	ldr	r2, [r3, #0]
 80055c4:	68fb      	ldr	r3, [r7, #12]
 80055c6:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80055c8:	3b01      	subs	r3, #1
 80055ca:	68f9      	ldr	r1, [r7, #12]
 80055cc:	6c09      	ldr	r1, [r1, #64]	@ 0x40
 80055ce:	fb01 f303 	mul.w	r3, r1, r3
 80055d2:	441a      	add	r2, r3
 80055d4:	68fb      	ldr	r3, [r7, #12]
 80055d6:	60da      	str	r2, [r3, #12]
		pxQueue->cRxLock = queueUNLOCKED;
 80055d8:	68fb      	ldr	r3, [r7, #12]
 80055da:	22ff      	movs	r2, #255	@ 0xff
 80055dc:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
		pxQueue->cTxLock = queueUNLOCKED;
 80055e0:	68fb      	ldr	r3, [r7, #12]
 80055e2:	22ff      	movs	r2, #255	@ 0xff
 80055e4:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45

		if( xNewQueue == pdFALSE )
 80055e8:	683b      	ldr	r3, [r7, #0]
 80055ea:	2b00      	cmp	r3, #0
 80055ec:	d114      	bne.n	8005618 <xQueueGenericReset+0xac>
			/* If there are tasks blocked waiting to read from the queue, then
			the tasks will remain blocked as after this function exits the queue
			will still be empty.  If there are tasks blocked waiting to write to
			the queue, then one should be unblocked as after this function exits
			it will be possible to write to it. */
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 80055ee:	68fb      	ldr	r3, [r7, #12]
 80055f0:	691b      	ldr	r3, [r3, #16]
 80055f2:	2b00      	cmp	r3, #0
 80055f4:	d01a      	beq.n	800562c <xQueueGenericReset+0xc0>
			{
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 80055f6:	68fb      	ldr	r3, [r7, #12]
 80055f8:	3310      	adds	r3, #16
 80055fa:	4618      	mov	r0, r3
 80055fc:	f001 f898 	bl	8006730 <xTaskRemoveFromEventList>
 8005600:	4603      	mov	r3, r0
 8005602:	2b00      	cmp	r3, #0
 8005604:	d012      	beq.n	800562c <xQueueGenericReset+0xc0>
				{
					queueYIELD_IF_USING_PREEMPTION();
 8005606:	4b0d      	ldr	r3, [pc, #52]	@ (800563c <xQueueGenericReset+0xd0>)
 8005608:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 800560c:	601a      	str	r2, [r3, #0]
 800560e:	f3bf 8f4f 	dsb	sy
 8005612:	f3bf 8f6f 	isb	sy
 8005616:	e009      	b.n	800562c <xQueueGenericReset+0xc0>
			}
		}
		else
		{
			/* Ensure the event queues start in the correct state. */
			vListInitialise( &( pxQueue->xTasksWaitingToSend ) );
 8005618:	68fb      	ldr	r3, [r7, #12]
 800561a:	3310      	adds	r3, #16
 800561c:	4618      	mov	r0, r3
 800561e:	f7ff fef0 	bl	8005402 <vListInitialise>
			vListInitialise( &( pxQueue->xTasksWaitingToReceive ) );
 8005622:	68fb      	ldr	r3, [r7, #12]
 8005624:	3324      	adds	r3, #36	@ 0x24
 8005626:	4618      	mov	r0, r3
 8005628:	f7ff feeb 	bl	8005402 <vListInitialise>
		}
	}
	taskEXIT_CRITICAL();
 800562c:	f001 fdce 	bl	80071cc <vPortExitCritical>

	/* A value is returned for calling semantic consistency with previous
	versions. */
	return pdPASS;
 8005630:	2301      	movs	r3, #1
}
 8005632:	4618      	mov	r0, r3
 8005634:	3710      	adds	r7, #16
 8005636:	46bd      	mov	sp, r7
 8005638:	bd80      	pop	{r7, pc}
 800563a:	bf00      	nop
 800563c:	e000ed04 	.word	0xe000ed04

08005640 <xQueueGenericCreateStatic>:
/*-----------------------------------------------------------*/

#if( configSUPPORT_STATIC_ALLOCATION == 1 )

	QueueHandle_t xQueueGenericCreateStatic( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, uint8_t *pucQueueStorage, StaticQueue_t *pxStaticQueue, const uint8_t ucQueueType )
	{
 8005640:	b580      	push	{r7, lr}
 8005642:	b08e      	sub	sp, #56	@ 0x38
 8005644:	af02      	add	r7, sp, #8
 8005646:	60f8      	str	r0, [r7, #12]
 8005648:	60b9      	str	r1, [r7, #8]
 800564a:	607a      	str	r2, [r7, #4]
 800564c:	603b      	str	r3, [r7, #0]
	Queue_t *pxNewQueue;

		configASSERT( uxQueueLength > ( UBaseType_t ) 0 );
 800564e:	68fb      	ldr	r3, [r7, #12]
 8005650:	2b00      	cmp	r3, #0
 8005652:	d10b      	bne.n	800566c <xQueueGenericCreateStatic+0x2c>
	__asm volatile
 8005654:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8005658:	f383 8811 	msr	BASEPRI, r3
 800565c:	f3bf 8f6f 	isb	sy
 8005660:	f3bf 8f4f 	dsb	sy
 8005664:	62bb      	str	r3, [r7, #40]	@ 0x28
}
 8005666:	bf00      	nop
 8005668:	bf00      	nop
 800566a:	e7fd      	b.n	8005668 <xQueueGenericCreateStatic+0x28>

		/* The StaticQueue_t structure and the queue storage area must be
		supplied. */
		configASSERT( pxStaticQueue != NULL );
 800566c:	683b      	ldr	r3, [r7, #0]
 800566e:	2b00      	cmp	r3, #0
 8005670:	d10b      	bne.n	800568a <xQueueGenericCreateStatic+0x4a>
	__asm volatile
 8005672:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8005676:	f383 8811 	msr	BASEPRI, r3
 800567a:	f3bf 8f6f 	isb	sy
 800567e:	f3bf 8f4f 	dsb	sy
 8005682:	627b      	str	r3, [r7, #36]	@ 0x24
}
 8005684:	bf00      	nop
 8005686:	bf00      	nop
 8005688:	e7fd      	b.n	8005686 <xQueueGenericCreateStatic+0x46>

		/* A queue storage area should be provided if the item size is not 0, and
		should not be provided if the item size is 0. */
		configASSERT( !( ( pucQueueStorage != NULL ) && ( uxItemSize == 0 ) ) );
 800568a:	687b      	ldr	r3, [r7, #4]
 800568c:	2b00      	cmp	r3, #0
 800568e:	d002      	beq.n	8005696 <xQueueGenericCreateStatic+0x56>
 8005690:	68bb      	ldr	r3, [r7, #8]
 8005692:	2b00      	cmp	r3, #0
 8005694:	d001      	beq.n	800569a <xQueueGenericCreateStatic+0x5a>
 8005696:	2301      	movs	r3, #1
 8005698:	e000      	b.n	800569c <xQueueGenericCreateStatic+0x5c>
 800569a:	2300      	movs	r3, #0
 800569c:	2b00      	cmp	r3, #0
 800569e:	d10b      	bne.n	80056b8 <xQueueGenericCreateStatic+0x78>
	__asm volatile
 80056a0:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80056a4:	f383 8811 	msr	BASEPRI, r3
 80056a8:	f3bf 8f6f 	isb	sy
 80056ac:	f3bf 8f4f 	dsb	sy
 80056b0:	623b      	str	r3, [r7, #32]
}
 80056b2:	bf00      	nop
 80056b4:	bf00      	nop
 80056b6:	e7fd      	b.n	80056b4 <xQueueGenericCreateStatic+0x74>
		configASSERT( !( ( pucQueueStorage == NULL ) && ( uxItemSize != 0 ) ) );
 80056b8:	687b      	ldr	r3, [r7, #4]
 80056ba:	2b00      	cmp	r3, #0
 80056bc:	d102      	bne.n	80056c4 <xQueueGenericCreateStatic+0x84>
 80056be:	68bb      	ldr	r3, [r7, #8]
 80056c0:	2b00      	cmp	r3, #0
 80056c2:	d101      	bne.n	80056c8 <xQueueGenericCreateStatic+0x88>
 80056c4:	2301      	movs	r3, #1
 80056c6:	e000      	b.n	80056ca <xQueueGenericCreateStatic+0x8a>
 80056c8:	2300      	movs	r3, #0
 80056ca:	2b00      	cmp	r3, #0
 80056cc:	d10b      	bne.n	80056e6 <xQueueGenericCreateStatic+0xa6>
	__asm volatile
 80056ce:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80056d2:	f383 8811 	msr	BASEPRI, r3
 80056d6:	f3bf 8f6f 	isb	sy
 80056da:	f3bf 8f4f 	dsb	sy
 80056de:	61fb      	str	r3, [r7, #28]
}
 80056e0:	bf00      	nop
 80056e2:	bf00      	nop
 80056e4:	e7fd      	b.n	80056e2 <xQueueGenericCreateStatic+0xa2>
		#if( configASSERT_DEFINED == 1 )
		{
			/* Sanity check that the size of the structure used to declare a
			variable of type StaticQueue_t or StaticSemaphore_t equals the size of
			the real queue and semaphore structures. */
			volatile size_t xSize = sizeof( StaticQueue_t );
 80056e6:	2348      	movs	r3, #72	@ 0x48
 80056e8:	617b      	str	r3, [r7, #20]
			configASSERT( xSize == sizeof( Queue_t ) );
 80056ea:	697b      	ldr	r3, [r7, #20]
 80056ec:	2b48      	cmp	r3, #72	@ 0x48
 80056ee:	d00b      	beq.n	8005708 <xQueueGenericCreateStatic+0xc8>
	__asm volatile
 80056f0:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80056f4:	f383 8811 	msr	BASEPRI, r3
 80056f8:	f3bf 8f6f 	isb	sy
 80056fc:	f3bf 8f4f 	dsb	sy
 8005700:	61bb      	str	r3, [r7, #24]
}
 8005702:	bf00      	nop
 8005704:	bf00      	nop
 8005706:	e7fd      	b.n	8005704 <xQueueGenericCreateStatic+0xc4>
			( void ) xSize; /* Keeps lint quiet when configASSERT() is not defined. */
 8005708:	697b      	ldr	r3, [r7, #20]
		#endif /* configASSERT_DEFINED */

		/* The address of a statically allocated queue was passed in, use it.
		The address of a statically allocated storage area was also passed in
		but is already set. */
		pxNewQueue = ( Queue_t * ) pxStaticQueue; /*lint !e740 !e9087 Unusual cast is ok as the structures are designed to have the same alignment, and the size is checked by an assert. */
 800570a:	683b      	ldr	r3, [r7, #0]
 800570c:	62fb      	str	r3, [r7, #44]	@ 0x2c

		if( pxNewQueue != NULL )
 800570e:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8005710:	2b00      	cmp	r3, #0
 8005712:	d00d      	beq.n	8005730 <xQueueGenericCreateStatic+0xf0>
			#if( configSUPPORT_DYNAMIC_ALLOCATION == 1 )
			{
				/* Queues can be allocated wither statically or dynamically, so
				note this queue was allocated statically in case the queue is
				later deleted. */
				pxNewQueue->ucStaticallyAllocated = pdTRUE;
 8005714:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8005716:	2201      	movs	r2, #1
 8005718:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46
			}
			#endif /* configSUPPORT_DYNAMIC_ALLOCATION */

			prvInitialiseNewQueue( uxQueueLength, uxItemSize, pucQueueStorage, ucQueueType, pxNewQueue );
 800571c:	f897 2038 	ldrb.w	r2, [r7, #56]	@ 0x38
 8005720:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8005722:	9300      	str	r3, [sp, #0]
 8005724:	4613      	mov	r3, r2
 8005726:	687a      	ldr	r2, [r7, #4]
 8005728:	68b9      	ldr	r1, [r7, #8]
 800572a:	68f8      	ldr	r0, [r7, #12]
 800572c:	f000 f840 	bl	80057b0 <prvInitialiseNewQueue>
		{
			traceQUEUE_CREATE_FAILED( ucQueueType );
			mtCOVERAGE_TEST_MARKER();
		}

		return pxNewQueue;
 8005730:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
	}
 8005732:	4618      	mov	r0, r3
 8005734:	3730      	adds	r7, #48	@ 0x30
 8005736:	46bd      	mov	sp, r7
 8005738:	bd80      	pop	{r7, pc}

0800573a <xQueueGenericCreate>:
/*-----------------------------------------------------------*/

#if( configSUPPORT_DYNAMIC_ALLOCATION == 1 )

	QueueHandle_t xQueueGenericCreate( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, const uint8_t ucQueueType )
	{
 800573a:	b580      	push	{r7, lr}
 800573c:	b08a      	sub	sp, #40	@ 0x28
 800573e:	af02      	add	r7, sp, #8
 8005740:	60f8      	str	r0, [r7, #12]
 8005742:	60b9      	str	r1, [r7, #8]
 8005744:	4613      	mov	r3, r2
 8005746:	71fb      	strb	r3, [r7, #7]
	Queue_t *pxNewQueue;
	size_t xQueueSizeInBytes;
	uint8_t *pucQueueStorage;

		configASSERT( uxQueueLength > ( UBaseType_t ) 0 );
 8005748:	68fb      	ldr	r3, [r7, #12]
 800574a:	2b00      	cmp	r3, #0
 800574c:	d10b      	bne.n	8005766 <xQueueGenericCreate+0x2c>
	__asm volatile
 800574e:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8005752:	f383 8811 	msr	BASEPRI, r3
 8005756:	f3bf 8f6f 	isb	sy
 800575a:	f3bf 8f4f 	dsb	sy
 800575e:	613b      	str	r3, [r7, #16]
}
 8005760:	bf00      	nop
 8005762:	bf00      	nop
 8005764:	e7fd      	b.n	8005762 <xQueueGenericCreate+0x28>

		/* Allocate enough space to hold the maximum number of items that
		can be in the queue at any time.  It is valid for uxItemSize to be
		zero in the case the queue is used as a semaphore. */
		xQueueSizeInBytes = ( size_t ) ( uxQueueLength * uxItemSize ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8005766:	68fb      	ldr	r3, [r7, #12]
 8005768:	68ba      	ldr	r2, [r7, #8]
 800576a:	fb02 f303 	mul.w	r3, r2, r3
 800576e:	61fb      	str	r3, [r7, #28]
		alignment requirements of the Queue_t structure - which in this case
		is an int8_t *.  Therefore, whenever the stack alignment requirements
		are greater than or equal to the pointer to char requirements the cast
		is safe.  In other cases alignment requirements are not strict (one or
		two bytes). */
		pxNewQueue = ( Queue_t * ) pvPortMalloc( sizeof( Queue_t ) + xQueueSizeInBytes ); /*lint !e9087 !e9079 see comment above. */
 8005770:	69fb      	ldr	r3, [r7, #28]
 8005772:	3348      	adds	r3, #72	@ 0x48
 8005774:	4618      	mov	r0, r3
 8005776:	f001 fdd7 	bl	8007328 <pvPortMalloc>
 800577a:	61b8      	str	r0, [r7, #24]

		if( pxNewQueue != NULL )
 800577c:	69bb      	ldr	r3, [r7, #24]
 800577e:	2b00      	cmp	r3, #0
 8005780:	d011      	beq.n	80057a6 <xQueueGenericCreate+0x6c>
		{
			/* Jump past the queue structure to find the location of the queue
			storage area. */
			pucQueueStorage = ( uint8_t * ) pxNewQueue;
 8005782:	69bb      	ldr	r3, [r7, #24]
 8005784:	617b      	str	r3, [r7, #20]
			pucQueueStorage += sizeof( Queue_t ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 8005786:	697b      	ldr	r3, [r7, #20]
 8005788:	3348      	adds	r3, #72	@ 0x48
 800578a:	617b      	str	r3, [r7, #20]
			#if( configSUPPORT_STATIC_ALLOCATION == 1 )
			{
				/* Queues can be created either statically or dynamically, so
				note this task was created dynamically in case it is later
				deleted. */
				pxNewQueue->ucStaticallyAllocated = pdFALSE;
 800578c:	69bb      	ldr	r3, [r7, #24]
 800578e:	2200      	movs	r2, #0
 8005790:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46
			}
			#endif /* configSUPPORT_STATIC_ALLOCATION */

			prvInitialiseNewQueue( uxQueueLength, uxItemSize, pucQueueStorage, ucQueueType, pxNewQueue );
 8005794:	79fa      	ldrb	r2, [r7, #7]
 8005796:	69bb      	ldr	r3, [r7, #24]
 8005798:	9300      	str	r3, [sp, #0]
 800579a:	4613      	mov	r3, r2
 800579c:	697a      	ldr	r2, [r7, #20]
 800579e:	68b9      	ldr	r1, [r7, #8]
 80057a0:	68f8      	ldr	r0, [r7, #12]
 80057a2:	f000 f805 	bl	80057b0 <prvInitialiseNewQueue>
		{
			traceQUEUE_CREATE_FAILED( ucQueueType );
			mtCOVERAGE_TEST_MARKER();
		}

		return pxNewQueue;
 80057a6:	69bb      	ldr	r3, [r7, #24]
	}
 80057a8:	4618      	mov	r0, r3
 80057aa:	3720      	adds	r7, #32
 80057ac:	46bd      	mov	sp, r7
 80057ae:	bd80      	pop	{r7, pc}

080057b0 <prvInitialiseNewQueue>:

#endif /* configSUPPORT_STATIC_ALLOCATION */
/*-----------------------------------------------------------*/

static void prvInitialiseNewQueue( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, uint8_t *pucQueueStorage, const uint8_t ucQueueType, Queue_t *pxNewQueue )
{
 80057b0:	b580      	push	{r7, lr}
 80057b2:	b084      	sub	sp, #16
 80057b4:	af00      	add	r7, sp, #0
 80057b6:	60f8      	str	r0, [r7, #12]
 80057b8:	60b9      	str	r1, [r7, #8]
 80057ba:	607a      	str	r2, [r7, #4]
 80057bc:	70fb      	strb	r3, [r7, #3]
	/* Remove compiler warnings about unused parameters should
	configUSE_TRACE_FACILITY not be set to 1. */
	( void ) ucQueueType;

	if( uxItemSize == ( UBaseType_t ) 0 )
 80057be:	68bb      	ldr	r3, [r7, #8]
 80057c0:	2b00      	cmp	r3, #0
 80057c2:	d103      	bne.n	80057cc <prvInitialiseNewQueue+0x1c>
	{
		/* No RAM was allocated for the queue storage area, but PC head cannot
		be set to NULL because NULL is used as a key to say the queue is used as
		a mutex.  Therefore just set pcHead to point to the queue as a benign
		value that is known to be within the memory map. */
		pxNewQueue->pcHead = ( int8_t * ) pxNewQueue;
 80057c4:	69bb      	ldr	r3, [r7, #24]
 80057c6:	69ba      	ldr	r2, [r7, #24]
 80057c8:	601a      	str	r2, [r3, #0]
 80057ca:	e002      	b.n	80057d2 <prvInitialiseNewQueue+0x22>
	}
	else
	{
		/* Set the head to the start of the queue storage area. */
		pxNewQueue->pcHead = ( int8_t * ) pucQueueStorage;
 80057cc:	69bb      	ldr	r3, [r7, #24]
 80057ce:	687a      	ldr	r2, [r7, #4]
 80057d0:	601a      	str	r2, [r3, #0]
	}

	/* Initialise the queue members as described where the queue type is
	defined. */
	pxNewQueue->uxLength = uxQueueLength;
 80057d2:	69bb      	ldr	r3, [r7, #24]
 80057d4:	68fa      	ldr	r2, [r7, #12]
 80057d6:	63da      	str	r2, [r3, #60]	@ 0x3c
	pxNewQueue->uxItemSize = uxItemSize;
 80057d8:	69bb      	ldr	r3, [r7, #24]
 80057da:	68ba      	ldr	r2, [r7, #8]
 80057dc:	641a      	str	r2, [r3, #64]	@ 0x40
	( void ) xQueueGenericReset( pxNewQueue, pdTRUE );
 80057de:	2101      	movs	r1, #1
 80057e0:	69b8      	ldr	r0, [r7, #24]
 80057e2:	f7ff fec3 	bl	800556c <xQueueGenericReset>
		pxNewQueue->pxQueueSetContainer = NULL;
	}
	#endif /* configUSE_QUEUE_SETS */

	traceQUEUE_CREATE( pxNewQueue );
}
 80057e6:	bf00      	nop
 80057e8:	3710      	adds	r7, #16
 80057ea:	46bd      	mov	sp, r7
 80057ec:	bd80      	pop	{r7, pc}

080057ee <prvInitialiseMutex>:
/*-----------------------------------------------------------*/

#if( configUSE_MUTEXES == 1 )

	static void prvInitialiseMutex( Queue_t *pxNewQueue )
	{
 80057ee:	b580      	push	{r7, lr}
 80057f0:	b082      	sub	sp, #8
 80057f2:	af00      	add	r7, sp, #0
 80057f4:	6078      	str	r0, [r7, #4]
		if( pxNewQueue != NULL )
 80057f6:	687b      	ldr	r3, [r7, #4]
 80057f8:	2b00      	cmp	r3, #0
 80057fa:	d00e      	beq.n	800581a <prvInitialiseMutex+0x2c>
		{
			/* The queue create function will set all the queue structure members
			correctly for a generic queue, but this function is creating a
			mutex.  Overwrite those members that need to be set differently -
			in particular the information required for priority inheritance. */
			pxNewQueue->u.xSemaphore.xMutexHolder = NULL;
 80057fc:	687b      	ldr	r3, [r7, #4]
 80057fe:	2200      	movs	r2, #0
 8005800:	609a      	str	r2, [r3, #8]
			pxNewQueue->uxQueueType = queueQUEUE_IS_MUTEX;
 8005802:	687b      	ldr	r3, [r7, #4]
 8005804:	2200      	movs	r2, #0
 8005806:	601a      	str	r2, [r3, #0]

			/* In case this is a recursive mutex. */
			pxNewQueue->u.xSemaphore.uxRecursiveCallCount = 0;
 8005808:	687b      	ldr	r3, [r7, #4]
 800580a:	2200      	movs	r2, #0
 800580c:	60da      	str	r2, [r3, #12]

			traceCREATE_MUTEX( pxNewQueue );

			/* Start with the semaphore in the expected state. */
			( void ) xQueueGenericSend( pxNewQueue, NULL, ( TickType_t ) 0U, queueSEND_TO_BACK );
 800580e:	2300      	movs	r3, #0
 8005810:	2200      	movs	r2, #0
 8005812:	2100      	movs	r1, #0
 8005814:	6878      	ldr	r0, [r7, #4]
 8005816:	f000 f837 	bl	8005888 <xQueueGenericSend>
		}
		else
		{
			traceCREATE_MUTEX_FAILED();
		}
	}
 800581a:	bf00      	nop
 800581c:	3708      	adds	r7, #8
 800581e:	46bd      	mov	sp, r7
 8005820:	bd80      	pop	{r7, pc}

08005822 <xQueueCreateMutex>:
/*-----------------------------------------------------------*/

#if( ( configUSE_MUTEXES == 1 ) && ( configSUPPORT_DYNAMIC_ALLOCATION == 1 ) )

	QueueHandle_t xQueueCreateMutex( const uint8_t ucQueueType )
	{
 8005822:	b580      	push	{r7, lr}
 8005824:	b086      	sub	sp, #24
 8005826:	af00      	add	r7, sp, #0
 8005828:	4603      	mov	r3, r0
 800582a:	71fb      	strb	r3, [r7, #7]
	QueueHandle_t xNewQueue;
	const UBaseType_t uxMutexLength = ( UBaseType_t ) 1, uxMutexSize = ( UBaseType_t ) 0;
 800582c:	2301      	movs	r3, #1
 800582e:	617b      	str	r3, [r7, #20]
 8005830:	2300      	movs	r3, #0
 8005832:	613b      	str	r3, [r7, #16]

		xNewQueue = xQueueGenericCreate( uxMutexLength, uxMutexSize, ucQueueType );
 8005834:	79fb      	ldrb	r3, [r7, #7]
 8005836:	461a      	mov	r2, r3
 8005838:	6939      	ldr	r1, [r7, #16]
 800583a:	6978      	ldr	r0, [r7, #20]
 800583c:	f7ff ff7d 	bl	800573a <xQueueGenericCreate>
 8005840:	60f8      	str	r0, [r7, #12]
		prvInitialiseMutex( ( Queue_t * ) xNewQueue );
 8005842:	68f8      	ldr	r0, [r7, #12]
 8005844:	f7ff ffd3 	bl	80057ee <prvInitialiseMutex>

		return xNewQueue;
 8005848:	68fb      	ldr	r3, [r7, #12]
	}
 800584a:	4618      	mov	r0, r3
 800584c:	3718      	adds	r7, #24
 800584e:	46bd      	mov	sp, r7
 8005850:	bd80      	pop	{r7, pc}

08005852 <xQueueCreateMutexStatic>:
/*-----------------------------------------------------------*/

#if( ( configUSE_MUTEXES == 1 ) && ( configSUPPORT_STATIC_ALLOCATION == 1 ) )

	QueueHandle_t xQueueCreateMutexStatic( const uint8_t ucQueueType, StaticQueue_t *pxStaticQueue )
	{
 8005852:	b580      	push	{r7, lr}
 8005854:	b088      	sub	sp, #32
 8005856:	af02      	add	r7, sp, #8
 8005858:	4603      	mov	r3, r0
 800585a:	6039      	str	r1, [r7, #0]
 800585c:	71fb      	strb	r3, [r7, #7]
	QueueHandle_t xNewQueue;
	const UBaseType_t uxMutexLength = ( UBaseType_t ) 1, uxMutexSize = ( UBaseType_t ) 0;
 800585e:	2301      	movs	r3, #1
 8005860:	617b      	str	r3, [r7, #20]
 8005862:	2300      	movs	r3, #0
 8005864:	613b      	str	r3, [r7, #16]

		/* Prevent compiler warnings about unused parameters if
		configUSE_TRACE_FACILITY does not equal 1. */
		( void ) ucQueueType;

		xNewQueue = xQueueGenericCreateStatic( uxMutexLength, uxMutexSize, NULL, pxStaticQueue, ucQueueType );
 8005866:	79fb      	ldrb	r3, [r7, #7]
 8005868:	9300      	str	r3, [sp, #0]
 800586a:	683b      	ldr	r3, [r7, #0]
 800586c:	2200      	movs	r2, #0
 800586e:	6939      	ldr	r1, [r7, #16]
 8005870:	6978      	ldr	r0, [r7, #20]
 8005872:	f7ff fee5 	bl	8005640 <xQueueGenericCreateStatic>
 8005876:	60f8      	str	r0, [r7, #12]
		prvInitialiseMutex( ( Queue_t * ) xNewQueue );
 8005878:	68f8      	ldr	r0, [r7, #12]
 800587a:	f7ff ffb8 	bl	80057ee <prvInitialiseMutex>

		return xNewQueue;
 800587e:	68fb      	ldr	r3, [r7, #12]
	}
 8005880:	4618      	mov	r0, r3
 8005882:	3718      	adds	r7, #24
 8005884:	46bd      	mov	sp, r7
 8005886:	bd80      	pop	{r7, pc}

08005888 <xQueueGenericSend>:

#endif /* ( ( configUSE_COUNTING_SEMAPHORES == 1 ) && ( configSUPPORT_DYNAMIC_ALLOCATION == 1 ) ) */
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericSend( QueueHandle_t xQueue, const void * const pvItemToQueue, TickType_t xTicksToWait, const BaseType_t xCopyPosition )
{
 8005888:	b580      	push	{r7, lr}
 800588a:	b08e      	sub	sp, #56	@ 0x38
 800588c:	af00      	add	r7, sp, #0
 800588e:	60f8      	str	r0, [r7, #12]
 8005890:	60b9      	str	r1, [r7, #8]
 8005892:	607a      	str	r2, [r7, #4]
 8005894:	603b      	str	r3, [r7, #0]
BaseType_t xEntryTimeSet = pdFALSE, xYieldRequired;
 8005896:	2300      	movs	r3, #0
 8005898:	637b      	str	r3, [r7, #52]	@ 0x34
TimeOut_t xTimeOut;
Queue_t * const pxQueue = xQueue;
 800589a:	68fb      	ldr	r3, [r7, #12]
 800589c:	633b      	str	r3, [r7, #48]	@ 0x30

	configASSERT( pxQueue );
 800589e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80058a0:	2b00      	cmp	r3, #0
 80058a2:	d10b      	bne.n	80058bc <xQueueGenericSend+0x34>
	__asm volatile
 80058a4:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80058a8:	f383 8811 	msr	BASEPRI, r3
 80058ac:	f3bf 8f6f 	isb	sy
 80058b0:	f3bf 8f4f 	dsb	sy
 80058b4:	62bb      	str	r3, [r7, #40]	@ 0x28
}
 80058b6:	bf00      	nop
 80058b8:	bf00      	nop
 80058ba:	e7fd      	b.n	80058b8 <xQueueGenericSend+0x30>
	configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 80058bc:	68bb      	ldr	r3, [r7, #8]
 80058be:	2b00      	cmp	r3, #0
 80058c0:	d103      	bne.n	80058ca <xQueueGenericSend+0x42>
 80058c2:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80058c4:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80058c6:	2b00      	cmp	r3, #0
 80058c8:	d101      	bne.n	80058ce <xQueueGenericSend+0x46>
 80058ca:	2301      	movs	r3, #1
 80058cc:	e000      	b.n	80058d0 <xQueueGenericSend+0x48>
 80058ce:	2300      	movs	r3, #0
 80058d0:	2b00      	cmp	r3, #0
 80058d2:	d10b      	bne.n	80058ec <xQueueGenericSend+0x64>
	__asm volatile
 80058d4:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80058d8:	f383 8811 	msr	BASEPRI, r3
 80058dc:	f3bf 8f6f 	isb	sy
 80058e0:	f3bf 8f4f 	dsb	sy
 80058e4:	627b      	str	r3, [r7, #36]	@ 0x24
}
 80058e6:	bf00      	nop
 80058e8:	bf00      	nop
 80058ea:	e7fd      	b.n	80058e8 <xQueueGenericSend+0x60>
	configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
 80058ec:	683b      	ldr	r3, [r7, #0]
 80058ee:	2b02      	cmp	r3, #2
 80058f0:	d103      	bne.n	80058fa <xQueueGenericSend+0x72>
 80058f2:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80058f4:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80058f6:	2b01      	cmp	r3, #1
 80058f8:	d101      	bne.n	80058fe <xQueueGenericSend+0x76>
 80058fa:	2301      	movs	r3, #1
 80058fc:	e000      	b.n	8005900 <xQueueGenericSend+0x78>
 80058fe:	2300      	movs	r3, #0
 8005900:	2b00      	cmp	r3, #0
 8005902:	d10b      	bne.n	800591c <xQueueGenericSend+0x94>
	__asm volatile
 8005904:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8005908:	f383 8811 	msr	BASEPRI, r3
 800590c:	f3bf 8f6f 	isb	sy
 8005910:	f3bf 8f4f 	dsb	sy
 8005914:	623b      	str	r3, [r7, #32]
}
 8005916:	bf00      	nop
 8005918:	bf00      	nop
 800591a:	e7fd      	b.n	8005918 <xQueueGenericSend+0x90>
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 800591c:	f001 f8ce 	bl	8006abc <xTaskGetSchedulerState>
 8005920:	4603      	mov	r3, r0
 8005922:	2b00      	cmp	r3, #0
 8005924:	d102      	bne.n	800592c <xQueueGenericSend+0xa4>
 8005926:	687b      	ldr	r3, [r7, #4]
 8005928:	2b00      	cmp	r3, #0
 800592a:	d101      	bne.n	8005930 <xQueueGenericSend+0xa8>
 800592c:	2301      	movs	r3, #1
 800592e:	e000      	b.n	8005932 <xQueueGenericSend+0xaa>
 8005930:	2300      	movs	r3, #0
 8005932:	2b00      	cmp	r3, #0
 8005934:	d10b      	bne.n	800594e <xQueueGenericSend+0xc6>
	__asm volatile
 8005936:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800593a:	f383 8811 	msr	BASEPRI, r3
 800593e:	f3bf 8f6f 	isb	sy
 8005942:	f3bf 8f4f 	dsb	sy
 8005946:	61fb      	str	r3, [r7, #28]
}
 8005948:	bf00      	nop
 800594a:	bf00      	nop
 800594c:	e7fd      	b.n	800594a <xQueueGenericSend+0xc2>
	/*lint -save -e904 This function relaxes the coding standard somewhat to
	allow return statements within the function itself.  This is done in the
	interest of execution time efficiency. */
	for( ;; )
	{
		taskENTER_CRITICAL();
 800594e:	f001 fc0b 	bl	8007168 <vPortEnterCritical>
		{
			/* Is there room on the queue now?  The running task must be the
			highest priority task wanting to access the queue.  If the head item
			in the queue is to be overwritten then it does not matter if the
			queue is full. */
			if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
 8005952:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8005954:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 8005956:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8005958:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800595a:	429a      	cmp	r2, r3
 800595c:	d302      	bcc.n	8005964 <xQueueGenericSend+0xdc>
 800595e:	683b      	ldr	r3, [r7, #0]
 8005960:	2b02      	cmp	r3, #2
 8005962:	d129      	bne.n	80059b8 <xQueueGenericSend+0x130>
						}
					}
				}
				#else /* configUSE_QUEUE_SETS */
				{
					xYieldRequired = prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
 8005964:	683a      	ldr	r2, [r7, #0]
 8005966:	68b9      	ldr	r1, [r7, #8]
 8005968:	6b38      	ldr	r0, [r7, #48]	@ 0x30
 800596a:	f000 f9b7 	bl	8005cdc <prvCopyDataToQueue>
 800596e:	62f8      	str	r0, [r7, #44]	@ 0x2c

					/* If there was a task waiting for data to arrive on the
					queue then unblock it now. */
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 8005970:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8005972:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8005974:	2b00      	cmp	r3, #0
 8005976:	d010      	beq.n	800599a <xQueueGenericSend+0x112>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 8005978:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800597a:	3324      	adds	r3, #36	@ 0x24
 800597c:	4618      	mov	r0, r3
 800597e:	f000 fed7 	bl	8006730 <xTaskRemoveFromEventList>
 8005982:	4603      	mov	r3, r0
 8005984:	2b00      	cmp	r3, #0
 8005986:	d013      	beq.n	80059b0 <xQueueGenericSend+0x128>
						{
							/* The unblocked task has a priority higher than
							our own so yield immediately.  Yes it is ok to do
							this from within the critical section - the kernel
							takes care of that. */
							queueYIELD_IF_USING_PREEMPTION();
 8005988:	4b3f      	ldr	r3, [pc, #252]	@ (8005a88 <xQueueGenericSend+0x200>)
 800598a:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 800598e:	601a      	str	r2, [r3, #0]
 8005990:	f3bf 8f4f 	dsb	sy
 8005994:	f3bf 8f6f 	isb	sy
 8005998:	e00a      	b.n	80059b0 <xQueueGenericSend+0x128>
						else
						{
							mtCOVERAGE_TEST_MARKER();
						}
					}
					else if( xYieldRequired != pdFALSE )
 800599a:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800599c:	2b00      	cmp	r3, #0
 800599e:	d007      	beq.n	80059b0 <xQueueGenericSend+0x128>
					{
						/* This path is a special case that will only get
						executed if the task was holding multiple mutexes and
						the mutexes were given back in an order that is
						different to that in which they were taken. */
						queueYIELD_IF_USING_PREEMPTION();
 80059a0:	4b39      	ldr	r3, [pc, #228]	@ (8005a88 <xQueueGenericSend+0x200>)
 80059a2:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 80059a6:	601a      	str	r2, [r3, #0]
 80059a8:	f3bf 8f4f 	dsb	sy
 80059ac:	f3bf 8f6f 	isb	sy
						mtCOVERAGE_TEST_MARKER();
					}
				}
				#endif /* configUSE_QUEUE_SETS */

				taskEXIT_CRITICAL();
 80059b0:	f001 fc0c 	bl	80071cc <vPortExitCritical>
				return pdPASS;
 80059b4:	2301      	movs	r3, #1
 80059b6:	e063      	b.n	8005a80 <xQueueGenericSend+0x1f8>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 80059b8:	687b      	ldr	r3, [r7, #4]
 80059ba:	2b00      	cmp	r3, #0
 80059bc:	d103      	bne.n	80059c6 <xQueueGenericSend+0x13e>
				{
					/* The queue was full and no block time is specified (or
					the block time has expired) so leave now. */
					taskEXIT_CRITICAL();
 80059be:	f001 fc05 	bl	80071cc <vPortExitCritical>

					/* Return to the original privilege level before exiting
					the function. */
					traceQUEUE_SEND_FAILED( pxQueue );
					return errQUEUE_FULL;
 80059c2:	2300      	movs	r3, #0
 80059c4:	e05c      	b.n	8005a80 <xQueueGenericSend+0x1f8>
				}
				else if( xEntryTimeSet == pdFALSE )
 80059c6:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80059c8:	2b00      	cmp	r3, #0
 80059ca:	d106      	bne.n	80059da <xQueueGenericSend+0x152>
				{
					/* The queue was full and a block time was specified so
					configure the timeout structure. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 80059cc:	f107 0314 	add.w	r3, r7, #20
 80059d0:	4618      	mov	r0, r3
 80059d2:	f000 ff11 	bl	80067f8 <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 80059d6:	2301      	movs	r3, #1
 80059d8:	637b      	str	r3, [r7, #52]	@ 0x34
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 80059da:	f001 fbf7 	bl	80071cc <vPortExitCritical>

		/* Interrupts and other tasks can send to and receive from the queue
		now the critical section has been exited. */

		vTaskSuspendAll();
 80059de:	f000 fcb7 	bl	8006350 <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 80059e2:	f001 fbc1 	bl	8007168 <vPortEnterCritical>
 80059e6:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80059e8:	f893 3044 	ldrb.w	r3, [r3, #68]	@ 0x44
 80059ec:	b25b      	sxtb	r3, r3
 80059ee:	f1b3 3fff 	cmp.w	r3, #4294967295
 80059f2:	d103      	bne.n	80059fc <xQueueGenericSend+0x174>
 80059f4:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80059f6:	2200      	movs	r2, #0
 80059f8:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 80059fc:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80059fe:	f893 3045 	ldrb.w	r3, [r3, #69]	@ 0x45
 8005a02:	b25b      	sxtb	r3, r3
 8005a04:	f1b3 3fff 	cmp.w	r3, #4294967295
 8005a08:	d103      	bne.n	8005a12 <xQueueGenericSend+0x18a>
 8005a0a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8005a0c:	2200      	movs	r2, #0
 8005a0e:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
 8005a12:	f001 fbdb 	bl	80071cc <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 8005a16:	1d3a      	adds	r2, r7, #4
 8005a18:	f107 0314 	add.w	r3, r7, #20
 8005a1c:	4611      	mov	r1, r2
 8005a1e:	4618      	mov	r0, r3
 8005a20:	f000 ff00 	bl	8006824 <xTaskCheckForTimeOut>
 8005a24:	4603      	mov	r3, r0
 8005a26:	2b00      	cmp	r3, #0
 8005a28:	d124      	bne.n	8005a74 <xQueueGenericSend+0x1ec>
		{
			if( prvIsQueueFull( pxQueue ) != pdFALSE )
 8005a2a:	6b38      	ldr	r0, [r7, #48]	@ 0x30
 8005a2c:	f000 fa28 	bl	8005e80 <prvIsQueueFull>
 8005a30:	4603      	mov	r3, r0
 8005a32:	2b00      	cmp	r3, #0
 8005a34:	d018      	beq.n	8005a68 <xQueueGenericSend+0x1e0>
			{
				traceBLOCKING_ON_QUEUE_SEND( pxQueue );
				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToSend ), xTicksToWait );
 8005a36:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8005a38:	3310      	adds	r3, #16
 8005a3a:	687a      	ldr	r2, [r7, #4]
 8005a3c:	4611      	mov	r1, r2
 8005a3e:	4618      	mov	r0, r3
 8005a40:	f000 fe50 	bl	80066e4 <vTaskPlaceOnEventList>
				/* Unlocking the queue means queue events can effect the
				event list.  It is possible that interrupts occurring now
				remove this task from the event list again - but as the
				scheduler is suspended the task will go onto the pending
				ready last instead of the actual ready list. */
				prvUnlockQueue( pxQueue );
 8005a44:	6b38      	ldr	r0, [r7, #48]	@ 0x30
 8005a46:	f000 f9b3 	bl	8005db0 <prvUnlockQueue>
				/* Resuming the scheduler will move tasks from the pending
				ready list into the ready list - so it is feasible that this
				task is already in a ready list before it yields - in which
				case the yield will not cause a context switch unless there
				is also a higher priority task in the pending ready list. */
				if( xTaskResumeAll() == pdFALSE )
 8005a4a:	f000 fc8f 	bl	800636c <xTaskResumeAll>
 8005a4e:	4603      	mov	r3, r0
 8005a50:	2b00      	cmp	r3, #0
 8005a52:	f47f af7c 	bne.w	800594e <xQueueGenericSend+0xc6>
				{
					portYIELD_WITHIN_API();
 8005a56:	4b0c      	ldr	r3, [pc, #48]	@ (8005a88 <xQueueGenericSend+0x200>)
 8005a58:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8005a5c:	601a      	str	r2, [r3, #0]
 8005a5e:	f3bf 8f4f 	dsb	sy
 8005a62:	f3bf 8f6f 	isb	sy
 8005a66:	e772      	b.n	800594e <xQueueGenericSend+0xc6>
				}
			}
			else
			{
				/* Try again. */
				prvUnlockQueue( pxQueue );
 8005a68:	6b38      	ldr	r0, [r7, #48]	@ 0x30
 8005a6a:	f000 f9a1 	bl	8005db0 <prvUnlockQueue>
				( void ) xTaskResumeAll();
 8005a6e:	f000 fc7d 	bl	800636c <xTaskResumeAll>
 8005a72:	e76c      	b.n	800594e <xQueueGenericSend+0xc6>
			}
		}
		else
		{
			/* The timeout has expired. */
			prvUnlockQueue( pxQueue );
 8005a74:	6b38      	ldr	r0, [r7, #48]	@ 0x30
 8005a76:	f000 f99b 	bl	8005db0 <prvUnlockQueue>
			( void ) xTaskResumeAll();
 8005a7a:	f000 fc77 	bl	800636c <xTaskResumeAll>

			traceQUEUE_SEND_FAILED( pxQueue );
			return errQUEUE_FULL;
 8005a7e:	2300      	movs	r3, #0
		}
	} /*lint -restore */
}
 8005a80:	4618      	mov	r0, r3
 8005a82:	3738      	adds	r7, #56	@ 0x38
 8005a84:	46bd      	mov	sp, r7
 8005a86:	bd80      	pop	{r7, pc}
 8005a88:	e000ed04 	.word	0xe000ed04

08005a8c <xQueueSemaphoreTake>:
	} /*lint -restore */
}
/*-----------------------------------------------------------*/

BaseType_t xQueueSemaphoreTake( QueueHandle_t xQueue, TickType_t xTicksToWait )
{
 8005a8c:	b580      	push	{r7, lr}
 8005a8e:	b08e      	sub	sp, #56	@ 0x38
 8005a90:	af00      	add	r7, sp, #0
 8005a92:	6078      	str	r0, [r7, #4]
 8005a94:	6039      	str	r1, [r7, #0]
BaseType_t xEntryTimeSet = pdFALSE;
 8005a96:	2300      	movs	r3, #0
 8005a98:	637b      	str	r3, [r7, #52]	@ 0x34
TimeOut_t xTimeOut;
Queue_t * const pxQueue = xQueue;
 8005a9a:	687b      	ldr	r3, [r7, #4]
 8005a9c:	62fb      	str	r3, [r7, #44]	@ 0x2c

#if( configUSE_MUTEXES == 1 )
	BaseType_t xInheritanceOccurred = pdFALSE;
 8005a9e:	2300      	movs	r3, #0
 8005aa0:	633b      	str	r3, [r7, #48]	@ 0x30
#endif

	/* Check the queue pointer is not NULL. */
	configASSERT( ( pxQueue ) );
 8005aa2:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8005aa4:	2b00      	cmp	r3, #0
 8005aa6:	d10b      	bne.n	8005ac0 <xQueueSemaphoreTake+0x34>
	__asm volatile
 8005aa8:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8005aac:	f383 8811 	msr	BASEPRI, r3
 8005ab0:	f3bf 8f6f 	isb	sy
 8005ab4:	f3bf 8f4f 	dsb	sy
 8005ab8:	623b      	str	r3, [r7, #32]
}
 8005aba:	bf00      	nop
 8005abc:	bf00      	nop
 8005abe:	e7fd      	b.n	8005abc <xQueueSemaphoreTake+0x30>

	/* Check this really is a semaphore, in which case the item size will be
	0. */
	configASSERT( pxQueue->uxItemSize == 0 );
 8005ac0:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8005ac2:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8005ac4:	2b00      	cmp	r3, #0
 8005ac6:	d00b      	beq.n	8005ae0 <xQueueSemaphoreTake+0x54>
	__asm volatile
 8005ac8:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8005acc:	f383 8811 	msr	BASEPRI, r3
 8005ad0:	f3bf 8f6f 	isb	sy
 8005ad4:	f3bf 8f4f 	dsb	sy
 8005ad8:	61fb      	str	r3, [r7, #28]
}
 8005ada:	bf00      	nop
 8005adc:	bf00      	nop
 8005ade:	e7fd      	b.n	8005adc <xQueueSemaphoreTake+0x50>

	/* Cannot block if the scheduler is suspended. */
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 8005ae0:	f000 ffec 	bl	8006abc <xTaskGetSchedulerState>
 8005ae4:	4603      	mov	r3, r0
 8005ae6:	2b00      	cmp	r3, #0
 8005ae8:	d102      	bne.n	8005af0 <xQueueSemaphoreTake+0x64>
 8005aea:	683b      	ldr	r3, [r7, #0]
 8005aec:	2b00      	cmp	r3, #0
 8005aee:	d101      	bne.n	8005af4 <xQueueSemaphoreTake+0x68>
 8005af0:	2301      	movs	r3, #1
 8005af2:	e000      	b.n	8005af6 <xQueueSemaphoreTake+0x6a>
 8005af4:	2300      	movs	r3, #0
 8005af6:	2b00      	cmp	r3, #0
 8005af8:	d10b      	bne.n	8005b12 <xQueueSemaphoreTake+0x86>
	__asm volatile
 8005afa:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8005afe:	f383 8811 	msr	BASEPRI, r3
 8005b02:	f3bf 8f6f 	isb	sy
 8005b06:	f3bf 8f4f 	dsb	sy
 8005b0a:	61bb      	str	r3, [r7, #24]
}
 8005b0c:	bf00      	nop
 8005b0e:	bf00      	nop
 8005b10:	e7fd      	b.n	8005b0e <xQueueSemaphoreTake+0x82>
	/*lint -save -e904 This function relaxes the coding standard somewhat to allow return
	statements within the function itself.  This is done in the interest
	of execution time efficiency. */
	for( ;; )
	{
		taskENTER_CRITICAL();
 8005b12:	f001 fb29 	bl	8007168 <vPortEnterCritical>
		{
			/* Semaphores are queues with an item size of 0, and where the
			number of messages in the queue is the semaphore's count value. */
			const UBaseType_t uxSemaphoreCount = pxQueue->uxMessagesWaiting;
 8005b16:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8005b18:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8005b1a:	62bb      	str	r3, [r7, #40]	@ 0x28

			/* Is there data in the queue now?  To be running the calling task
			must be the highest priority task wanting to access the queue. */
			if( uxSemaphoreCount > ( UBaseType_t ) 0 )
 8005b1c:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8005b1e:	2b00      	cmp	r3, #0
 8005b20:	d024      	beq.n	8005b6c <xQueueSemaphoreTake+0xe0>
			{
				traceQUEUE_RECEIVE( pxQueue );

				/* Semaphores are queues with a data size of zero and where the
				messages waiting is the semaphore's count.  Reduce the count. */
				pxQueue->uxMessagesWaiting = uxSemaphoreCount - ( UBaseType_t ) 1;
 8005b22:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8005b24:	1e5a      	subs	r2, r3, #1
 8005b26:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8005b28:	639a      	str	r2, [r3, #56]	@ 0x38

				#if ( configUSE_MUTEXES == 1 )
				{
					if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
 8005b2a:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8005b2c:	681b      	ldr	r3, [r3, #0]
 8005b2e:	2b00      	cmp	r3, #0
 8005b30:	d104      	bne.n	8005b3c <xQueueSemaphoreTake+0xb0>
					{
						/* Record the information required to implement
						priority inheritance should it become necessary. */
						pxQueue->u.xSemaphore.xMutexHolder = pvTaskIncrementMutexHeldCount();
 8005b32:	f001 f96f 	bl	8006e14 <pvTaskIncrementMutexHeldCount>
 8005b36:	4602      	mov	r2, r0
 8005b38:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8005b3a:	609a      	str	r2, [r3, #8]
				}
				#endif /* configUSE_MUTEXES */

				/* Check to see if other tasks are blocked waiting to give the
				semaphore, and if so, unblock the highest priority such task. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 8005b3c:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8005b3e:	691b      	ldr	r3, [r3, #16]
 8005b40:	2b00      	cmp	r3, #0
 8005b42:	d00f      	beq.n	8005b64 <xQueueSemaphoreTake+0xd8>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 8005b44:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8005b46:	3310      	adds	r3, #16
 8005b48:	4618      	mov	r0, r3
 8005b4a:	f000 fdf1 	bl	8006730 <xTaskRemoveFromEventList>
 8005b4e:	4603      	mov	r3, r0
 8005b50:	2b00      	cmp	r3, #0
 8005b52:	d007      	beq.n	8005b64 <xQueueSemaphoreTake+0xd8>
					{
						queueYIELD_IF_USING_PREEMPTION();
 8005b54:	4b54      	ldr	r3, [pc, #336]	@ (8005ca8 <xQueueSemaphoreTake+0x21c>)
 8005b56:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8005b5a:	601a      	str	r2, [r3, #0]
 8005b5c:	f3bf 8f4f 	dsb	sy
 8005b60:	f3bf 8f6f 	isb	sy
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				taskEXIT_CRITICAL();
 8005b64:	f001 fb32 	bl	80071cc <vPortExitCritical>
				return pdPASS;
 8005b68:	2301      	movs	r3, #1
 8005b6a:	e098      	b.n	8005c9e <xQueueSemaphoreTake+0x212>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 8005b6c:	683b      	ldr	r3, [r7, #0]
 8005b6e:	2b00      	cmp	r3, #0
 8005b70:	d112      	bne.n	8005b98 <xQueueSemaphoreTake+0x10c>
					/* For inheritance to have occurred there must have been an
					initial timeout, and an adjusted timeout cannot become 0, as
					if it were 0 the function would have exited. */
					#if( configUSE_MUTEXES == 1 )
					{
						configASSERT( xInheritanceOccurred == pdFALSE );
 8005b72:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8005b74:	2b00      	cmp	r3, #0
 8005b76:	d00b      	beq.n	8005b90 <xQueueSemaphoreTake+0x104>
	__asm volatile
 8005b78:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8005b7c:	f383 8811 	msr	BASEPRI, r3
 8005b80:	f3bf 8f6f 	isb	sy
 8005b84:	f3bf 8f4f 	dsb	sy
 8005b88:	617b      	str	r3, [r7, #20]
}
 8005b8a:	bf00      	nop
 8005b8c:	bf00      	nop
 8005b8e:	e7fd      	b.n	8005b8c <xQueueSemaphoreTake+0x100>
					}
					#endif /* configUSE_MUTEXES */

					/* The semaphore count was 0 and no block time is specified
					(or the block time has expired) so exit now. */
					taskEXIT_CRITICAL();
 8005b90:	f001 fb1c 	bl	80071cc <vPortExitCritical>
					traceQUEUE_RECEIVE_FAILED( pxQueue );
					return errQUEUE_EMPTY;
 8005b94:	2300      	movs	r3, #0
 8005b96:	e082      	b.n	8005c9e <xQueueSemaphoreTake+0x212>
				}
				else if( xEntryTimeSet == pdFALSE )
 8005b98:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8005b9a:	2b00      	cmp	r3, #0
 8005b9c:	d106      	bne.n	8005bac <xQueueSemaphoreTake+0x120>
				{
					/* The semaphore count was 0 and a block time was specified
					so configure the timeout structure ready to block. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 8005b9e:	f107 030c 	add.w	r3, r7, #12
 8005ba2:	4618      	mov	r0, r3
 8005ba4:	f000 fe28 	bl	80067f8 <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 8005ba8:	2301      	movs	r3, #1
 8005baa:	637b      	str	r3, [r7, #52]	@ 0x34
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 8005bac:	f001 fb0e 	bl	80071cc <vPortExitCritical>

		/* Interrupts and other tasks can give to and take from the semaphore
		now the critical section has been exited. */

		vTaskSuspendAll();
 8005bb0:	f000 fbce 	bl	8006350 <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 8005bb4:	f001 fad8 	bl	8007168 <vPortEnterCritical>
 8005bb8:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8005bba:	f893 3044 	ldrb.w	r3, [r3, #68]	@ 0x44
 8005bbe:	b25b      	sxtb	r3, r3
 8005bc0:	f1b3 3fff 	cmp.w	r3, #4294967295
 8005bc4:	d103      	bne.n	8005bce <xQueueSemaphoreTake+0x142>
 8005bc6:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8005bc8:	2200      	movs	r2, #0
 8005bca:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 8005bce:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8005bd0:	f893 3045 	ldrb.w	r3, [r3, #69]	@ 0x45
 8005bd4:	b25b      	sxtb	r3, r3
 8005bd6:	f1b3 3fff 	cmp.w	r3, #4294967295
 8005bda:	d103      	bne.n	8005be4 <xQueueSemaphoreTake+0x158>
 8005bdc:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8005bde:	2200      	movs	r2, #0
 8005be0:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
 8005be4:	f001 faf2 	bl	80071cc <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 8005be8:	463a      	mov	r2, r7
 8005bea:	f107 030c 	add.w	r3, r7, #12
 8005bee:	4611      	mov	r1, r2
 8005bf0:	4618      	mov	r0, r3
 8005bf2:	f000 fe17 	bl	8006824 <xTaskCheckForTimeOut>
 8005bf6:	4603      	mov	r3, r0
 8005bf8:	2b00      	cmp	r3, #0
 8005bfa:	d132      	bne.n	8005c62 <xQueueSemaphoreTake+0x1d6>
		{
			/* A block time is specified and not expired.  If the semaphore
			count is 0 then enter the Blocked state to wait for a semaphore to
			become available.  As semaphores are implemented with queues the
			queue being empty is equivalent to the semaphore count being 0. */
			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 8005bfc:	6af8      	ldr	r0, [r7, #44]	@ 0x2c
 8005bfe:	f000 f929 	bl	8005e54 <prvIsQueueEmpty>
 8005c02:	4603      	mov	r3, r0
 8005c04:	2b00      	cmp	r3, #0
 8005c06:	d026      	beq.n	8005c56 <xQueueSemaphoreTake+0x1ca>
			{
				traceBLOCKING_ON_QUEUE_RECEIVE( pxQueue );

				#if ( configUSE_MUTEXES == 1 )
				{
					if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
 8005c08:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8005c0a:	681b      	ldr	r3, [r3, #0]
 8005c0c:	2b00      	cmp	r3, #0
 8005c0e:	d109      	bne.n	8005c24 <xQueueSemaphoreTake+0x198>
					{
						taskENTER_CRITICAL();
 8005c10:	f001 faaa 	bl	8007168 <vPortEnterCritical>
						{
							xInheritanceOccurred = xTaskPriorityInherit( pxQueue->u.xSemaphore.xMutexHolder );
 8005c14:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8005c16:	689b      	ldr	r3, [r3, #8]
 8005c18:	4618      	mov	r0, r3
 8005c1a:	f000 ff6d 	bl	8006af8 <xTaskPriorityInherit>
 8005c1e:	6338      	str	r0, [r7, #48]	@ 0x30
						}
						taskEXIT_CRITICAL();
 8005c20:	f001 fad4 	bl	80071cc <vPortExitCritical>
						mtCOVERAGE_TEST_MARKER();
					}
				}
				#endif

				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait );
 8005c24:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8005c26:	3324      	adds	r3, #36	@ 0x24
 8005c28:	683a      	ldr	r2, [r7, #0]
 8005c2a:	4611      	mov	r1, r2
 8005c2c:	4618      	mov	r0, r3
 8005c2e:	f000 fd59 	bl	80066e4 <vTaskPlaceOnEventList>
				prvUnlockQueue( pxQueue );
 8005c32:	6af8      	ldr	r0, [r7, #44]	@ 0x2c
 8005c34:	f000 f8bc 	bl	8005db0 <prvUnlockQueue>
				if( xTaskResumeAll() == pdFALSE )
 8005c38:	f000 fb98 	bl	800636c <xTaskResumeAll>
 8005c3c:	4603      	mov	r3, r0
 8005c3e:	2b00      	cmp	r3, #0
 8005c40:	f47f af67 	bne.w	8005b12 <xQueueSemaphoreTake+0x86>
				{
					portYIELD_WITHIN_API();
 8005c44:	4b18      	ldr	r3, [pc, #96]	@ (8005ca8 <xQueueSemaphoreTake+0x21c>)
 8005c46:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8005c4a:	601a      	str	r2, [r3, #0]
 8005c4c:	f3bf 8f4f 	dsb	sy
 8005c50:	f3bf 8f6f 	isb	sy
 8005c54:	e75d      	b.n	8005b12 <xQueueSemaphoreTake+0x86>
			}
			else
			{
				/* There was no timeout and the semaphore count was not 0, so
				attempt to take the semaphore again. */
				prvUnlockQueue( pxQueue );
 8005c56:	6af8      	ldr	r0, [r7, #44]	@ 0x2c
 8005c58:	f000 f8aa 	bl	8005db0 <prvUnlockQueue>
				( void ) xTaskResumeAll();
 8005c5c:	f000 fb86 	bl	800636c <xTaskResumeAll>
 8005c60:	e757      	b.n	8005b12 <xQueueSemaphoreTake+0x86>
			}
		}
		else
		{
			/* Timed out. */
			prvUnlockQueue( pxQueue );
 8005c62:	6af8      	ldr	r0, [r7, #44]	@ 0x2c
 8005c64:	f000 f8a4 	bl	8005db0 <prvUnlockQueue>
			( void ) xTaskResumeAll();
 8005c68:	f000 fb80 	bl	800636c <xTaskResumeAll>

			/* If the semaphore count is 0 exit now as the timeout has
			expired.  Otherwise return to attempt to take the semaphore that is
			known to be available.  As semaphores are implemented by queues the
			queue being empty is equivalent to the semaphore count being 0. */
			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 8005c6c:	6af8      	ldr	r0, [r7, #44]	@ 0x2c
 8005c6e:	f000 f8f1 	bl	8005e54 <prvIsQueueEmpty>
 8005c72:	4603      	mov	r3, r0
 8005c74:	2b00      	cmp	r3, #0
 8005c76:	f43f af4c 	beq.w	8005b12 <xQueueSemaphoreTake+0x86>
				#if ( configUSE_MUTEXES == 1 )
				{
					/* xInheritanceOccurred could only have be set if
					pxQueue->uxQueueType == queueQUEUE_IS_MUTEX so no need to
					test the mutex type again to check it is actually a mutex. */
					if( xInheritanceOccurred != pdFALSE )
 8005c7a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8005c7c:	2b00      	cmp	r3, #0
 8005c7e:	d00d      	beq.n	8005c9c <xQueueSemaphoreTake+0x210>
					{
						taskENTER_CRITICAL();
 8005c80:	f001 fa72 	bl	8007168 <vPortEnterCritical>
							/* This task blocking on the mutex caused another
							task to inherit this task's priority.  Now this task
							has timed out the priority should be disinherited
							again, but only as low as the next highest priority
							task that is waiting for the same mutex. */
							uxHighestWaitingPriority = prvGetDisinheritPriorityAfterTimeout( pxQueue );
 8005c84:	6af8      	ldr	r0, [r7, #44]	@ 0x2c
 8005c86:	f000 f811 	bl	8005cac <prvGetDisinheritPriorityAfterTimeout>
 8005c8a:	6278      	str	r0, [r7, #36]	@ 0x24
							vTaskPriorityDisinheritAfterTimeout( pxQueue->u.xSemaphore.xMutexHolder, uxHighestWaitingPriority );
 8005c8c:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8005c8e:	689b      	ldr	r3, [r3, #8]
 8005c90:	6a79      	ldr	r1, [r7, #36]	@ 0x24
 8005c92:	4618      	mov	r0, r3
 8005c94:	f001 f82e 	bl	8006cf4 <vTaskPriorityDisinheritAfterTimeout>
						}
						taskEXIT_CRITICAL();
 8005c98:	f001 fa98 	bl	80071cc <vPortExitCritical>
					}
				}
				#endif /* configUSE_MUTEXES */

				traceQUEUE_RECEIVE_FAILED( pxQueue );
				return errQUEUE_EMPTY;
 8005c9c:	2300      	movs	r3, #0
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
	} /*lint -restore */
}
 8005c9e:	4618      	mov	r0, r3
 8005ca0:	3738      	adds	r7, #56	@ 0x38
 8005ca2:	46bd      	mov	sp, r7
 8005ca4:	bd80      	pop	{r7, pc}
 8005ca6:	bf00      	nop
 8005ca8:	e000ed04 	.word	0xe000ed04

08005cac <prvGetDisinheritPriorityAfterTimeout>:
/*-----------------------------------------------------------*/

#if( configUSE_MUTEXES == 1 )

	static UBaseType_t prvGetDisinheritPriorityAfterTimeout( const Queue_t * const pxQueue )
	{
 8005cac:	b480      	push	{r7}
 8005cae:	b085      	sub	sp, #20
 8005cb0:	af00      	add	r7, sp, #0
 8005cb2:	6078      	str	r0, [r7, #4]
		priority, but the waiting task times out, then the holder should
		disinherit the priority - but only down to the highest priority of any
		other tasks that are waiting for the same mutex.  For this purpose,
		return the priority of the highest priority task that is waiting for the
		mutex. */
		if( listCURRENT_LIST_LENGTH( &( pxQueue->xTasksWaitingToReceive ) ) > 0U )
 8005cb4:	687b      	ldr	r3, [r7, #4]
 8005cb6:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8005cb8:	2b00      	cmp	r3, #0
 8005cba:	d006      	beq.n	8005cca <prvGetDisinheritPriorityAfterTimeout+0x1e>
		{
			uxHighestPriorityOfWaitingTasks = ( UBaseType_t ) configMAX_PRIORITIES - ( UBaseType_t ) listGET_ITEM_VALUE_OF_HEAD_ENTRY( &( pxQueue->xTasksWaitingToReceive ) );
 8005cbc:	687b      	ldr	r3, [r7, #4]
 8005cbe:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8005cc0:	681b      	ldr	r3, [r3, #0]
 8005cc2:	f1c3 0307 	rsb	r3, r3, #7
 8005cc6:	60fb      	str	r3, [r7, #12]
 8005cc8:	e001      	b.n	8005cce <prvGetDisinheritPriorityAfterTimeout+0x22>
		}
		else
		{
			uxHighestPriorityOfWaitingTasks = tskIDLE_PRIORITY;
 8005cca:	2300      	movs	r3, #0
 8005ccc:	60fb      	str	r3, [r7, #12]
		}

		return uxHighestPriorityOfWaitingTasks;
 8005cce:	68fb      	ldr	r3, [r7, #12]
	}
 8005cd0:	4618      	mov	r0, r3
 8005cd2:	3714      	adds	r7, #20
 8005cd4:	46bd      	mov	sp, r7
 8005cd6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005cda:	4770      	bx	lr

08005cdc <prvCopyDataToQueue>:

#endif /* configUSE_MUTEXES */
/*-----------------------------------------------------------*/

static BaseType_t prvCopyDataToQueue( Queue_t * const pxQueue, const void *pvItemToQueue, const BaseType_t xPosition )
{
 8005cdc:	b580      	push	{r7, lr}
 8005cde:	b086      	sub	sp, #24
 8005ce0:	af00      	add	r7, sp, #0
 8005ce2:	60f8      	str	r0, [r7, #12]
 8005ce4:	60b9      	str	r1, [r7, #8]
 8005ce6:	607a      	str	r2, [r7, #4]
BaseType_t xReturn = pdFALSE;
 8005ce8:	2300      	movs	r3, #0
 8005cea:	617b      	str	r3, [r7, #20]
UBaseType_t uxMessagesWaiting;

	/* This function is called from a critical section. */

	uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 8005cec:	68fb      	ldr	r3, [r7, #12]
 8005cee:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8005cf0:	613b      	str	r3, [r7, #16]

	if( pxQueue->uxItemSize == ( UBaseType_t ) 0 )
 8005cf2:	68fb      	ldr	r3, [r7, #12]
 8005cf4:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8005cf6:	2b00      	cmp	r3, #0
 8005cf8:	d10d      	bne.n	8005d16 <prvCopyDataToQueue+0x3a>
	{
		#if ( configUSE_MUTEXES == 1 )
		{
			if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
 8005cfa:	68fb      	ldr	r3, [r7, #12]
 8005cfc:	681b      	ldr	r3, [r3, #0]
 8005cfe:	2b00      	cmp	r3, #0
 8005d00:	d14d      	bne.n	8005d9e <prvCopyDataToQueue+0xc2>
			{
				/* The mutex is no longer being held. */
				xReturn = xTaskPriorityDisinherit( pxQueue->u.xSemaphore.xMutexHolder );
 8005d02:	68fb      	ldr	r3, [r7, #12]
 8005d04:	689b      	ldr	r3, [r3, #8]
 8005d06:	4618      	mov	r0, r3
 8005d08:	f000 ff6c 	bl	8006be4 <xTaskPriorityDisinherit>
 8005d0c:	6178      	str	r0, [r7, #20]
				pxQueue->u.xSemaphore.xMutexHolder = NULL;
 8005d0e:	68fb      	ldr	r3, [r7, #12]
 8005d10:	2200      	movs	r2, #0
 8005d12:	609a      	str	r2, [r3, #8]
 8005d14:	e043      	b.n	8005d9e <prvCopyDataToQueue+0xc2>
				mtCOVERAGE_TEST_MARKER();
			}
		}
		#endif /* configUSE_MUTEXES */
	}
	else if( xPosition == queueSEND_TO_BACK )
 8005d16:	687b      	ldr	r3, [r7, #4]
 8005d18:	2b00      	cmp	r3, #0
 8005d1a:	d119      	bne.n	8005d50 <prvCopyDataToQueue+0x74>
	{
		( void ) memcpy( ( void * ) pxQueue->pcWriteTo, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 !e9087 MISRA exception as the casts are only redundant for some ports, plus previous logic ensures a null pointer can only be passed to memcpy() if the copy size is 0.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes. */
 8005d1c:	68fb      	ldr	r3, [r7, #12]
 8005d1e:	6858      	ldr	r0, [r3, #4]
 8005d20:	68fb      	ldr	r3, [r7, #12]
 8005d22:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8005d24:	461a      	mov	r2, r3
 8005d26:	68b9      	ldr	r1, [r7, #8]
 8005d28:	f001 fd70 	bl	800780c <memcpy>
		pxQueue->pcWriteTo += pxQueue->uxItemSize; /*lint !e9016 Pointer arithmetic on char types ok, especially in this use case where it is the clearest way of conveying intent. */
 8005d2c:	68fb      	ldr	r3, [r7, #12]
 8005d2e:	685a      	ldr	r2, [r3, #4]
 8005d30:	68fb      	ldr	r3, [r7, #12]
 8005d32:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8005d34:	441a      	add	r2, r3
 8005d36:	68fb      	ldr	r3, [r7, #12]
 8005d38:	605a      	str	r2, [r3, #4]
		if( pxQueue->pcWriteTo >= pxQueue->u.xQueue.pcTail ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 8005d3a:	68fb      	ldr	r3, [r7, #12]
 8005d3c:	685a      	ldr	r2, [r3, #4]
 8005d3e:	68fb      	ldr	r3, [r7, #12]
 8005d40:	689b      	ldr	r3, [r3, #8]
 8005d42:	429a      	cmp	r2, r3
 8005d44:	d32b      	bcc.n	8005d9e <prvCopyDataToQueue+0xc2>
		{
			pxQueue->pcWriteTo = pxQueue->pcHead;
 8005d46:	68fb      	ldr	r3, [r7, #12]
 8005d48:	681a      	ldr	r2, [r3, #0]
 8005d4a:	68fb      	ldr	r3, [r7, #12]
 8005d4c:	605a      	str	r2, [r3, #4]
 8005d4e:	e026      	b.n	8005d9e <prvCopyDataToQueue+0xc2>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	else
	{
		( void ) memcpy( ( void * ) pxQueue->u.xQueue.pcReadFrom, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e9087 !e418 MISRA exception as the casts are only redundant for some ports.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes.  Assert checks null pointer only used when length is 0. */
 8005d50:	68fb      	ldr	r3, [r7, #12]
 8005d52:	68d8      	ldr	r0, [r3, #12]
 8005d54:	68fb      	ldr	r3, [r7, #12]
 8005d56:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8005d58:	461a      	mov	r2, r3
 8005d5a:	68b9      	ldr	r1, [r7, #8]
 8005d5c:	f001 fd56 	bl	800780c <memcpy>
		pxQueue->u.xQueue.pcReadFrom -= pxQueue->uxItemSize;
 8005d60:	68fb      	ldr	r3, [r7, #12]
 8005d62:	68da      	ldr	r2, [r3, #12]
 8005d64:	68fb      	ldr	r3, [r7, #12]
 8005d66:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8005d68:	425b      	negs	r3, r3
 8005d6a:	441a      	add	r2, r3
 8005d6c:	68fb      	ldr	r3, [r7, #12]
 8005d6e:	60da      	str	r2, [r3, #12]
		if( pxQueue->u.xQueue.pcReadFrom < pxQueue->pcHead ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 8005d70:	68fb      	ldr	r3, [r7, #12]
 8005d72:	68da      	ldr	r2, [r3, #12]
 8005d74:	68fb      	ldr	r3, [r7, #12]
 8005d76:	681b      	ldr	r3, [r3, #0]
 8005d78:	429a      	cmp	r2, r3
 8005d7a:	d207      	bcs.n	8005d8c <prvCopyDataToQueue+0xb0>
		{
			pxQueue->u.xQueue.pcReadFrom = ( pxQueue->u.xQueue.pcTail - pxQueue->uxItemSize );
 8005d7c:	68fb      	ldr	r3, [r7, #12]
 8005d7e:	689a      	ldr	r2, [r3, #8]
 8005d80:	68fb      	ldr	r3, [r7, #12]
 8005d82:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8005d84:	425b      	negs	r3, r3
 8005d86:	441a      	add	r2, r3
 8005d88:	68fb      	ldr	r3, [r7, #12]
 8005d8a:	60da      	str	r2, [r3, #12]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		if( xPosition == queueOVERWRITE )
 8005d8c:	687b      	ldr	r3, [r7, #4]
 8005d8e:	2b02      	cmp	r3, #2
 8005d90:	d105      	bne.n	8005d9e <prvCopyDataToQueue+0xc2>
		{
			if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 8005d92:	693b      	ldr	r3, [r7, #16]
 8005d94:	2b00      	cmp	r3, #0
 8005d96:	d002      	beq.n	8005d9e <prvCopyDataToQueue+0xc2>
			{
				/* An item is not being added but overwritten, so subtract
				one from the recorded number of items in the queue so when
				one is added again below the number of recorded items remains
				correct. */
				--uxMessagesWaiting;
 8005d98:	693b      	ldr	r3, [r7, #16]
 8005d9a:	3b01      	subs	r3, #1
 8005d9c:	613b      	str	r3, [r7, #16]
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}

	pxQueue->uxMessagesWaiting = uxMessagesWaiting + ( UBaseType_t ) 1;
 8005d9e:	693b      	ldr	r3, [r7, #16]
 8005da0:	1c5a      	adds	r2, r3, #1
 8005da2:	68fb      	ldr	r3, [r7, #12]
 8005da4:	639a      	str	r2, [r3, #56]	@ 0x38

	return xReturn;
 8005da6:	697b      	ldr	r3, [r7, #20]
}
 8005da8:	4618      	mov	r0, r3
 8005daa:	3718      	adds	r7, #24
 8005dac:	46bd      	mov	sp, r7
 8005dae:	bd80      	pop	{r7, pc}

08005db0 <prvUnlockQueue>:
	}
}
/*-----------------------------------------------------------*/

static void prvUnlockQueue( Queue_t * const pxQueue )
{
 8005db0:	b580      	push	{r7, lr}
 8005db2:	b084      	sub	sp, #16
 8005db4:	af00      	add	r7, sp, #0
 8005db6:	6078      	str	r0, [r7, #4]

	/* The lock counts contains the number of extra data items placed or
	removed from the queue while the queue was locked.  When a queue is
	locked items can be added or removed, but the event lists cannot be
	updated. */
	taskENTER_CRITICAL();
 8005db8:	f001 f9d6 	bl	8007168 <vPortEnterCritical>
	{
		int8_t cTxLock = pxQueue->cTxLock;
 8005dbc:	687b      	ldr	r3, [r7, #4]
 8005dbe:	f893 3045 	ldrb.w	r3, [r3, #69]	@ 0x45
 8005dc2:	73fb      	strb	r3, [r7, #15]

		/* See if data was added to the queue while it was locked. */
		while( cTxLock > queueLOCKED_UNMODIFIED )
 8005dc4:	e011      	b.n	8005dea <prvUnlockQueue+0x3a>
			}
			#else /* configUSE_QUEUE_SETS */
			{
				/* Tasks that are removed from the event list will get added to
				the pending ready list as the scheduler is still suspended. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 8005dc6:	687b      	ldr	r3, [r7, #4]
 8005dc8:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8005dca:	2b00      	cmp	r3, #0
 8005dcc:	d012      	beq.n	8005df4 <prvUnlockQueue+0x44>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 8005dce:	687b      	ldr	r3, [r7, #4]
 8005dd0:	3324      	adds	r3, #36	@ 0x24
 8005dd2:	4618      	mov	r0, r3
 8005dd4:	f000 fcac 	bl	8006730 <xTaskRemoveFromEventList>
 8005dd8:	4603      	mov	r3, r0
 8005dda:	2b00      	cmp	r3, #0
 8005ddc:	d001      	beq.n	8005de2 <prvUnlockQueue+0x32>
					{
						/* The task waiting has a higher priority so record that
						a context switch is required. */
						vTaskMissedYield();
 8005dde:	f000 fd85 	bl	80068ec <vTaskMissedYield>
					break;
				}
			}
			#endif /* configUSE_QUEUE_SETS */

			--cTxLock;
 8005de2:	7bfb      	ldrb	r3, [r7, #15]
 8005de4:	3b01      	subs	r3, #1
 8005de6:	b2db      	uxtb	r3, r3
 8005de8:	73fb      	strb	r3, [r7, #15]
		while( cTxLock > queueLOCKED_UNMODIFIED )
 8005dea:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8005dee:	2b00      	cmp	r3, #0
 8005df0:	dce9      	bgt.n	8005dc6 <prvUnlockQueue+0x16>
 8005df2:	e000      	b.n	8005df6 <prvUnlockQueue+0x46>
					break;
 8005df4:	bf00      	nop
		}

		pxQueue->cTxLock = queueUNLOCKED;
 8005df6:	687b      	ldr	r3, [r7, #4]
 8005df8:	22ff      	movs	r2, #255	@ 0xff
 8005dfa:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
	}
	taskEXIT_CRITICAL();
 8005dfe:	f001 f9e5 	bl	80071cc <vPortExitCritical>

	/* Do the same for the Rx lock. */
	taskENTER_CRITICAL();
 8005e02:	f001 f9b1 	bl	8007168 <vPortEnterCritical>
	{
		int8_t cRxLock = pxQueue->cRxLock;
 8005e06:	687b      	ldr	r3, [r7, #4]
 8005e08:	f893 3044 	ldrb.w	r3, [r3, #68]	@ 0x44
 8005e0c:	73bb      	strb	r3, [r7, #14]

		while( cRxLock > queueLOCKED_UNMODIFIED )
 8005e0e:	e011      	b.n	8005e34 <prvUnlockQueue+0x84>
		{
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 8005e10:	687b      	ldr	r3, [r7, #4]
 8005e12:	691b      	ldr	r3, [r3, #16]
 8005e14:	2b00      	cmp	r3, #0
 8005e16:	d012      	beq.n	8005e3e <prvUnlockQueue+0x8e>
			{
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 8005e18:	687b      	ldr	r3, [r7, #4]
 8005e1a:	3310      	adds	r3, #16
 8005e1c:	4618      	mov	r0, r3
 8005e1e:	f000 fc87 	bl	8006730 <xTaskRemoveFromEventList>
 8005e22:	4603      	mov	r3, r0
 8005e24:	2b00      	cmp	r3, #0
 8005e26:	d001      	beq.n	8005e2c <prvUnlockQueue+0x7c>
				{
					vTaskMissedYield();
 8005e28:	f000 fd60 	bl	80068ec <vTaskMissedYield>
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				--cRxLock;
 8005e2c:	7bbb      	ldrb	r3, [r7, #14]
 8005e2e:	3b01      	subs	r3, #1
 8005e30:	b2db      	uxtb	r3, r3
 8005e32:	73bb      	strb	r3, [r7, #14]
		while( cRxLock > queueLOCKED_UNMODIFIED )
 8005e34:	f997 300e 	ldrsb.w	r3, [r7, #14]
 8005e38:	2b00      	cmp	r3, #0
 8005e3a:	dce9      	bgt.n	8005e10 <prvUnlockQueue+0x60>
 8005e3c:	e000      	b.n	8005e40 <prvUnlockQueue+0x90>
			}
			else
			{
				break;
 8005e3e:	bf00      	nop
			}
		}

		pxQueue->cRxLock = queueUNLOCKED;
 8005e40:	687b      	ldr	r3, [r7, #4]
 8005e42:	22ff      	movs	r2, #255	@ 0xff
 8005e44:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
	}
	taskEXIT_CRITICAL();
 8005e48:	f001 f9c0 	bl	80071cc <vPortExitCritical>
}
 8005e4c:	bf00      	nop
 8005e4e:	3710      	adds	r7, #16
 8005e50:	46bd      	mov	sp, r7
 8005e52:	bd80      	pop	{r7, pc}

08005e54 <prvIsQueueEmpty>:
/*-----------------------------------------------------------*/

static BaseType_t prvIsQueueEmpty( const Queue_t *pxQueue )
{
 8005e54:	b580      	push	{r7, lr}
 8005e56:	b084      	sub	sp, #16
 8005e58:	af00      	add	r7, sp, #0
 8005e5a:	6078      	str	r0, [r7, #4]
BaseType_t xReturn;

	taskENTER_CRITICAL();
 8005e5c:	f001 f984 	bl	8007168 <vPortEnterCritical>
	{
		if( pxQueue->uxMessagesWaiting == ( UBaseType_t )  0 )
 8005e60:	687b      	ldr	r3, [r7, #4]
 8005e62:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8005e64:	2b00      	cmp	r3, #0
 8005e66:	d102      	bne.n	8005e6e <prvIsQueueEmpty+0x1a>
		{
			xReturn = pdTRUE;
 8005e68:	2301      	movs	r3, #1
 8005e6a:	60fb      	str	r3, [r7, #12]
 8005e6c:	e001      	b.n	8005e72 <prvIsQueueEmpty+0x1e>
		}
		else
		{
			xReturn = pdFALSE;
 8005e6e:	2300      	movs	r3, #0
 8005e70:	60fb      	str	r3, [r7, #12]
		}
	}
	taskEXIT_CRITICAL();
 8005e72:	f001 f9ab 	bl	80071cc <vPortExitCritical>

	return xReturn;
 8005e76:	68fb      	ldr	r3, [r7, #12]
}
 8005e78:	4618      	mov	r0, r3
 8005e7a:	3710      	adds	r7, #16
 8005e7c:	46bd      	mov	sp, r7
 8005e7e:	bd80      	pop	{r7, pc}

08005e80 <prvIsQueueFull>:
	return xReturn;
} /*lint !e818 xQueue could not be pointer to const because it is a typedef. */
/*-----------------------------------------------------------*/

static BaseType_t prvIsQueueFull( const Queue_t *pxQueue )
{
 8005e80:	b580      	push	{r7, lr}
 8005e82:	b084      	sub	sp, #16
 8005e84:	af00      	add	r7, sp, #0
 8005e86:	6078      	str	r0, [r7, #4]
BaseType_t xReturn;

	taskENTER_CRITICAL();
 8005e88:	f001 f96e 	bl	8007168 <vPortEnterCritical>
	{
		if( pxQueue->uxMessagesWaiting == pxQueue->uxLength )
 8005e8c:	687b      	ldr	r3, [r7, #4]
 8005e8e:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 8005e90:	687b      	ldr	r3, [r7, #4]
 8005e92:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8005e94:	429a      	cmp	r2, r3
 8005e96:	d102      	bne.n	8005e9e <prvIsQueueFull+0x1e>
		{
			xReturn = pdTRUE;
 8005e98:	2301      	movs	r3, #1
 8005e9a:	60fb      	str	r3, [r7, #12]
 8005e9c:	e001      	b.n	8005ea2 <prvIsQueueFull+0x22>
		}
		else
		{
			xReturn = pdFALSE;
 8005e9e:	2300      	movs	r3, #0
 8005ea0:	60fb      	str	r3, [r7, #12]
		}
	}
	taskEXIT_CRITICAL();
 8005ea2:	f001 f993 	bl	80071cc <vPortExitCritical>

	return xReturn;
 8005ea6:	68fb      	ldr	r3, [r7, #12]
}
 8005ea8:	4618      	mov	r0, r3
 8005eaa:	3710      	adds	r7, #16
 8005eac:	46bd      	mov	sp, r7
 8005eae:	bd80      	pop	{r7, pc}

08005eb0 <xTaskCreateStatic>:
									const uint32_t ulStackDepth,
									void * const pvParameters,
									UBaseType_t uxPriority,
									StackType_t * const puxStackBuffer,
									StaticTask_t * const pxTaskBuffer )
	{
 8005eb0:	b580      	push	{r7, lr}
 8005eb2:	b08e      	sub	sp, #56	@ 0x38
 8005eb4:	af04      	add	r7, sp, #16
 8005eb6:	60f8      	str	r0, [r7, #12]
 8005eb8:	60b9      	str	r1, [r7, #8]
 8005eba:	607a      	str	r2, [r7, #4]
 8005ebc:	603b      	str	r3, [r7, #0]
	TCB_t *pxNewTCB;
	TaskHandle_t xReturn;

		configASSERT( puxStackBuffer != NULL );
 8005ebe:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8005ec0:	2b00      	cmp	r3, #0
 8005ec2:	d10b      	bne.n	8005edc <xTaskCreateStatic+0x2c>
	__asm volatile
 8005ec4:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8005ec8:	f383 8811 	msr	BASEPRI, r3
 8005ecc:	f3bf 8f6f 	isb	sy
 8005ed0:	f3bf 8f4f 	dsb	sy
 8005ed4:	623b      	str	r3, [r7, #32]
}
 8005ed6:	bf00      	nop
 8005ed8:	bf00      	nop
 8005eda:	e7fd      	b.n	8005ed8 <xTaskCreateStatic+0x28>
		configASSERT( pxTaskBuffer != NULL );
 8005edc:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8005ede:	2b00      	cmp	r3, #0
 8005ee0:	d10b      	bne.n	8005efa <xTaskCreateStatic+0x4a>
	__asm volatile
 8005ee2:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8005ee6:	f383 8811 	msr	BASEPRI, r3
 8005eea:	f3bf 8f6f 	isb	sy
 8005eee:	f3bf 8f4f 	dsb	sy
 8005ef2:	61fb      	str	r3, [r7, #28]
}
 8005ef4:	bf00      	nop
 8005ef6:	bf00      	nop
 8005ef8:	e7fd      	b.n	8005ef6 <xTaskCreateStatic+0x46>
		#if( configASSERT_DEFINED == 1 )
		{
			/* Sanity check that the size of the structure used to declare a
			variable of type StaticTask_t equals the size of the real task
			structure. */
			volatile size_t xSize = sizeof( StaticTask_t );
 8005efa:	23a0      	movs	r3, #160	@ 0xa0
 8005efc:	613b      	str	r3, [r7, #16]
			configASSERT( xSize == sizeof( TCB_t ) );
 8005efe:	693b      	ldr	r3, [r7, #16]
 8005f00:	2ba0      	cmp	r3, #160	@ 0xa0
 8005f02:	d00b      	beq.n	8005f1c <xTaskCreateStatic+0x6c>
	__asm volatile
 8005f04:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8005f08:	f383 8811 	msr	BASEPRI, r3
 8005f0c:	f3bf 8f6f 	isb	sy
 8005f10:	f3bf 8f4f 	dsb	sy
 8005f14:	61bb      	str	r3, [r7, #24]
}
 8005f16:	bf00      	nop
 8005f18:	bf00      	nop
 8005f1a:	e7fd      	b.n	8005f18 <xTaskCreateStatic+0x68>
			( void ) xSize; /* Prevent lint warning when configASSERT() is not used. */
 8005f1c:	693b      	ldr	r3, [r7, #16]
		}
		#endif /* configASSERT_DEFINED */


		if( ( pxTaskBuffer != NULL ) && ( puxStackBuffer != NULL ) )
 8005f1e:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8005f20:	2b00      	cmp	r3, #0
 8005f22:	d01e      	beq.n	8005f62 <xTaskCreateStatic+0xb2>
 8005f24:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8005f26:	2b00      	cmp	r3, #0
 8005f28:	d01b      	beq.n	8005f62 <xTaskCreateStatic+0xb2>
		{
			/* The memory used for the task's TCB and stack are passed into this
			function - use them. */
			pxNewTCB = ( TCB_t * ) pxTaskBuffer; /*lint !e740 !e9087 Unusual cast is ok as the structures are designed to have the same alignment, and the size is checked by an assert. */
 8005f2a:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8005f2c:	627b      	str	r3, [r7, #36]	@ 0x24
			pxNewTCB->pxStack = ( StackType_t * ) puxStackBuffer;
 8005f2e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005f30:	6b7a      	ldr	r2, [r7, #52]	@ 0x34
 8005f32:	631a      	str	r2, [r3, #48]	@ 0x30

			#if( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 !e9029 Macro has been consolidated for readability reasons. */
			{
				/* Tasks can be created statically or dynamically, so note this
				task was created statically in case the task is later deleted. */
				pxNewTCB->ucStaticallyAllocated = tskSTATICALLY_ALLOCATED_STACK_AND_TCB;
 8005f34:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005f36:	2202      	movs	r2, #2
 8005f38:	f883 209d 	strb.w	r2, [r3, #157]	@ 0x9d
			}
			#endif /* tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE */

			prvInitialiseNewTask( pxTaskCode, pcName, ulStackDepth, pvParameters, uxPriority, &xReturn, pxNewTCB, NULL );
 8005f3c:	2300      	movs	r3, #0
 8005f3e:	9303      	str	r3, [sp, #12]
 8005f40:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005f42:	9302      	str	r3, [sp, #8]
 8005f44:	f107 0314 	add.w	r3, r7, #20
 8005f48:	9301      	str	r3, [sp, #4]
 8005f4a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8005f4c:	9300      	str	r3, [sp, #0]
 8005f4e:	683b      	ldr	r3, [r7, #0]
 8005f50:	687a      	ldr	r2, [r7, #4]
 8005f52:	68b9      	ldr	r1, [r7, #8]
 8005f54:	68f8      	ldr	r0, [r7, #12]
 8005f56:	f000 f851 	bl	8005ffc <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 8005f5a:	6a78      	ldr	r0, [r7, #36]	@ 0x24
 8005f5c:	f000 f8ee 	bl	800613c <prvAddNewTaskToReadyList>
 8005f60:	e001      	b.n	8005f66 <xTaskCreateStatic+0xb6>
		}
		else
		{
			xReturn = NULL;
 8005f62:	2300      	movs	r3, #0
 8005f64:	617b      	str	r3, [r7, #20]
		}

		return xReturn;
 8005f66:	697b      	ldr	r3, [r7, #20]
	}
 8005f68:	4618      	mov	r0, r3
 8005f6a:	3728      	adds	r7, #40	@ 0x28
 8005f6c:	46bd      	mov	sp, r7
 8005f6e:	bd80      	pop	{r7, pc}

08005f70 <xTaskCreate>:
							const char * const pcName,		/*lint !e971 Unqualified char types are allowed for strings and single characters only. */
							const configSTACK_DEPTH_TYPE usStackDepth,
							void * const pvParameters,
							UBaseType_t uxPriority,
							TaskHandle_t * const pxCreatedTask )
	{
 8005f70:	b580      	push	{r7, lr}
 8005f72:	b08c      	sub	sp, #48	@ 0x30
 8005f74:	af04      	add	r7, sp, #16
 8005f76:	60f8      	str	r0, [r7, #12]
 8005f78:	60b9      	str	r1, [r7, #8]
 8005f7a:	603b      	str	r3, [r7, #0]
 8005f7c:	4613      	mov	r3, r2
 8005f7e:	80fb      	strh	r3, [r7, #6]
		#else /* portSTACK_GROWTH */
		{
		StackType_t *pxStack;

			/* Allocate space for the stack used by the task being created. */
			pxStack = pvPortMalloc( ( ( ( size_t ) usStackDepth ) * sizeof( StackType_t ) ) ); /*lint !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack and this allocation is the stack. */
 8005f80:	88fb      	ldrh	r3, [r7, #6]
 8005f82:	009b      	lsls	r3, r3, #2
 8005f84:	4618      	mov	r0, r3
 8005f86:	f001 f9cf 	bl	8007328 <pvPortMalloc>
 8005f8a:	6178      	str	r0, [r7, #20]

			if( pxStack != NULL )
 8005f8c:	697b      	ldr	r3, [r7, #20]
 8005f8e:	2b00      	cmp	r3, #0
 8005f90:	d00e      	beq.n	8005fb0 <xTaskCreate+0x40>
			{
				/* Allocate space for the TCB. */
				pxNewTCB = ( TCB_t * ) pvPortMalloc( sizeof( TCB_t ) ); /*lint !e9087 !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack, and the first member of TCB_t is always a pointer to the task's stack. */
 8005f92:	20a0      	movs	r0, #160	@ 0xa0
 8005f94:	f001 f9c8 	bl	8007328 <pvPortMalloc>
 8005f98:	61f8      	str	r0, [r7, #28]

				if( pxNewTCB != NULL )
 8005f9a:	69fb      	ldr	r3, [r7, #28]
 8005f9c:	2b00      	cmp	r3, #0
 8005f9e:	d003      	beq.n	8005fa8 <xTaskCreate+0x38>
				{
					/* Store the stack location in the TCB. */
					pxNewTCB->pxStack = pxStack;
 8005fa0:	69fb      	ldr	r3, [r7, #28]
 8005fa2:	697a      	ldr	r2, [r7, #20]
 8005fa4:	631a      	str	r2, [r3, #48]	@ 0x30
 8005fa6:	e005      	b.n	8005fb4 <xTaskCreate+0x44>
				}
				else
				{
					/* The stack cannot be used as the TCB was not created.  Free
					it again. */
					vPortFree( pxStack );
 8005fa8:	6978      	ldr	r0, [r7, #20]
 8005faa:	f001 fa8b 	bl	80074c4 <vPortFree>
 8005fae:	e001      	b.n	8005fb4 <xTaskCreate+0x44>
				}
			}
			else
			{
				pxNewTCB = NULL;
 8005fb0:	2300      	movs	r3, #0
 8005fb2:	61fb      	str	r3, [r7, #28]
			}
		}
		#endif /* portSTACK_GROWTH */

		if( pxNewTCB != NULL )
 8005fb4:	69fb      	ldr	r3, [r7, #28]
 8005fb6:	2b00      	cmp	r3, #0
 8005fb8:	d017      	beq.n	8005fea <xTaskCreate+0x7a>
		{
			#if( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e9029 !e731 Macro has been consolidated for readability reasons. */
			{
				/* Tasks can be created statically or dynamically, so note this
				task was created dynamically in case it is later deleted. */
				pxNewTCB->ucStaticallyAllocated = tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB;
 8005fba:	69fb      	ldr	r3, [r7, #28]
 8005fbc:	2200      	movs	r2, #0
 8005fbe:	f883 209d 	strb.w	r2, [r3, #157]	@ 0x9d
			}
			#endif /* tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE */

			prvInitialiseNewTask( pxTaskCode, pcName, ( uint32_t ) usStackDepth, pvParameters, uxPriority, pxCreatedTask, pxNewTCB, NULL );
 8005fc2:	88fa      	ldrh	r2, [r7, #6]
 8005fc4:	2300      	movs	r3, #0
 8005fc6:	9303      	str	r3, [sp, #12]
 8005fc8:	69fb      	ldr	r3, [r7, #28]
 8005fca:	9302      	str	r3, [sp, #8]
 8005fcc:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8005fce:	9301      	str	r3, [sp, #4]
 8005fd0:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8005fd2:	9300      	str	r3, [sp, #0]
 8005fd4:	683b      	ldr	r3, [r7, #0]
 8005fd6:	68b9      	ldr	r1, [r7, #8]
 8005fd8:	68f8      	ldr	r0, [r7, #12]
 8005fda:	f000 f80f 	bl	8005ffc <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 8005fde:	69f8      	ldr	r0, [r7, #28]
 8005fe0:	f000 f8ac 	bl	800613c <prvAddNewTaskToReadyList>
			xReturn = pdPASS;
 8005fe4:	2301      	movs	r3, #1
 8005fe6:	61bb      	str	r3, [r7, #24]
 8005fe8:	e002      	b.n	8005ff0 <xTaskCreate+0x80>
		}
		else
		{
			xReturn = errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY;
 8005fea:	f04f 33ff 	mov.w	r3, #4294967295
 8005fee:	61bb      	str	r3, [r7, #24]
		}

		return xReturn;
 8005ff0:	69bb      	ldr	r3, [r7, #24]
	}
 8005ff2:	4618      	mov	r0, r3
 8005ff4:	3720      	adds	r7, #32
 8005ff6:	46bd      	mov	sp, r7
 8005ff8:	bd80      	pop	{r7, pc}
	...

08005ffc <prvInitialiseNewTask>:
									void * const pvParameters,
									UBaseType_t uxPriority,
									TaskHandle_t * const pxCreatedTask,
									TCB_t *pxNewTCB,
									const MemoryRegion_t * const xRegions )
{
 8005ffc:	b580      	push	{r7, lr}
 8005ffe:	b088      	sub	sp, #32
 8006000:	af00      	add	r7, sp, #0
 8006002:	60f8      	str	r0, [r7, #12]
 8006004:	60b9      	str	r1, [r7, #8]
 8006006:	607a      	str	r2, [r7, #4]
 8006008:	603b      	str	r3, [r7, #0]
	grows from high memory to low (as per the 80x86) or vice versa.
	portSTACK_GROWTH is used to make the result positive or negative as required
	by the port. */
	#if( portSTACK_GROWTH < 0 )
	{
		pxTopOfStack = &( pxNewTCB->pxStack[ ulStackDepth - ( uint32_t ) 1 ] );
 800600a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800600c:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 800600e:	687b      	ldr	r3, [r7, #4]
 8006010:	f103 4380 	add.w	r3, r3, #1073741824	@ 0x40000000
 8006014:	3b01      	subs	r3, #1
 8006016:	009b      	lsls	r3, r3, #2
 8006018:	4413      	add	r3, r2
 800601a:	61bb      	str	r3, [r7, #24]
		pxTopOfStack = ( StackType_t * ) ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack ) & ( ~( ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) ) ); /*lint !e923 !e9033 !e9078 MISRA exception.  Avoiding casts between pointers and integers is not practical.  Size differences accounted for using portPOINTER_SIZE_TYPE type.  Checked by assert(). */
 800601c:	69bb      	ldr	r3, [r7, #24]
 800601e:	f023 0307 	bic.w	r3, r3, #7
 8006022:	61bb      	str	r3, [r7, #24]

		/* Check the alignment of the calculated top of stack is correct. */
		configASSERT( ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack & ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) == 0UL ) );
 8006024:	69bb      	ldr	r3, [r7, #24]
 8006026:	f003 0307 	and.w	r3, r3, #7
 800602a:	2b00      	cmp	r3, #0
 800602c:	d00b      	beq.n	8006046 <prvInitialiseNewTask+0x4a>
	__asm volatile
 800602e:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8006032:	f383 8811 	msr	BASEPRI, r3
 8006036:	f3bf 8f6f 	isb	sy
 800603a:	f3bf 8f4f 	dsb	sy
 800603e:	617b      	str	r3, [r7, #20]
}
 8006040:	bf00      	nop
 8006042:	bf00      	nop
 8006044:	e7fd      	b.n	8006042 <prvInitialiseNewTask+0x46>
		pxNewTCB->pxEndOfStack = pxNewTCB->pxStack + ( ulStackDepth - ( uint32_t ) 1 );
	}
	#endif /* portSTACK_GROWTH */

	/* Store the task name in the TCB. */
	if( pcName != NULL )
 8006046:	68bb      	ldr	r3, [r7, #8]
 8006048:	2b00      	cmp	r3, #0
 800604a:	d01f      	beq.n	800608c <prvInitialiseNewTask+0x90>
	{
		for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 800604c:	2300      	movs	r3, #0
 800604e:	61fb      	str	r3, [r7, #28]
 8006050:	e012      	b.n	8006078 <prvInitialiseNewTask+0x7c>
		{
			pxNewTCB->pcTaskName[ x ] = pcName[ x ];
 8006052:	68ba      	ldr	r2, [r7, #8]
 8006054:	69fb      	ldr	r3, [r7, #28]
 8006056:	4413      	add	r3, r2
 8006058:	7819      	ldrb	r1, [r3, #0]
 800605a:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 800605c:	69fb      	ldr	r3, [r7, #28]
 800605e:	4413      	add	r3, r2
 8006060:	3334      	adds	r3, #52	@ 0x34
 8006062:	460a      	mov	r2, r1
 8006064:	701a      	strb	r2, [r3, #0]

			/* Don't copy all configMAX_TASK_NAME_LEN if the string is shorter than
			configMAX_TASK_NAME_LEN characters just in case the memory after the
			string is not accessible (extremely unlikely). */
			if( pcName[ x ] == ( char ) 0x00 )
 8006066:	68ba      	ldr	r2, [r7, #8]
 8006068:	69fb      	ldr	r3, [r7, #28]
 800606a:	4413      	add	r3, r2
 800606c:	781b      	ldrb	r3, [r3, #0]
 800606e:	2b00      	cmp	r3, #0
 8006070:	d006      	beq.n	8006080 <prvInitialiseNewTask+0x84>
		for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 8006072:	69fb      	ldr	r3, [r7, #28]
 8006074:	3301      	adds	r3, #1
 8006076:	61fb      	str	r3, [r7, #28]
 8006078:	69fb      	ldr	r3, [r7, #28]
 800607a:	2b0f      	cmp	r3, #15
 800607c:	d9e9      	bls.n	8006052 <prvInitialiseNewTask+0x56>
 800607e:	e000      	b.n	8006082 <prvInitialiseNewTask+0x86>
			{
				break;
 8006080:	bf00      	nop
			}
		}

		/* Ensure the name string is terminated in the case that the string length
		was greater or equal to configMAX_TASK_NAME_LEN. */
		pxNewTCB->pcTaskName[ configMAX_TASK_NAME_LEN - 1 ] = '\0';
 8006082:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8006084:	2200      	movs	r2, #0
 8006086:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
 800608a:	e003      	b.n	8006094 <prvInitialiseNewTask+0x98>
	}
	else
	{
		/* The task has not been given a name, so just ensure there is a NULL
		terminator when it is read out. */
		pxNewTCB->pcTaskName[ 0 ] = 0x00;
 800608c:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800608e:	2200      	movs	r2, #0
 8006090:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
	}

	/* This is used as an array index so must ensure it's not too large.  First
	remove the privilege bit if one is present. */
	if( uxPriority >= ( UBaseType_t ) configMAX_PRIORITIES )
 8006094:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8006096:	2b06      	cmp	r3, #6
 8006098:	d901      	bls.n	800609e <prvInitialiseNewTask+0xa2>
	{
		uxPriority = ( UBaseType_t ) configMAX_PRIORITIES - ( UBaseType_t ) 1U;
 800609a:	2306      	movs	r3, #6
 800609c:	62bb      	str	r3, [r7, #40]	@ 0x28
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxNewTCB->uxPriority = uxPriority;
 800609e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80060a0:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 80060a2:	62da      	str	r2, [r3, #44]	@ 0x2c
	#if ( configUSE_MUTEXES == 1 )
	{
		pxNewTCB->uxBasePriority = uxPriority;
 80060a4:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80060a6:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 80060a8:	645a      	str	r2, [r3, #68]	@ 0x44
		pxNewTCB->uxMutexesHeld = 0;
 80060aa:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80060ac:	2200      	movs	r2, #0
 80060ae:	649a      	str	r2, [r3, #72]	@ 0x48
	}
	#endif /* configUSE_MUTEXES */

	vListInitialiseItem( &( pxNewTCB->xStateListItem ) );
 80060b0:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80060b2:	3304      	adds	r3, #4
 80060b4:	4618      	mov	r0, r3
 80060b6:	f7ff f9c4 	bl	8005442 <vListInitialiseItem>
	vListInitialiseItem( &( pxNewTCB->xEventListItem ) );
 80060ba:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80060bc:	3318      	adds	r3, #24
 80060be:	4618      	mov	r0, r3
 80060c0:	f7ff f9bf 	bl	8005442 <vListInitialiseItem>

	/* Set the pxNewTCB as a link back from the ListItem_t.  This is so we can get
	back to	the containing TCB from a generic item in a list. */
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xStateListItem ), pxNewTCB );
 80060c4:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80060c6:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 80060c8:	611a      	str	r2, [r3, #16]

	/* Event lists are always in priority order. */
	listSET_LIST_ITEM_VALUE( &( pxNewTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 80060ca:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80060cc:	f1c3 0207 	rsb	r2, r3, #7
 80060d0:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80060d2:	619a      	str	r2, [r3, #24]
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xEventListItem ), pxNewTCB );
 80060d4:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80060d6:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 80060d8:	625a      	str	r2, [r3, #36]	@ 0x24
	}
	#endif

	#if ( configUSE_TASK_NOTIFICATIONS == 1 )
	{
		pxNewTCB->ulNotifiedValue = 0;
 80060da:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80060dc:	2200      	movs	r2, #0
 80060de:	f8c3 2098 	str.w	r2, [r3, #152]	@ 0x98
		pxNewTCB->ucNotifyState = taskNOT_WAITING_NOTIFICATION;
 80060e2:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80060e4:	2200      	movs	r2, #0
 80060e6:	f883 209c 	strb.w	r2, [r3, #156]	@ 0x9c
	#if ( configUSE_NEWLIB_REENTRANT == 1 )
	{
		/* Initialise this task's Newlib reent structure.
		See the third party link http://www.nadler.com/embedded/newlibAndFreeRTOS.html
		for additional information. */
		_REENT_INIT_PTR( ( &( pxNewTCB->xNewLib_reent ) ) );
 80060ea:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80060ec:	334c      	adds	r3, #76	@ 0x4c
 80060ee:	224c      	movs	r2, #76	@ 0x4c
 80060f0:	2100      	movs	r1, #0
 80060f2:	4618      	mov	r0, r3
 80060f4:	f001 fb06 	bl	8007704 <memset>
 80060f8:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80060fa:	4a0d      	ldr	r2, [pc, #52]	@ (8006130 <prvInitialiseNewTask+0x134>)
 80060fc:	651a      	str	r2, [r3, #80]	@ 0x50
 80060fe:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8006100:	4a0c      	ldr	r2, [pc, #48]	@ (8006134 <prvInitialiseNewTask+0x138>)
 8006102:	655a      	str	r2, [r3, #84]	@ 0x54
 8006104:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8006106:	4a0c      	ldr	r2, [pc, #48]	@ (8006138 <prvInitialiseNewTask+0x13c>)
 8006108:	659a      	str	r2, [r3, #88]	@ 0x58
			}
			#endif /* portSTACK_GROWTH */
		}
		#else /* portHAS_STACK_OVERFLOW_CHECKING */
		{
			pxNewTCB->pxTopOfStack = pxPortInitialiseStack( pxTopOfStack, pxTaskCode, pvParameters );
 800610a:	683a      	ldr	r2, [r7, #0]
 800610c:	68f9      	ldr	r1, [r7, #12]
 800610e:	69b8      	ldr	r0, [r7, #24]
 8006110:	f000 fefa 	bl	8006f08 <pxPortInitialiseStack>
 8006114:	4602      	mov	r2, r0
 8006116:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8006118:	601a      	str	r2, [r3, #0]
		}
		#endif /* portHAS_STACK_OVERFLOW_CHECKING */
	}
	#endif /* portUSING_MPU_WRAPPERS */

	if( pxCreatedTask != NULL )
 800611a:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800611c:	2b00      	cmp	r3, #0
 800611e:	d002      	beq.n	8006126 <prvInitialiseNewTask+0x12a>
	{
		/* Pass the handle out in an anonymous way.  The handle can be used to
		change the created task's priority, delete the created task, etc.*/
		*pxCreatedTask = ( TaskHandle_t ) pxNewTCB;
 8006120:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8006122:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8006124:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 8006126:	bf00      	nop
 8006128:	3720      	adds	r7, #32
 800612a:	46bd      	mov	sp, r7
 800612c:	bd80      	pop	{r7, pc}
 800612e:	bf00      	nop
 8006130:	2000416c 	.word	0x2000416c
 8006134:	200041d4 	.word	0x200041d4
 8006138:	2000423c 	.word	0x2000423c

0800613c <prvAddNewTaskToReadyList>:
/*-----------------------------------------------------------*/

static void prvAddNewTaskToReadyList( TCB_t *pxNewTCB )
{
 800613c:	b580      	push	{r7, lr}
 800613e:	b082      	sub	sp, #8
 8006140:	af00      	add	r7, sp, #0
 8006142:	6078      	str	r0, [r7, #4]
	/* Ensure interrupts don't access the task lists while the lists are being
	updated. */
	taskENTER_CRITICAL();
 8006144:	f001 f810 	bl	8007168 <vPortEnterCritical>
	{
		uxCurrentNumberOfTasks++;
 8006148:	4b2a      	ldr	r3, [pc, #168]	@ (80061f4 <prvAddNewTaskToReadyList+0xb8>)
 800614a:	681b      	ldr	r3, [r3, #0]
 800614c:	3301      	adds	r3, #1
 800614e:	4a29      	ldr	r2, [pc, #164]	@ (80061f4 <prvAddNewTaskToReadyList+0xb8>)
 8006150:	6013      	str	r3, [r2, #0]
		if( pxCurrentTCB == NULL )
 8006152:	4b29      	ldr	r3, [pc, #164]	@ (80061f8 <prvAddNewTaskToReadyList+0xbc>)
 8006154:	681b      	ldr	r3, [r3, #0]
 8006156:	2b00      	cmp	r3, #0
 8006158:	d109      	bne.n	800616e <prvAddNewTaskToReadyList+0x32>
		{
			/* There are no other tasks, or all the other tasks are in
			the suspended state - make this the current task. */
			pxCurrentTCB = pxNewTCB;
 800615a:	4a27      	ldr	r2, [pc, #156]	@ (80061f8 <prvAddNewTaskToReadyList+0xbc>)
 800615c:	687b      	ldr	r3, [r7, #4]
 800615e:	6013      	str	r3, [r2, #0]

			if( uxCurrentNumberOfTasks == ( UBaseType_t ) 1 )
 8006160:	4b24      	ldr	r3, [pc, #144]	@ (80061f4 <prvAddNewTaskToReadyList+0xb8>)
 8006162:	681b      	ldr	r3, [r3, #0]
 8006164:	2b01      	cmp	r3, #1
 8006166:	d110      	bne.n	800618a <prvAddNewTaskToReadyList+0x4e>
			{
				/* This is the first task to be created so do the preliminary
				initialisation required.  We will not recover if this call
				fails, but we will report the failure. */
				prvInitialiseTaskLists();
 8006168:	f000 fbe4 	bl	8006934 <prvInitialiseTaskLists>
 800616c:	e00d      	b.n	800618a <prvAddNewTaskToReadyList+0x4e>
		else
		{
			/* If the scheduler is not already running, make this task the
			current task if it is the highest priority task to be created
			so far. */
			if( xSchedulerRunning == pdFALSE )
 800616e:	4b23      	ldr	r3, [pc, #140]	@ (80061fc <prvAddNewTaskToReadyList+0xc0>)
 8006170:	681b      	ldr	r3, [r3, #0]
 8006172:	2b00      	cmp	r3, #0
 8006174:	d109      	bne.n	800618a <prvAddNewTaskToReadyList+0x4e>
			{
				if( pxCurrentTCB->uxPriority <= pxNewTCB->uxPriority )
 8006176:	4b20      	ldr	r3, [pc, #128]	@ (80061f8 <prvAddNewTaskToReadyList+0xbc>)
 8006178:	681b      	ldr	r3, [r3, #0]
 800617a:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800617c:	687b      	ldr	r3, [r7, #4]
 800617e:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8006180:	429a      	cmp	r2, r3
 8006182:	d802      	bhi.n	800618a <prvAddNewTaskToReadyList+0x4e>
				{
					pxCurrentTCB = pxNewTCB;
 8006184:	4a1c      	ldr	r2, [pc, #112]	@ (80061f8 <prvAddNewTaskToReadyList+0xbc>)
 8006186:	687b      	ldr	r3, [r7, #4]
 8006188:	6013      	str	r3, [r2, #0]
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}

		uxTaskNumber++;
 800618a:	4b1d      	ldr	r3, [pc, #116]	@ (8006200 <prvAddNewTaskToReadyList+0xc4>)
 800618c:	681b      	ldr	r3, [r3, #0]
 800618e:	3301      	adds	r3, #1
 8006190:	4a1b      	ldr	r2, [pc, #108]	@ (8006200 <prvAddNewTaskToReadyList+0xc4>)
 8006192:	6013      	str	r3, [r2, #0]
			pxNewTCB->uxTCBNumber = uxTaskNumber;
		}
		#endif /* configUSE_TRACE_FACILITY */
		traceTASK_CREATE( pxNewTCB );

		prvAddTaskToReadyList( pxNewTCB );
 8006194:	687b      	ldr	r3, [r7, #4]
 8006196:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8006198:	2201      	movs	r2, #1
 800619a:	409a      	lsls	r2, r3
 800619c:	4b19      	ldr	r3, [pc, #100]	@ (8006204 <prvAddNewTaskToReadyList+0xc8>)
 800619e:	681b      	ldr	r3, [r3, #0]
 80061a0:	4313      	orrs	r3, r2
 80061a2:	4a18      	ldr	r2, [pc, #96]	@ (8006204 <prvAddNewTaskToReadyList+0xc8>)
 80061a4:	6013      	str	r3, [r2, #0]
 80061a6:	687b      	ldr	r3, [r7, #4]
 80061a8:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 80061aa:	4613      	mov	r3, r2
 80061ac:	009b      	lsls	r3, r3, #2
 80061ae:	4413      	add	r3, r2
 80061b0:	009b      	lsls	r3, r3, #2
 80061b2:	4a15      	ldr	r2, [pc, #84]	@ (8006208 <prvAddNewTaskToReadyList+0xcc>)
 80061b4:	441a      	add	r2, r3
 80061b6:	687b      	ldr	r3, [r7, #4]
 80061b8:	3304      	adds	r3, #4
 80061ba:	4619      	mov	r1, r3
 80061bc:	4610      	mov	r0, r2
 80061be:	f7ff f94d 	bl	800545c <vListInsertEnd>

		portSETUP_TCB( pxNewTCB );
	}
	taskEXIT_CRITICAL();
 80061c2:	f001 f803 	bl	80071cc <vPortExitCritical>

	if( xSchedulerRunning != pdFALSE )
 80061c6:	4b0d      	ldr	r3, [pc, #52]	@ (80061fc <prvAddNewTaskToReadyList+0xc0>)
 80061c8:	681b      	ldr	r3, [r3, #0]
 80061ca:	2b00      	cmp	r3, #0
 80061cc:	d00e      	beq.n	80061ec <prvAddNewTaskToReadyList+0xb0>
	{
		/* If the created task is of a higher priority than the current task
		then it should run now. */
		if( pxCurrentTCB->uxPriority < pxNewTCB->uxPriority )
 80061ce:	4b0a      	ldr	r3, [pc, #40]	@ (80061f8 <prvAddNewTaskToReadyList+0xbc>)
 80061d0:	681b      	ldr	r3, [r3, #0]
 80061d2:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 80061d4:	687b      	ldr	r3, [r7, #4]
 80061d6:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80061d8:	429a      	cmp	r2, r3
 80061da:	d207      	bcs.n	80061ec <prvAddNewTaskToReadyList+0xb0>
		{
			taskYIELD_IF_USING_PREEMPTION();
 80061dc:	4b0b      	ldr	r3, [pc, #44]	@ (800620c <prvAddNewTaskToReadyList+0xd0>)
 80061de:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 80061e2:	601a      	str	r2, [r3, #0]
 80061e4:	f3bf 8f4f 	dsb	sy
 80061e8:	f3bf 8f6f 	isb	sy
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 80061ec:	bf00      	nop
 80061ee:	3708      	adds	r7, #8
 80061f0:	46bd      	mov	sp, r7
 80061f2:	bd80      	pop	{r7, pc}
 80061f4:	20000518 	.word	0x20000518
 80061f8:	20000418 	.word	0x20000418
 80061fc:	20000524 	.word	0x20000524
 8006200:	20000534 	.word	0x20000534
 8006204:	20000520 	.word	0x20000520
 8006208:	2000041c 	.word	0x2000041c
 800620c:	e000ed04 	.word	0xe000ed04

08006210 <vTaskDelay>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelay == 1 )

	void vTaskDelay( const TickType_t xTicksToDelay )
	{
 8006210:	b580      	push	{r7, lr}
 8006212:	b084      	sub	sp, #16
 8006214:	af00      	add	r7, sp, #0
 8006216:	6078      	str	r0, [r7, #4]
	BaseType_t xAlreadyYielded = pdFALSE;
 8006218:	2300      	movs	r3, #0
 800621a:	60fb      	str	r3, [r7, #12]

		/* A delay time of zero just forces a reschedule. */
		if( xTicksToDelay > ( TickType_t ) 0U )
 800621c:	687b      	ldr	r3, [r7, #4]
 800621e:	2b00      	cmp	r3, #0
 8006220:	d018      	beq.n	8006254 <vTaskDelay+0x44>
		{
			configASSERT( uxSchedulerSuspended == 0 );
 8006222:	4b14      	ldr	r3, [pc, #80]	@ (8006274 <vTaskDelay+0x64>)
 8006224:	681b      	ldr	r3, [r3, #0]
 8006226:	2b00      	cmp	r3, #0
 8006228:	d00b      	beq.n	8006242 <vTaskDelay+0x32>
	__asm volatile
 800622a:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800622e:	f383 8811 	msr	BASEPRI, r3
 8006232:	f3bf 8f6f 	isb	sy
 8006236:	f3bf 8f4f 	dsb	sy
 800623a:	60bb      	str	r3, [r7, #8]
}
 800623c:	bf00      	nop
 800623e:	bf00      	nop
 8006240:	e7fd      	b.n	800623e <vTaskDelay+0x2e>
			vTaskSuspendAll();
 8006242:	f000 f885 	bl	8006350 <vTaskSuspendAll>
				list or removed from the blocked list until the scheduler
				is resumed.

				This task cannot be in an event list as it is the currently
				executing task. */
				prvAddCurrentTaskToDelayedList( xTicksToDelay, pdFALSE );
 8006246:	2100      	movs	r1, #0
 8006248:	6878      	ldr	r0, [r7, #4]
 800624a:	f000 fdf7 	bl	8006e3c <prvAddCurrentTaskToDelayedList>
			}
			xAlreadyYielded = xTaskResumeAll();
 800624e:	f000 f88d 	bl	800636c <xTaskResumeAll>
 8006252:	60f8      	str	r0, [r7, #12]
			mtCOVERAGE_TEST_MARKER();
		}

		/* Force a reschedule if xTaskResumeAll has not already done so, we may
		have put ourselves to sleep. */
		if( xAlreadyYielded == pdFALSE )
 8006254:	68fb      	ldr	r3, [r7, #12]
 8006256:	2b00      	cmp	r3, #0
 8006258:	d107      	bne.n	800626a <vTaskDelay+0x5a>
		{
			portYIELD_WITHIN_API();
 800625a:	4b07      	ldr	r3, [pc, #28]	@ (8006278 <vTaskDelay+0x68>)
 800625c:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8006260:	601a      	str	r2, [r3, #0]
 8006262:	f3bf 8f4f 	dsb	sy
 8006266:	f3bf 8f6f 	isb	sy
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
 800626a:	bf00      	nop
 800626c:	3710      	adds	r7, #16
 800626e:	46bd      	mov	sp, r7
 8006270:	bd80      	pop	{r7, pc}
 8006272:	bf00      	nop
 8006274:	20000540 	.word	0x20000540
 8006278:	e000ed04 	.word	0xe000ed04

0800627c <vTaskStartScheduler>:

#endif /* ( ( INCLUDE_xTaskResumeFromISR == 1 ) && ( INCLUDE_vTaskSuspend == 1 ) ) */
/*-----------------------------------------------------------*/

void vTaskStartScheduler( void )
{
 800627c:	b580      	push	{r7, lr}
 800627e:	b08a      	sub	sp, #40	@ 0x28
 8006280:	af04      	add	r7, sp, #16
BaseType_t xReturn;

	/* Add the idle task at the lowest priority. */
	#if( configSUPPORT_STATIC_ALLOCATION == 1 )
	{
		StaticTask_t *pxIdleTaskTCBBuffer = NULL;
 8006282:	2300      	movs	r3, #0
 8006284:	60bb      	str	r3, [r7, #8]
		StackType_t *pxIdleTaskStackBuffer = NULL;
 8006286:	2300      	movs	r3, #0
 8006288:	607b      	str	r3, [r7, #4]
		uint32_t ulIdleTaskStackSize;

		/* The Idle task is created using user provided RAM - obtain the
		address of the RAM then create the idle task. */
		vApplicationGetIdleTaskMemory( &pxIdleTaskTCBBuffer, &pxIdleTaskStackBuffer, &ulIdleTaskStackSize );
 800628a:	463a      	mov	r2, r7
 800628c:	1d39      	adds	r1, r7, #4
 800628e:	f107 0308 	add.w	r3, r7, #8
 8006292:	4618      	mov	r0, r3
 8006294:	f7fa f934 	bl	8000500 <vApplicationGetIdleTaskMemory>
		xIdleTaskHandle = xTaskCreateStatic(	prvIdleTask,
 8006298:	6839      	ldr	r1, [r7, #0]
 800629a:	687b      	ldr	r3, [r7, #4]
 800629c:	68ba      	ldr	r2, [r7, #8]
 800629e:	9202      	str	r2, [sp, #8]
 80062a0:	9301      	str	r3, [sp, #4]
 80062a2:	2300      	movs	r3, #0
 80062a4:	9300      	str	r3, [sp, #0]
 80062a6:	2300      	movs	r3, #0
 80062a8:	460a      	mov	r2, r1
 80062aa:	4921      	ldr	r1, [pc, #132]	@ (8006330 <vTaskStartScheduler+0xb4>)
 80062ac:	4821      	ldr	r0, [pc, #132]	@ (8006334 <vTaskStartScheduler+0xb8>)
 80062ae:	f7ff fdff 	bl	8005eb0 <xTaskCreateStatic>
 80062b2:	4603      	mov	r3, r0
 80062b4:	4a20      	ldr	r2, [pc, #128]	@ (8006338 <vTaskStartScheduler+0xbc>)
 80062b6:	6013      	str	r3, [r2, #0]
												( void * ) NULL, /*lint !e961.  The cast is not redundant for all compilers. */
												portPRIVILEGE_BIT, /* In effect ( tskIDLE_PRIORITY | portPRIVILEGE_BIT ), but tskIDLE_PRIORITY is zero. */
												pxIdleTaskStackBuffer,
												pxIdleTaskTCBBuffer ); /*lint !e961 MISRA exception, justified as it is not a redundant explicit cast to all supported compilers. */

		if( xIdleTaskHandle != NULL )
 80062b8:	4b1f      	ldr	r3, [pc, #124]	@ (8006338 <vTaskStartScheduler+0xbc>)
 80062ba:	681b      	ldr	r3, [r3, #0]
 80062bc:	2b00      	cmp	r3, #0
 80062be:	d002      	beq.n	80062c6 <vTaskStartScheduler+0x4a>
		{
			xReturn = pdPASS;
 80062c0:	2301      	movs	r3, #1
 80062c2:	617b      	str	r3, [r7, #20]
 80062c4:	e001      	b.n	80062ca <vTaskStartScheduler+0x4e>
		}
		else
		{
			xReturn = pdFAIL;
 80062c6:	2300      	movs	r3, #0
 80062c8:	617b      	str	r3, [r7, #20]
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif /* configUSE_TIMERS */

	if( xReturn == pdPASS )
 80062ca:	697b      	ldr	r3, [r7, #20]
 80062cc:	2b01      	cmp	r3, #1
 80062ce:	d11b      	bne.n	8006308 <vTaskStartScheduler+0x8c>
	__asm volatile
 80062d0:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80062d4:	f383 8811 	msr	BASEPRI, r3
 80062d8:	f3bf 8f6f 	isb	sy
 80062dc:	f3bf 8f4f 	dsb	sy
 80062e0:	613b      	str	r3, [r7, #16]
}
 80062e2:	bf00      	nop
		{
			/* Switch Newlib's _impure_ptr variable to point to the _reent
			structure specific to the task that will run first.
			See the third party link http://www.nadler.com/embedded/newlibAndFreeRTOS.html
			for additional information. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
 80062e4:	4b15      	ldr	r3, [pc, #84]	@ (800633c <vTaskStartScheduler+0xc0>)
 80062e6:	681b      	ldr	r3, [r3, #0]
 80062e8:	334c      	adds	r3, #76	@ 0x4c
 80062ea:	4a15      	ldr	r2, [pc, #84]	@ (8006340 <vTaskStartScheduler+0xc4>)
 80062ec:	6013      	str	r3, [r2, #0]
		}
		#endif /* configUSE_NEWLIB_REENTRANT */

		xNextTaskUnblockTime = portMAX_DELAY;
 80062ee:	4b15      	ldr	r3, [pc, #84]	@ (8006344 <vTaskStartScheduler+0xc8>)
 80062f0:	f04f 32ff 	mov.w	r2, #4294967295
 80062f4:	601a      	str	r2, [r3, #0]
		xSchedulerRunning = pdTRUE;
 80062f6:	4b14      	ldr	r3, [pc, #80]	@ (8006348 <vTaskStartScheduler+0xcc>)
 80062f8:	2201      	movs	r2, #1
 80062fa:	601a      	str	r2, [r3, #0]
		xTickCount = ( TickType_t ) configINITIAL_TICK_COUNT;
 80062fc:	4b13      	ldr	r3, [pc, #76]	@ (800634c <vTaskStartScheduler+0xd0>)
 80062fe:	2200      	movs	r2, #0
 8006300:	601a      	str	r2, [r3, #0]

		traceTASK_SWITCHED_IN();

		/* Setting up the timer tick is hardware specific and thus in the
		portable interface. */
		if( xPortStartScheduler() != pdFALSE )
 8006302:	f000 fe8d 	bl	8007020 <xPortStartScheduler>
	}

	/* Prevent compiler warnings if INCLUDE_xTaskGetIdleTaskHandle is set to 0,
	meaning xIdleTaskHandle is not used anywhere else. */
	( void ) xIdleTaskHandle;
}
 8006306:	e00f      	b.n	8006328 <vTaskStartScheduler+0xac>
		configASSERT( xReturn != errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY );
 8006308:	697b      	ldr	r3, [r7, #20]
 800630a:	f1b3 3fff 	cmp.w	r3, #4294967295
 800630e:	d10b      	bne.n	8006328 <vTaskStartScheduler+0xac>
	__asm volatile
 8006310:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8006314:	f383 8811 	msr	BASEPRI, r3
 8006318:	f3bf 8f6f 	isb	sy
 800631c:	f3bf 8f4f 	dsb	sy
 8006320:	60fb      	str	r3, [r7, #12]
}
 8006322:	bf00      	nop
 8006324:	bf00      	nop
 8006326:	e7fd      	b.n	8006324 <vTaskStartScheduler+0xa8>
}
 8006328:	bf00      	nop
 800632a:	3718      	adds	r7, #24
 800632c:	46bd      	mov	sp, r7
 800632e:	bd80      	pop	{r7, pc}
 8006330:	08007964 	.word	0x08007964
 8006334:	08006905 	.word	0x08006905
 8006338:	2000053c 	.word	0x2000053c
 800633c:	20000418 	.word	0x20000418
 8006340:	20000010 	.word	0x20000010
 8006344:	20000538 	.word	0x20000538
 8006348:	20000524 	.word	0x20000524
 800634c:	2000051c 	.word	0x2000051c

08006350 <vTaskSuspendAll>:
	vPortEndScheduler();
}
/*----------------------------------------------------------*/

void vTaskSuspendAll( void )
{
 8006350:	b480      	push	{r7}
 8006352:	af00      	add	r7, sp, #0
	do not otherwise exhibit real time behaviour. */
	portSOFTWARE_BARRIER();

	/* The scheduler is suspended if uxSchedulerSuspended is non-zero.  An increment
	is used to allow calls to vTaskSuspendAll() to nest. */
	++uxSchedulerSuspended;
 8006354:	4b04      	ldr	r3, [pc, #16]	@ (8006368 <vTaskSuspendAll+0x18>)
 8006356:	681b      	ldr	r3, [r3, #0]
 8006358:	3301      	adds	r3, #1
 800635a:	4a03      	ldr	r2, [pc, #12]	@ (8006368 <vTaskSuspendAll+0x18>)
 800635c:	6013      	str	r3, [r2, #0]

	/* Enforces ordering for ports and optimised compilers that may otherwise place
	the above increment elsewhere. */
	portMEMORY_BARRIER();
}
 800635e:	bf00      	nop
 8006360:	46bd      	mov	sp, r7
 8006362:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006366:	4770      	bx	lr
 8006368:	20000540 	.word	0x20000540

0800636c <xTaskResumeAll>:

#endif /* configUSE_TICKLESS_IDLE */
/*----------------------------------------------------------*/

BaseType_t xTaskResumeAll( void )
{
 800636c:	b580      	push	{r7, lr}
 800636e:	b084      	sub	sp, #16
 8006370:	af00      	add	r7, sp, #0
TCB_t *pxTCB = NULL;
 8006372:	2300      	movs	r3, #0
 8006374:	60fb      	str	r3, [r7, #12]
BaseType_t xAlreadyYielded = pdFALSE;
 8006376:	2300      	movs	r3, #0
 8006378:	60bb      	str	r3, [r7, #8]

	/* If uxSchedulerSuspended is zero then this function does not match a
	previous call to vTaskSuspendAll(). */
	configASSERT( uxSchedulerSuspended );
 800637a:	4b42      	ldr	r3, [pc, #264]	@ (8006484 <xTaskResumeAll+0x118>)
 800637c:	681b      	ldr	r3, [r3, #0]
 800637e:	2b00      	cmp	r3, #0
 8006380:	d10b      	bne.n	800639a <xTaskResumeAll+0x2e>
	__asm volatile
 8006382:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8006386:	f383 8811 	msr	BASEPRI, r3
 800638a:	f3bf 8f6f 	isb	sy
 800638e:	f3bf 8f4f 	dsb	sy
 8006392:	603b      	str	r3, [r7, #0]
}
 8006394:	bf00      	nop
 8006396:	bf00      	nop
 8006398:	e7fd      	b.n	8006396 <xTaskResumeAll+0x2a>
	/* It is possible that an ISR caused a task to be removed from an event
	list while the scheduler was suspended.  If this was the case then the
	removed task will have been added to the xPendingReadyList.  Once the
	scheduler has been resumed it is safe to move all the pending ready
	tasks from this list into their appropriate ready list. */
	taskENTER_CRITICAL();
 800639a:	f000 fee5 	bl	8007168 <vPortEnterCritical>
	{
		--uxSchedulerSuspended;
 800639e:	4b39      	ldr	r3, [pc, #228]	@ (8006484 <xTaskResumeAll+0x118>)
 80063a0:	681b      	ldr	r3, [r3, #0]
 80063a2:	3b01      	subs	r3, #1
 80063a4:	4a37      	ldr	r2, [pc, #220]	@ (8006484 <xTaskResumeAll+0x118>)
 80063a6:	6013      	str	r3, [r2, #0]

		if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 80063a8:	4b36      	ldr	r3, [pc, #216]	@ (8006484 <xTaskResumeAll+0x118>)
 80063aa:	681b      	ldr	r3, [r3, #0]
 80063ac:	2b00      	cmp	r3, #0
 80063ae:	d161      	bne.n	8006474 <xTaskResumeAll+0x108>
		{
			if( uxCurrentNumberOfTasks > ( UBaseType_t ) 0U )
 80063b0:	4b35      	ldr	r3, [pc, #212]	@ (8006488 <xTaskResumeAll+0x11c>)
 80063b2:	681b      	ldr	r3, [r3, #0]
 80063b4:	2b00      	cmp	r3, #0
 80063b6:	d05d      	beq.n	8006474 <xTaskResumeAll+0x108>
			{
				/* Move any readied tasks from the pending list into the
				appropriate ready list. */
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 80063b8:	e02e      	b.n	8006418 <xTaskResumeAll+0xac>
				{
					pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xPendingReadyList ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 80063ba:	4b34      	ldr	r3, [pc, #208]	@ (800648c <xTaskResumeAll+0x120>)
 80063bc:	68db      	ldr	r3, [r3, #12]
 80063be:	68db      	ldr	r3, [r3, #12]
 80063c0:	60fb      	str	r3, [r7, #12]
					( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 80063c2:	68fb      	ldr	r3, [r7, #12]
 80063c4:	3318      	adds	r3, #24
 80063c6:	4618      	mov	r0, r3
 80063c8:	f7ff f8a5 	bl	8005516 <uxListRemove>
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 80063cc:	68fb      	ldr	r3, [r7, #12]
 80063ce:	3304      	adds	r3, #4
 80063d0:	4618      	mov	r0, r3
 80063d2:	f7ff f8a0 	bl	8005516 <uxListRemove>
					prvAddTaskToReadyList( pxTCB );
 80063d6:	68fb      	ldr	r3, [r7, #12]
 80063d8:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80063da:	2201      	movs	r2, #1
 80063dc:	409a      	lsls	r2, r3
 80063de:	4b2c      	ldr	r3, [pc, #176]	@ (8006490 <xTaskResumeAll+0x124>)
 80063e0:	681b      	ldr	r3, [r3, #0]
 80063e2:	4313      	orrs	r3, r2
 80063e4:	4a2a      	ldr	r2, [pc, #168]	@ (8006490 <xTaskResumeAll+0x124>)
 80063e6:	6013      	str	r3, [r2, #0]
 80063e8:	68fb      	ldr	r3, [r7, #12]
 80063ea:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 80063ec:	4613      	mov	r3, r2
 80063ee:	009b      	lsls	r3, r3, #2
 80063f0:	4413      	add	r3, r2
 80063f2:	009b      	lsls	r3, r3, #2
 80063f4:	4a27      	ldr	r2, [pc, #156]	@ (8006494 <xTaskResumeAll+0x128>)
 80063f6:	441a      	add	r2, r3
 80063f8:	68fb      	ldr	r3, [r7, #12]
 80063fa:	3304      	adds	r3, #4
 80063fc:	4619      	mov	r1, r3
 80063fe:	4610      	mov	r0, r2
 8006400:	f7ff f82c 	bl	800545c <vListInsertEnd>

					/* If the moved task has a priority higher than the current
					task then a yield must be performed. */
					if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 8006404:	68fb      	ldr	r3, [r7, #12]
 8006406:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8006408:	4b23      	ldr	r3, [pc, #140]	@ (8006498 <xTaskResumeAll+0x12c>)
 800640a:	681b      	ldr	r3, [r3, #0]
 800640c:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800640e:	429a      	cmp	r2, r3
 8006410:	d302      	bcc.n	8006418 <xTaskResumeAll+0xac>
					{
						xYieldPending = pdTRUE;
 8006412:	4b22      	ldr	r3, [pc, #136]	@ (800649c <xTaskResumeAll+0x130>)
 8006414:	2201      	movs	r2, #1
 8006416:	601a      	str	r2, [r3, #0]
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 8006418:	4b1c      	ldr	r3, [pc, #112]	@ (800648c <xTaskResumeAll+0x120>)
 800641a:	681b      	ldr	r3, [r3, #0]
 800641c:	2b00      	cmp	r3, #0
 800641e:	d1cc      	bne.n	80063ba <xTaskResumeAll+0x4e>
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( pxTCB != NULL )
 8006420:	68fb      	ldr	r3, [r7, #12]
 8006422:	2b00      	cmp	r3, #0
 8006424:	d001      	beq.n	800642a <xTaskResumeAll+0xbe>
					which may have prevented the next unblock time from being
					re-calculated, in which case re-calculate it now.  Mainly
					important for low power tickless implementations, where
					this can prevent an unnecessary exit from low power
					state. */
					prvResetNextTaskUnblockTime();
 8006426:	f000 fb29 	bl	8006a7c <prvResetNextTaskUnblockTime>
				/* If any ticks occurred while the scheduler was suspended then
				they should be processed now.  This ensures the tick count does
				not	slip, and that any delayed tasks are resumed at the correct
				time. */
				{
					TickType_t xPendedCounts = xPendedTicks; /* Non-volatile copy. */
 800642a:	4b1d      	ldr	r3, [pc, #116]	@ (80064a0 <xTaskResumeAll+0x134>)
 800642c:	681b      	ldr	r3, [r3, #0]
 800642e:	607b      	str	r3, [r7, #4]

					if( xPendedCounts > ( TickType_t ) 0U )
 8006430:	687b      	ldr	r3, [r7, #4]
 8006432:	2b00      	cmp	r3, #0
 8006434:	d010      	beq.n	8006458 <xTaskResumeAll+0xec>
					{
						do
						{
							if( xTaskIncrementTick() != pdFALSE )
 8006436:	f000 f837 	bl	80064a8 <xTaskIncrementTick>
 800643a:	4603      	mov	r3, r0
 800643c:	2b00      	cmp	r3, #0
 800643e:	d002      	beq.n	8006446 <xTaskResumeAll+0xda>
							{
								xYieldPending = pdTRUE;
 8006440:	4b16      	ldr	r3, [pc, #88]	@ (800649c <xTaskResumeAll+0x130>)
 8006442:	2201      	movs	r2, #1
 8006444:	601a      	str	r2, [r3, #0]
							}
							else
							{
								mtCOVERAGE_TEST_MARKER();
							}
							--xPendedCounts;
 8006446:	687b      	ldr	r3, [r7, #4]
 8006448:	3b01      	subs	r3, #1
 800644a:	607b      	str	r3, [r7, #4]
						} while( xPendedCounts > ( TickType_t ) 0U );
 800644c:	687b      	ldr	r3, [r7, #4]
 800644e:	2b00      	cmp	r3, #0
 8006450:	d1f1      	bne.n	8006436 <xTaskResumeAll+0xca>

						xPendedTicks = 0;
 8006452:	4b13      	ldr	r3, [pc, #76]	@ (80064a0 <xTaskResumeAll+0x134>)
 8006454:	2200      	movs	r2, #0
 8006456:	601a      	str	r2, [r3, #0]
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( xYieldPending != pdFALSE )
 8006458:	4b10      	ldr	r3, [pc, #64]	@ (800649c <xTaskResumeAll+0x130>)
 800645a:	681b      	ldr	r3, [r3, #0]
 800645c:	2b00      	cmp	r3, #0
 800645e:	d009      	beq.n	8006474 <xTaskResumeAll+0x108>
				{
					#if( configUSE_PREEMPTION != 0 )
					{
						xAlreadyYielded = pdTRUE;
 8006460:	2301      	movs	r3, #1
 8006462:	60bb      	str	r3, [r7, #8]
					}
					#endif
					taskYIELD_IF_USING_PREEMPTION();
 8006464:	4b0f      	ldr	r3, [pc, #60]	@ (80064a4 <xTaskResumeAll+0x138>)
 8006466:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 800646a:	601a      	str	r2, [r3, #0]
 800646c:	f3bf 8f4f 	dsb	sy
 8006470:	f3bf 8f6f 	isb	sy
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
	taskEXIT_CRITICAL();
 8006474:	f000 feaa 	bl	80071cc <vPortExitCritical>

	return xAlreadyYielded;
 8006478:	68bb      	ldr	r3, [r7, #8]
}
 800647a:	4618      	mov	r0, r3
 800647c:	3710      	adds	r7, #16
 800647e:	46bd      	mov	sp, r7
 8006480:	bd80      	pop	{r7, pc}
 8006482:	bf00      	nop
 8006484:	20000540 	.word	0x20000540
 8006488:	20000518 	.word	0x20000518
 800648c:	200004d8 	.word	0x200004d8
 8006490:	20000520 	.word	0x20000520
 8006494:	2000041c 	.word	0x2000041c
 8006498:	20000418 	.word	0x20000418
 800649c:	2000052c 	.word	0x2000052c
 80064a0:	20000528 	.word	0x20000528
 80064a4:	e000ed04 	.word	0xe000ed04

080064a8 <xTaskIncrementTick>:

#endif /* INCLUDE_xTaskAbortDelay */
/*----------------------------------------------------------*/

BaseType_t xTaskIncrementTick( void )
{
 80064a8:	b580      	push	{r7, lr}
 80064aa:	b086      	sub	sp, #24
 80064ac:	af00      	add	r7, sp, #0
TCB_t * pxTCB;
TickType_t xItemValue;
BaseType_t xSwitchRequired = pdFALSE;
 80064ae:	2300      	movs	r3, #0
 80064b0:	617b      	str	r3, [r7, #20]

	/* Called by the portable layer each time a tick interrupt occurs.
	Increments the tick then checks to see if the new tick value will cause any
	tasks to be unblocked. */
	traceTASK_INCREMENT_TICK( xTickCount );
	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 80064b2:	4b4f      	ldr	r3, [pc, #316]	@ (80065f0 <xTaskIncrementTick+0x148>)
 80064b4:	681b      	ldr	r3, [r3, #0]
 80064b6:	2b00      	cmp	r3, #0
 80064b8:	f040 808f 	bne.w	80065da <xTaskIncrementTick+0x132>
	{
		/* Minor optimisation.  The tick count cannot change in this
		block. */
		const TickType_t xConstTickCount = xTickCount + ( TickType_t ) 1;
 80064bc:	4b4d      	ldr	r3, [pc, #308]	@ (80065f4 <xTaskIncrementTick+0x14c>)
 80064be:	681b      	ldr	r3, [r3, #0]
 80064c0:	3301      	adds	r3, #1
 80064c2:	613b      	str	r3, [r7, #16]

		/* Increment the RTOS tick, switching the delayed and overflowed
		delayed lists if it wraps to 0. */
		xTickCount = xConstTickCount;
 80064c4:	4a4b      	ldr	r2, [pc, #300]	@ (80065f4 <xTaskIncrementTick+0x14c>)
 80064c6:	693b      	ldr	r3, [r7, #16]
 80064c8:	6013      	str	r3, [r2, #0]

		if( xConstTickCount == ( TickType_t ) 0U ) /*lint !e774 'if' does not always evaluate to false as it is looking for an overflow. */
 80064ca:	693b      	ldr	r3, [r7, #16]
 80064cc:	2b00      	cmp	r3, #0
 80064ce:	d121      	bne.n	8006514 <xTaskIncrementTick+0x6c>
		{
			taskSWITCH_DELAYED_LISTS();
 80064d0:	4b49      	ldr	r3, [pc, #292]	@ (80065f8 <xTaskIncrementTick+0x150>)
 80064d2:	681b      	ldr	r3, [r3, #0]
 80064d4:	681b      	ldr	r3, [r3, #0]
 80064d6:	2b00      	cmp	r3, #0
 80064d8:	d00b      	beq.n	80064f2 <xTaskIncrementTick+0x4a>
	__asm volatile
 80064da:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80064de:	f383 8811 	msr	BASEPRI, r3
 80064e2:	f3bf 8f6f 	isb	sy
 80064e6:	f3bf 8f4f 	dsb	sy
 80064ea:	603b      	str	r3, [r7, #0]
}
 80064ec:	bf00      	nop
 80064ee:	bf00      	nop
 80064f0:	e7fd      	b.n	80064ee <xTaskIncrementTick+0x46>
 80064f2:	4b41      	ldr	r3, [pc, #260]	@ (80065f8 <xTaskIncrementTick+0x150>)
 80064f4:	681b      	ldr	r3, [r3, #0]
 80064f6:	60fb      	str	r3, [r7, #12]
 80064f8:	4b40      	ldr	r3, [pc, #256]	@ (80065fc <xTaskIncrementTick+0x154>)
 80064fa:	681b      	ldr	r3, [r3, #0]
 80064fc:	4a3e      	ldr	r2, [pc, #248]	@ (80065f8 <xTaskIncrementTick+0x150>)
 80064fe:	6013      	str	r3, [r2, #0]
 8006500:	4a3e      	ldr	r2, [pc, #248]	@ (80065fc <xTaskIncrementTick+0x154>)
 8006502:	68fb      	ldr	r3, [r7, #12]
 8006504:	6013      	str	r3, [r2, #0]
 8006506:	4b3e      	ldr	r3, [pc, #248]	@ (8006600 <xTaskIncrementTick+0x158>)
 8006508:	681b      	ldr	r3, [r3, #0]
 800650a:	3301      	adds	r3, #1
 800650c:	4a3c      	ldr	r2, [pc, #240]	@ (8006600 <xTaskIncrementTick+0x158>)
 800650e:	6013      	str	r3, [r2, #0]
 8006510:	f000 fab4 	bl	8006a7c <prvResetNextTaskUnblockTime>

		/* See if this tick has made a timeout expire.  Tasks are stored in
		the	queue in the order of their wake time - meaning once one task
		has been found whose block time has not expired there is no need to
		look any further down the list. */
		if( xConstTickCount >= xNextTaskUnblockTime )
 8006514:	4b3b      	ldr	r3, [pc, #236]	@ (8006604 <xTaskIncrementTick+0x15c>)
 8006516:	681b      	ldr	r3, [r3, #0]
 8006518:	693a      	ldr	r2, [r7, #16]
 800651a:	429a      	cmp	r2, r3
 800651c:	d348      	bcc.n	80065b0 <xTaskIncrementTick+0x108>
		{
			for( ;; )
			{
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 800651e:	4b36      	ldr	r3, [pc, #216]	@ (80065f8 <xTaskIncrementTick+0x150>)
 8006520:	681b      	ldr	r3, [r3, #0]
 8006522:	681b      	ldr	r3, [r3, #0]
 8006524:	2b00      	cmp	r3, #0
 8006526:	d104      	bne.n	8006532 <xTaskIncrementTick+0x8a>
					/* The delayed list is empty.  Set xNextTaskUnblockTime
					to the maximum possible value so it is extremely
					unlikely that the
					if( xTickCount >= xNextTaskUnblockTime ) test will pass
					next time through. */
					xNextTaskUnblockTime = portMAX_DELAY; /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8006528:	4b36      	ldr	r3, [pc, #216]	@ (8006604 <xTaskIncrementTick+0x15c>)
 800652a:	f04f 32ff 	mov.w	r2, #4294967295
 800652e:	601a      	str	r2, [r3, #0]
					break;
 8006530:	e03e      	b.n	80065b0 <xTaskIncrementTick+0x108>
				{
					/* The delayed list is not empty, get the value of the
					item at the head of the delayed list.  This is the time
					at which the task at the head of the delayed list must
					be removed from the Blocked state. */
					pxTCB = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8006532:	4b31      	ldr	r3, [pc, #196]	@ (80065f8 <xTaskIncrementTick+0x150>)
 8006534:	681b      	ldr	r3, [r3, #0]
 8006536:	68db      	ldr	r3, [r3, #12]
 8006538:	68db      	ldr	r3, [r3, #12]
 800653a:	60bb      	str	r3, [r7, #8]
					xItemValue = listGET_LIST_ITEM_VALUE( &( pxTCB->xStateListItem ) );
 800653c:	68bb      	ldr	r3, [r7, #8]
 800653e:	685b      	ldr	r3, [r3, #4]
 8006540:	607b      	str	r3, [r7, #4]

					if( xConstTickCount < xItemValue )
 8006542:	693a      	ldr	r2, [r7, #16]
 8006544:	687b      	ldr	r3, [r7, #4]
 8006546:	429a      	cmp	r2, r3
 8006548:	d203      	bcs.n	8006552 <xTaskIncrementTick+0xaa>
						/* It is not time to unblock this item yet, but the
						item value is the time at which the task at the head
						of the blocked list must be removed from the Blocked
						state -	so record the item value in
						xNextTaskUnblockTime. */
						xNextTaskUnblockTime = xItemValue;
 800654a:	4a2e      	ldr	r2, [pc, #184]	@ (8006604 <xTaskIncrementTick+0x15c>)
 800654c:	687b      	ldr	r3, [r7, #4]
 800654e:	6013      	str	r3, [r2, #0]
						break; /*lint !e9011 Code structure here is deedmed easier to understand with multiple breaks. */
 8006550:	e02e      	b.n	80065b0 <xTaskIncrementTick+0x108>
					{
						mtCOVERAGE_TEST_MARKER();
					}

					/* It is time to remove the item from the Blocked state. */
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 8006552:	68bb      	ldr	r3, [r7, #8]
 8006554:	3304      	adds	r3, #4
 8006556:	4618      	mov	r0, r3
 8006558:	f7fe ffdd 	bl	8005516 <uxListRemove>

					/* Is the task waiting on an event also?  If so remove
					it from the event list. */
					if( listLIST_ITEM_CONTAINER( &( pxTCB->xEventListItem ) ) != NULL )
 800655c:	68bb      	ldr	r3, [r7, #8]
 800655e:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8006560:	2b00      	cmp	r3, #0
 8006562:	d004      	beq.n	800656e <xTaskIncrementTick+0xc6>
					{
						( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 8006564:	68bb      	ldr	r3, [r7, #8]
 8006566:	3318      	adds	r3, #24
 8006568:	4618      	mov	r0, r3
 800656a:	f7fe ffd4 	bl	8005516 <uxListRemove>
						mtCOVERAGE_TEST_MARKER();
					}

					/* Place the unblocked task into the appropriate ready
					list. */
					prvAddTaskToReadyList( pxTCB );
 800656e:	68bb      	ldr	r3, [r7, #8]
 8006570:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8006572:	2201      	movs	r2, #1
 8006574:	409a      	lsls	r2, r3
 8006576:	4b24      	ldr	r3, [pc, #144]	@ (8006608 <xTaskIncrementTick+0x160>)
 8006578:	681b      	ldr	r3, [r3, #0]
 800657a:	4313      	orrs	r3, r2
 800657c:	4a22      	ldr	r2, [pc, #136]	@ (8006608 <xTaskIncrementTick+0x160>)
 800657e:	6013      	str	r3, [r2, #0]
 8006580:	68bb      	ldr	r3, [r7, #8]
 8006582:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8006584:	4613      	mov	r3, r2
 8006586:	009b      	lsls	r3, r3, #2
 8006588:	4413      	add	r3, r2
 800658a:	009b      	lsls	r3, r3, #2
 800658c:	4a1f      	ldr	r2, [pc, #124]	@ (800660c <xTaskIncrementTick+0x164>)
 800658e:	441a      	add	r2, r3
 8006590:	68bb      	ldr	r3, [r7, #8]
 8006592:	3304      	adds	r3, #4
 8006594:	4619      	mov	r1, r3
 8006596:	4610      	mov	r0, r2
 8006598:	f7fe ff60 	bl	800545c <vListInsertEnd>
					{
						/* Preemption is on, but a context switch should
						only be performed if the unblocked task has a
						priority that is equal to or higher than the
						currently executing task. */
						if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 800659c:	68bb      	ldr	r3, [r7, #8]
 800659e:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 80065a0:	4b1b      	ldr	r3, [pc, #108]	@ (8006610 <xTaskIncrementTick+0x168>)
 80065a2:	681b      	ldr	r3, [r3, #0]
 80065a4:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80065a6:	429a      	cmp	r2, r3
 80065a8:	d3b9      	bcc.n	800651e <xTaskIncrementTick+0x76>
						{
							xSwitchRequired = pdTRUE;
 80065aa:	2301      	movs	r3, #1
 80065ac:	617b      	str	r3, [r7, #20]
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 80065ae:	e7b6      	b.n	800651e <xTaskIncrementTick+0x76>
		/* Tasks of equal priority to the currently running task will share
		processing time (time slice) if preemption is on, and the application
		writer has not explicitly turned time slicing off. */
		#if ( ( configUSE_PREEMPTION == 1 ) && ( configUSE_TIME_SLICING == 1 ) )
		{
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ pxCurrentTCB->uxPriority ] ) ) > ( UBaseType_t ) 1 )
 80065b0:	4b17      	ldr	r3, [pc, #92]	@ (8006610 <xTaskIncrementTick+0x168>)
 80065b2:	681b      	ldr	r3, [r3, #0]
 80065b4:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 80065b6:	4915      	ldr	r1, [pc, #84]	@ (800660c <xTaskIncrementTick+0x164>)
 80065b8:	4613      	mov	r3, r2
 80065ba:	009b      	lsls	r3, r3, #2
 80065bc:	4413      	add	r3, r2
 80065be:	009b      	lsls	r3, r3, #2
 80065c0:	440b      	add	r3, r1
 80065c2:	681b      	ldr	r3, [r3, #0]
 80065c4:	2b01      	cmp	r3, #1
 80065c6:	d901      	bls.n	80065cc <xTaskIncrementTick+0x124>
			{
				xSwitchRequired = pdTRUE;
 80065c8:	2301      	movs	r3, #1
 80065ca:	617b      	str	r3, [r7, #20]
		}
		#endif /* configUSE_TICK_HOOK */

		#if ( configUSE_PREEMPTION == 1 )
		{
			if( xYieldPending != pdFALSE )
 80065cc:	4b11      	ldr	r3, [pc, #68]	@ (8006614 <xTaskIncrementTick+0x16c>)
 80065ce:	681b      	ldr	r3, [r3, #0]
 80065d0:	2b00      	cmp	r3, #0
 80065d2:	d007      	beq.n	80065e4 <xTaskIncrementTick+0x13c>
			{
				xSwitchRequired = pdTRUE;
 80065d4:	2301      	movs	r3, #1
 80065d6:	617b      	str	r3, [r7, #20]
 80065d8:	e004      	b.n	80065e4 <xTaskIncrementTick+0x13c>
		}
		#endif /* configUSE_PREEMPTION */
	}
	else
	{
		++xPendedTicks;
 80065da:	4b0f      	ldr	r3, [pc, #60]	@ (8006618 <xTaskIncrementTick+0x170>)
 80065dc:	681b      	ldr	r3, [r3, #0]
 80065de:	3301      	adds	r3, #1
 80065e0:	4a0d      	ldr	r2, [pc, #52]	@ (8006618 <xTaskIncrementTick+0x170>)
 80065e2:	6013      	str	r3, [r2, #0]
			vApplicationTickHook();
		}
		#endif
	}

	return xSwitchRequired;
 80065e4:	697b      	ldr	r3, [r7, #20]
}
 80065e6:	4618      	mov	r0, r3
 80065e8:	3718      	adds	r7, #24
 80065ea:	46bd      	mov	sp, r7
 80065ec:	bd80      	pop	{r7, pc}
 80065ee:	bf00      	nop
 80065f0:	20000540 	.word	0x20000540
 80065f4:	2000051c 	.word	0x2000051c
 80065f8:	200004d0 	.word	0x200004d0
 80065fc:	200004d4 	.word	0x200004d4
 8006600:	20000530 	.word	0x20000530
 8006604:	20000538 	.word	0x20000538
 8006608:	20000520 	.word	0x20000520
 800660c:	2000041c 	.word	0x2000041c
 8006610:	20000418 	.word	0x20000418
 8006614:	2000052c 	.word	0x2000052c
 8006618:	20000528 	.word	0x20000528

0800661c <vTaskSwitchContext>:

#endif /* configUSE_APPLICATION_TASK_TAG */
/*-----------------------------------------------------------*/

void vTaskSwitchContext( void )
{
 800661c:	b480      	push	{r7}
 800661e:	b087      	sub	sp, #28
 8006620:	af00      	add	r7, sp, #0
	if( uxSchedulerSuspended != ( UBaseType_t ) pdFALSE )
 8006622:	4b2a      	ldr	r3, [pc, #168]	@ (80066cc <vTaskSwitchContext+0xb0>)
 8006624:	681b      	ldr	r3, [r3, #0]
 8006626:	2b00      	cmp	r3, #0
 8006628:	d003      	beq.n	8006632 <vTaskSwitchContext+0x16>
	{
		/* The scheduler is currently suspended - do not allow a context
		switch. */
		xYieldPending = pdTRUE;
 800662a:	4b29      	ldr	r3, [pc, #164]	@ (80066d0 <vTaskSwitchContext+0xb4>)
 800662c:	2201      	movs	r2, #1
 800662e:	601a      	str	r2, [r3, #0]
			for additional information. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
		}
		#endif /* configUSE_NEWLIB_REENTRANT */
	}
}
 8006630:	e045      	b.n	80066be <vTaskSwitchContext+0xa2>
		xYieldPending = pdFALSE;
 8006632:	4b27      	ldr	r3, [pc, #156]	@ (80066d0 <vTaskSwitchContext+0xb4>)
 8006634:	2200      	movs	r2, #0
 8006636:	601a      	str	r2, [r3, #0]
		taskSELECT_HIGHEST_PRIORITY_TASK(); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8006638:	4b26      	ldr	r3, [pc, #152]	@ (80066d4 <vTaskSwitchContext+0xb8>)
 800663a:	681b      	ldr	r3, [r3, #0]
 800663c:	60fb      	str	r3, [r7, #12]
		__asm volatile ( "clz %0, %1" : "=r" ( ucReturn ) : "r" ( ulBitmap ) : "memory" );
 800663e:	68fb      	ldr	r3, [r7, #12]
 8006640:	fab3 f383 	clz	r3, r3
 8006644:	72fb      	strb	r3, [r7, #11]
		return ucReturn;
 8006646:	7afb      	ldrb	r3, [r7, #11]
 8006648:	f1c3 031f 	rsb	r3, r3, #31
 800664c:	617b      	str	r3, [r7, #20]
 800664e:	4922      	ldr	r1, [pc, #136]	@ (80066d8 <vTaskSwitchContext+0xbc>)
 8006650:	697a      	ldr	r2, [r7, #20]
 8006652:	4613      	mov	r3, r2
 8006654:	009b      	lsls	r3, r3, #2
 8006656:	4413      	add	r3, r2
 8006658:	009b      	lsls	r3, r3, #2
 800665a:	440b      	add	r3, r1
 800665c:	681b      	ldr	r3, [r3, #0]
 800665e:	2b00      	cmp	r3, #0
 8006660:	d10b      	bne.n	800667a <vTaskSwitchContext+0x5e>
	__asm volatile
 8006662:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8006666:	f383 8811 	msr	BASEPRI, r3
 800666a:	f3bf 8f6f 	isb	sy
 800666e:	f3bf 8f4f 	dsb	sy
 8006672:	607b      	str	r3, [r7, #4]
}
 8006674:	bf00      	nop
 8006676:	bf00      	nop
 8006678:	e7fd      	b.n	8006676 <vTaskSwitchContext+0x5a>
 800667a:	697a      	ldr	r2, [r7, #20]
 800667c:	4613      	mov	r3, r2
 800667e:	009b      	lsls	r3, r3, #2
 8006680:	4413      	add	r3, r2
 8006682:	009b      	lsls	r3, r3, #2
 8006684:	4a14      	ldr	r2, [pc, #80]	@ (80066d8 <vTaskSwitchContext+0xbc>)
 8006686:	4413      	add	r3, r2
 8006688:	613b      	str	r3, [r7, #16]
 800668a:	693b      	ldr	r3, [r7, #16]
 800668c:	685b      	ldr	r3, [r3, #4]
 800668e:	685a      	ldr	r2, [r3, #4]
 8006690:	693b      	ldr	r3, [r7, #16]
 8006692:	605a      	str	r2, [r3, #4]
 8006694:	693b      	ldr	r3, [r7, #16]
 8006696:	685a      	ldr	r2, [r3, #4]
 8006698:	693b      	ldr	r3, [r7, #16]
 800669a:	3308      	adds	r3, #8
 800669c:	429a      	cmp	r2, r3
 800669e:	d104      	bne.n	80066aa <vTaskSwitchContext+0x8e>
 80066a0:	693b      	ldr	r3, [r7, #16]
 80066a2:	685b      	ldr	r3, [r3, #4]
 80066a4:	685a      	ldr	r2, [r3, #4]
 80066a6:	693b      	ldr	r3, [r7, #16]
 80066a8:	605a      	str	r2, [r3, #4]
 80066aa:	693b      	ldr	r3, [r7, #16]
 80066ac:	685b      	ldr	r3, [r3, #4]
 80066ae:	68db      	ldr	r3, [r3, #12]
 80066b0:	4a0a      	ldr	r2, [pc, #40]	@ (80066dc <vTaskSwitchContext+0xc0>)
 80066b2:	6013      	str	r3, [r2, #0]
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
 80066b4:	4b09      	ldr	r3, [pc, #36]	@ (80066dc <vTaskSwitchContext+0xc0>)
 80066b6:	681b      	ldr	r3, [r3, #0]
 80066b8:	334c      	adds	r3, #76	@ 0x4c
 80066ba:	4a09      	ldr	r2, [pc, #36]	@ (80066e0 <vTaskSwitchContext+0xc4>)
 80066bc:	6013      	str	r3, [r2, #0]
}
 80066be:	bf00      	nop
 80066c0:	371c      	adds	r7, #28
 80066c2:	46bd      	mov	sp, r7
 80066c4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80066c8:	4770      	bx	lr
 80066ca:	bf00      	nop
 80066cc:	20000540 	.word	0x20000540
 80066d0:	2000052c 	.word	0x2000052c
 80066d4:	20000520 	.word	0x20000520
 80066d8:	2000041c 	.word	0x2000041c
 80066dc:	20000418 	.word	0x20000418
 80066e0:	20000010 	.word	0x20000010

080066e4 <vTaskPlaceOnEventList>:
/*-----------------------------------------------------------*/

void vTaskPlaceOnEventList( List_t * const pxEventList, const TickType_t xTicksToWait )
{
 80066e4:	b580      	push	{r7, lr}
 80066e6:	b084      	sub	sp, #16
 80066e8:	af00      	add	r7, sp, #0
 80066ea:	6078      	str	r0, [r7, #4]
 80066ec:	6039      	str	r1, [r7, #0]
	configASSERT( pxEventList );
 80066ee:	687b      	ldr	r3, [r7, #4]
 80066f0:	2b00      	cmp	r3, #0
 80066f2:	d10b      	bne.n	800670c <vTaskPlaceOnEventList+0x28>
	__asm volatile
 80066f4:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80066f8:	f383 8811 	msr	BASEPRI, r3
 80066fc:	f3bf 8f6f 	isb	sy
 8006700:	f3bf 8f4f 	dsb	sy
 8006704:	60fb      	str	r3, [r7, #12]
}
 8006706:	bf00      	nop
 8006708:	bf00      	nop
 800670a:	e7fd      	b.n	8006708 <vTaskPlaceOnEventList+0x24>

	/* Place the event list item of the TCB in the appropriate event list.
	This is placed in the list in priority order so the highest priority task
	is the first to be woken by the event.  The queue that contains the event
	list is locked, preventing simultaneous access from interrupts. */
	vListInsert( pxEventList, &( pxCurrentTCB->xEventListItem ) );
 800670c:	4b07      	ldr	r3, [pc, #28]	@ (800672c <vTaskPlaceOnEventList+0x48>)
 800670e:	681b      	ldr	r3, [r3, #0]
 8006710:	3318      	adds	r3, #24
 8006712:	4619      	mov	r1, r3
 8006714:	6878      	ldr	r0, [r7, #4]
 8006716:	f7fe fec5 	bl	80054a4 <vListInsert>

	prvAddCurrentTaskToDelayedList( xTicksToWait, pdTRUE );
 800671a:	2101      	movs	r1, #1
 800671c:	6838      	ldr	r0, [r7, #0]
 800671e:	f000 fb8d 	bl	8006e3c <prvAddCurrentTaskToDelayedList>
}
 8006722:	bf00      	nop
 8006724:	3710      	adds	r7, #16
 8006726:	46bd      	mov	sp, r7
 8006728:	bd80      	pop	{r7, pc}
 800672a:	bf00      	nop
 800672c:	20000418 	.word	0x20000418

08006730 <xTaskRemoveFromEventList>:

#endif /* configUSE_TIMERS */
/*-----------------------------------------------------------*/

BaseType_t xTaskRemoveFromEventList( const List_t * const pxEventList )
{
 8006730:	b580      	push	{r7, lr}
 8006732:	b086      	sub	sp, #24
 8006734:	af00      	add	r7, sp, #0
 8006736:	6078      	str	r0, [r7, #4]
	get called - the lock count on the queue will get modified instead.  This
	means exclusive access to the event list is guaranteed here.

	This function assumes that a check has already been made to ensure that
	pxEventList is not empty. */
	pxUnblockedTCB = listGET_OWNER_OF_HEAD_ENTRY( pxEventList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8006738:	687b      	ldr	r3, [r7, #4]
 800673a:	68db      	ldr	r3, [r3, #12]
 800673c:	68db      	ldr	r3, [r3, #12]
 800673e:	613b      	str	r3, [r7, #16]
	configASSERT( pxUnblockedTCB );
 8006740:	693b      	ldr	r3, [r7, #16]
 8006742:	2b00      	cmp	r3, #0
 8006744:	d10b      	bne.n	800675e <xTaskRemoveFromEventList+0x2e>
	__asm volatile
 8006746:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800674a:	f383 8811 	msr	BASEPRI, r3
 800674e:	f3bf 8f6f 	isb	sy
 8006752:	f3bf 8f4f 	dsb	sy
 8006756:	60fb      	str	r3, [r7, #12]
}
 8006758:	bf00      	nop
 800675a:	bf00      	nop
 800675c:	e7fd      	b.n	800675a <xTaskRemoveFromEventList+0x2a>
	( void ) uxListRemove( &( pxUnblockedTCB->xEventListItem ) );
 800675e:	693b      	ldr	r3, [r7, #16]
 8006760:	3318      	adds	r3, #24
 8006762:	4618      	mov	r0, r3
 8006764:	f7fe fed7 	bl	8005516 <uxListRemove>

	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8006768:	4b1d      	ldr	r3, [pc, #116]	@ (80067e0 <xTaskRemoveFromEventList+0xb0>)
 800676a:	681b      	ldr	r3, [r3, #0]
 800676c:	2b00      	cmp	r3, #0
 800676e:	d11c      	bne.n	80067aa <xTaskRemoveFromEventList+0x7a>
	{
		( void ) uxListRemove( &( pxUnblockedTCB->xStateListItem ) );
 8006770:	693b      	ldr	r3, [r7, #16]
 8006772:	3304      	adds	r3, #4
 8006774:	4618      	mov	r0, r3
 8006776:	f7fe fece 	bl	8005516 <uxListRemove>
		prvAddTaskToReadyList( pxUnblockedTCB );
 800677a:	693b      	ldr	r3, [r7, #16]
 800677c:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800677e:	2201      	movs	r2, #1
 8006780:	409a      	lsls	r2, r3
 8006782:	4b18      	ldr	r3, [pc, #96]	@ (80067e4 <xTaskRemoveFromEventList+0xb4>)
 8006784:	681b      	ldr	r3, [r3, #0]
 8006786:	4313      	orrs	r3, r2
 8006788:	4a16      	ldr	r2, [pc, #88]	@ (80067e4 <xTaskRemoveFromEventList+0xb4>)
 800678a:	6013      	str	r3, [r2, #0]
 800678c:	693b      	ldr	r3, [r7, #16]
 800678e:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8006790:	4613      	mov	r3, r2
 8006792:	009b      	lsls	r3, r3, #2
 8006794:	4413      	add	r3, r2
 8006796:	009b      	lsls	r3, r3, #2
 8006798:	4a13      	ldr	r2, [pc, #76]	@ (80067e8 <xTaskRemoveFromEventList+0xb8>)
 800679a:	441a      	add	r2, r3
 800679c:	693b      	ldr	r3, [r7, #16]
 800679e:	3304      	adds	r3, #4
 80067a0:	4619      	mov	r1, r3
 80067a2:	4610      	mov	r0, r2
 80067a4:	f7fe fe5a 	bl	800545c <vListInsertEnd>
 80067a8:	e005      	b.n	80067b6 <xTaskRemoveFromEventList+0x86>
	}
	else
	{
		/* The delayed and ready lists cannot be accessed, so hold this task
		pending until the scheduler is resumed. */
		vListInsertEnd( &( xPendingReadyList ), &( pxUnblockedTCB->xEventListItem ) );
 80067aa:	693b      	ldr	r3, [r7, #16]
 80067ac:	3318      	adds	r3, #24
 80067ae:	4619      	mov	r1, r3
 80067b0:	480e      	ldr	r0, [pc, #56]	@ (80067ec <xTaskRemoveFromEventList+0xbc>)
 80067b2:	f7fe fe53 	bl	800545c <vListInsertEnd>
	}

	if( pxUnblockedTCB->uxPriority > pxCurrentTCB->uxPriority )
 80067b6:	693b      	ldr	r3, [r7, #16]
 80067b8:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 80067ba:	4b0d      	ldr	r3, [pc, #52]	@ (80067f0 <xTaskRemoveFromEventList+0xc0>)
 80067bc:	681b      	ldr	r3, [r3, #0]
 80067be:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80067c0:	429a      	cmp	r2, r3
 80067c2:	d905      	bls.n	80067d0 <xTaskRemoveFromEventList+0xa0>
	{
		/* Return true if the task removed from the event list has a higher
		priority than the calling task.  This allows the calling task to know if
		it should force a context switch now. */
		xReturn = pdTRUE;
 80067c4:	2301      	movs	r3, #1
 80067c6:	617b      	str	r3, [r7, #20]

		/* Mark that a yield is pending in case the user is not using the
		"xHigherPriorityTaskWoken" parameter to an ISR safe FreeRTOS function. */
		xYieldPending = pdTRUE;
 80067c8:	4b0a      	ldr	r3, [pc, #40]	@ (80067f4 <xTaskRemoveFromEventList+0xc4>)
 80067ca:	2201      	movs	r2, #1
 80067cc:	601a      	str	r2, [r3, #0]
 80067ce:	e001      	b.n	80067d4 <xTaskRemoveFromEventList+0xa4>
	}
	else
	{
		xReturn = pdFALSE;
 80067d0:	2300      	movs	r3, #0
 80067d2:	617b      	str	r3, [r7, #20]
	}

	return xReturn;
 80067d4:	697b      	ldr	r3, [r7, #20]
}
 80067d6:	4618      	mov	r0, r3
 80067d8:	3718      	adds	r7, #24
 80067da:	46bd      	mov	sp, r7
 80067dc:	bd80      	pop	{r7, pc}
 80067de:	bf00      	nop
 80067e0:	20000540 	.word	0x20000540
 80067e4:	20000520 	.word	0x20000520
 80067e8:	2000041c 	.word	0x2000041c
 80067ec:	200004d8 	.word	0x200004d8
 80067f0:	20000418 	.word	0x20000418
 80067f4:	2000052c 	.word	0x2000052c

080067f8 <vTaskInternalSetTimeOutState>:
	taskEXIT_CRITICAL();
}
/*-----------------------------------------------------------*/

void vTaskInternalSetTimeOutState( TimeOut_t * const pxTimeOut )
{
 80067f8:	b480      	push	{r7}
 80067fa:	b083      	sub	sp, #12
 80067fc:	af00      	add	r7, sp, #0
 80067fe:	6078      	str	r0, [r7, #4]
	/* For internal use only as it does not use a critical section. */
	pxTimeOut->xOverflowCount = xNumOfOverflows;
 8006800:	4b06      	ldr	r3, [pc, #24]	@ (800681c <vTaskInternalSetTimeOutState+0x24>)
 8006802:	681a      	ldr	r2, [r3, #0]
 8006804:	687b      	ldr	r3, [r7, #4]
 8006806:	601a      	str	r2, [r3, #0]
	pxTimeOut->xTimeOnEntering = xTickCount;
 8006808:	4b05      	ldr	r3, [pc, #20]	@ (8006820 <vTaskInternalSetTimeOutState+0x28>)
 800680a:	681a      	ldr	r2, [r3, #0]
 800680c:	687b      	ldr	r3, [r7, #4]
 800680e:	605a      	str	r2, [r3, #4]
}
 8006810:	bf00      	nop
 8006812:	370c      	adds	r7, #12
 8006814:	46bd      	mov	sp, r7
 8006816:	f85d 7b04 	ldr.w	r7, [sp], #4
 800681a:	4770      	bx	lr
 800681c:	20000530 	.word	0x20000530
 8006820:	2000051c 	.word	0x2000051c

08006824 <xTaskCheckForTimeOut>:
/*-----------------------------------------------------------*/

BaseType_t xTaskCheckForTimeOut( TimeOut_t * const pxTimeOut, TickType_t * const pxTicksToWait )
{
 8006824:	b580      	push	{r7, lr}
 8006826:	b088      	sub	sp, #32
 8006828:	af00      	add	r7, sp, #0
 800682a:	6078      	str	r0, [r7, #4]
 800682c:	6039      	str	r1, [r7, #0]
BaseType_t xReturn;

	configASSERT( pxTimeOut );
 800682e:	687b      	ldr	r3, [r7, #4]
 8006830:	2b00      	cmp	r3, #0
 8006832:	d10b      	bne.n	800684c <xTaskCheckForTimeOut+0x28>
	__asm volatile
 8006834:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8006838:	f383 8811 	msr	BASEPRI, r3
 800683c:	f3bf 8f6f 	isb	sy
 8006840:	f3bf 8f4f 	dsb	sy
 8006844:	613b      	str	r3, [r7, #16]
}
 8006846:	bf00      	nop
 8006848:	bf00      	nop
 800684a:	e7fd      	b.n	8006848 <xTaskCheckForTimeOut+0x24>
	configASSERT( pxTicksToWait );
 800684c:	683b      	ldr	r3, [r7, #0]
 800684e:	2b00      	cmp	r3, #0
 8006850:	d10b      	bne.n	800686a <xTaskCheckForTimeOut+0x46>
	__asm volatile
 8006852:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8006856:	f383 8811 	msr	BASEPRI, r3
 800685a:	f3bf 8f6f 	isb	sy
 800685e:	f3bf 8f4f 	dsb	sy
 8006862:	60fb      	str	r3, [r7, #12]
}
 8006864:	bf00      	nop
 8006866:	bf00      	nop
 8006868:	e7fd      	b.n	8006866 <xTaskCheckForTimeOut+0x42>

	taskENTER_CRITICAL();
 800686a:	f000 fc7d 	bl	8007168 <vPortEnterCritical>
	{
		/* Minor optimisation.  The tick count cannot change in this block. */
		const TickType_t xConstTickCount = xTickCount;
 800686e:	4b1d      	ldr	r3, [pc, #116]	@ (80068e4 <xTaskCheckForTimeOut+0xc0>)
 8006870:	681b      	ldr	r3, [r3, #0]
 8006872:	61bb      	str	r3, [r7, #24]
		const TickType_t xElapsedTime = xConstTickCount - pxTimeOut->xTimeOnEntering;
 8006874:	687b      	ldr	r3, [r7, #4]
 8006876:	685b      	ldr	r3, [r3, #4]
 8006878:	69ba      	ldr	r2, [r7, #24]
 800687a:	1ad3      	subs	r3, r2, r3
 800687c:	617b      	str	r3, [r7, #20]
			}
			else
		#endif

		#if ( INCLUDE_vTaskSuspend == 1 )
			if( *pxTicksToWait == portMAX_DELAY )
 800687e:	683b      	ldr	r3, [r7, #0]
 8006880:	681b      	ldr	r3, [r3, #0]
 8006882:	f1b3 3fff 	cmp.w	r3, #4294967295
 8006886:	d102      	bne.n	800688e <xTaskCheckForTimeOut+0x6a>
			{
				/* If INCLUDE_vTaskSuspend is set to 1 and the block time
				specified is the maximum block time then the task should block
				indefinitely, and therefore never time out. */
				xReturn = pdFALSE;
 8006888:	2300      	movs	r3, #0
 800688a:	61fb      	str	r3, [r7, #28]
 800688c:	e023      	b.n	80068d6 <xTaskCheckForTimeOut+0xb2>
			}
			else
		#endif

		if( ( xNumOfOverflows != pxTimeOut->xOverflowCount ) && ( xConstTickCount >= pxTimeOut->xTimeOnEntering ) ) /*lint !e525 Indentation preferred as is to make code within pre-processor directives clearer. */
 800688e:	687b      	ldr	r3, [r7, #4]
 8006890:	681a      	ldr	r2, [r3, #0]
 8006892:	4b15      	ldr	r3, [pc, #84]	@ (80068e8 <xTaskCheckForTimeOut+0xc4>)
 8006894:	681b      	ldr	r3, [r3, #0]
 8006896:	429a      	cmp	r2, r3
 8006898:	d007      	beq.n	80068aa <xTaskCheckForTimeOut+0x86>
 800689a:	687b      	ldr	r3, [r7, #4]
 800689c:	685b      	ldr	r3, [r3, #4]
 800689e:	69ba      	ldr	r2, [r7, #24]
 80068a0:	429a      	cmp	r2, r3
 80068a2:	d302      	bcc.n	80068aa <xTaskCheckForTimeOut+0x86>
			/* The tick count is greater than the time at which
			vTaskSetTimeout() was called, but has also overflowed since
			vTaskSetTimeOut() was called.  It must have wrapped all the way
			around and gone past again. This passed since vTaskSetTimeout()
			was called. */
			xReturn = pdTRUE;
 80068a4:	2301      	movs	r3, #1
 80068a6:	61fb      	str	r3, [r7, #28]
 80068a8:	e015      	b.n	80068d6 <xTaskCheckForTimeOut+0xb2>
		}
		else if( xElapsedTime < *pxTicksToWait ) /*lint !e961 Explicit casting is only redundant with some compilers, whereas others require it to prevent integer conversion errors. */
 80068aa:	683b      	ldr	r3, [r7, #0]
 80068ac:	681b      	ldr	r3, [r3, #0]
 80068ae:	697a      	ldr	r2, [r7, #20]
 80068b0:	429a      	cmp	r2, r3
 80068b2:	d20b      	bcs.n	80068cc <xTaskCheckForTimeOut+0xa8>
		{
			/* Not a genuine timeout. Adjust parameters for time remaining. */
			*pxTicksToWait -= xElapsedTime;
 80068b4:	683b      	ldr	r3, [r7, #0]
 80068b6:	681a      	ldr	r2, [r3, #0]
 80068b8:	697b      	ldr	r3, [r7, #20]
 80068ba:	1ad2      	subs	r2, r2, r3
 80068bc:	683b      	ldr	r3, [r7, #0]
 80068be:	601a      	str	r2, [r3, #0]
			vTaskInternalSetTimeOutState( pxTimeOut );
 80068c0:	6878      	ldr	r0, [r7, #4]
 80068c2:	f7ff ff99 	bl	80067f8 <vTaskInternalSetTimeOutState>
			xReturn = pdFALSE;
 80068c6:	2300      	movs	r3, #0
 80068c8:	61fb      	str	r3, [r7, #28]
 80068ca:	e004      	b.n	80068d6 <xTaskCheckForTimeOut+0xb2>
		}
		else
		{
			*pxTicksToWait = 0;
 80068cc:	683b      	ldr	r3, [r7, #0]
 80068ce:	2200      	movs	r2, #0
 80068d0:	601a      	str	r2, [r3, #0]
			xReturn = pdTRUE;
 80068d2:	2301      	movs	r3, #1
 80068d4:	61fb      	str	r3, [r7, #28]
		}
	}
	taskEXIT_CRITICAL();
 80068d6:	f000 fc79 	bl	80071cc <vPortExitCritical>

	return xReturn;
 80068da:	69fb      	ldr	r3, [r7, #28]
}
 80068dc:	4618      	mov	r0, r3
 80068de:	3720      	adds	r7, #32
 80068e0:	46bd      	mov	sp, r7
 80068e2:	bd80      	pop	{r7, pc}
 80068e4:	2000051c 	.word	0x2000051c
 80068e8:	20000530 	.word	0x20000530

080068ec <vTaskMissedYield>:
/*-----------------------------------------------------------*/

void vTaskMissedYield( void )
{
 80068ec:	b480      	push	{r7}
 80068ee:	af00      	add	r7, sp, #0
	xYieldPending = pdTRUE;
 80068f0:	4b03      	ldr	r3, [pc, #12]	@ (8006900 <vTaskMissedYield+0x14>)
 80068f2:	2201      	movs	r2, #1
 80068f4:	601a      	str	r2, [r3, #0]
}
 80068f6:	bf00      	nop
 80068f8:	46bd      	mov	sp, r7
 80068fa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80068fe:	4770      	bx	lr
 8006900:	2000052c 	.word	0x2000052c

08006904 <prvIdleTask>:
 *
 * void prvIdleTask( void *pvParameters );
 *
 */
static portTASK_FUNCTION( prvIdleTask, pvParameters )
{
 8006904:	b580      	push	{r7, lr}
 8006906:	b082      	sub	sp, #8
 8006908:	af00      	add	r7, sp, #0
 800690a:	6078      	str	r0, [r7, #4]

	for( ;; )
	{
		/* See if any tasks have deleted themselves - if so then the idle task
		is responsible for freeing the deleted task's TCB and stack. */
		prvCheckTasksWaitingTermination();
 800690c:	f000 f852 	bl	80069b4 <prvCheckTasksWaitingTermination>

			A critical region is not required here as we are just reading from
			the list, and an occasional incorrect value will not matter.  If
			the ready list at the idle priority contains more than one task
			then a task other than the idle task is ready to execute. */
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ tskIDLE_PRIORITY ] ) ) > ( UBaseType_t ) 1 )
 8006910:	4b06      	ldr	r3, [pc, #24]	@ (800692c <prvIdleTask+0x28>)
 8006912:	681b      	ldr	r3, [r3, #0]
 8006914:	2b01      	cmp	r3, #1
 8006916:	d9f9      	bls.n	800690c <prvIdleTask+0x8>
			{
				taskYIELD();
 8006918:	4b05      	ldr	r3, [pc, #20]	@ (8006930 <prvIdleTask+0x2c>)
 800691a:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 800691e:	601a      	str	r2, [r3, #0]
 8006920:	f3bf 8f4f 	dsb	sy
 8006924:	f3bf 8f6f 	isb	sy
		prvCheckTasksWaitingTermination();
 8006928:	e7f0      	b.n	800690c <prvIdleTask+0x8>
 800692a:	bf00      	nop
 800692c:	2000041c 	.word	0x2000041c
 8006930:	e000ed04 	.word	0xe000ed04

08006934 <prvInitialiseTaskLists>:

#endif /* portUSING_MPU_WRAPPERS */
/*-----------------------------------------------------------*/

static void prvInitialiseTaskLists( void )
{
 8006934:	b580      	push	{r7, lr}
 8006936:	b082      	sub	sp, #8
 8006938:	af00      	add	r7, sp, #0
UBaseType_t uxPriority;

	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 800693a:	2300      	movs	r3, #0
 800693c:	607b      	str	r3, [r7, #4]
 800693e:	e00c      	b.n	800695a <prvInitialiseTaskLists+0x26>
	{
		vListInitialise( &( pxReadyTasksLists[ uxPriority ] ) );
 8006940:	687a      	ldr	r2, [r7, #4]
 8006942:	4613      	mov	r3, r2
 8006944:	009b      	lsls	r3, r3, #2
 8006946:	4413      	add	r3, r2
 8006948:	009b      	lsls	r3, r3, #2
 800694a:	4a12      	ldr	r2, [pc, #72]	@ (8006994 <prvInitialiseTaskLists+0x60>)
 800694c:	4413      	add	r3, r2
 800694e:	4618      	mov	r0, r3
 8006950:	f7fe fd57 	bl	8005402 <vListInitialise>
	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 8006954:	687b      	ldr	r3, [r7, #4]
 8006956:	3301      	adds	r3, #1
 8006958:	607b      	str	r3, [r7, #4]
 800695a:	687b      	ldr	r3, [r7, #4]
 800695c:	2b06      	cmp	r3, #6
 800695e:	d9ef      	bls.n	8006940 <prvInitialiseTaskLists+0xc>
	}

	vListInitialise( &xDelayedTaskList1 );
 8006960:	480d      	ldr	r0, [pc, #52]	@ (8006998 <prvInitialiseTaskLists+0x64>)
 8006962:	f7fe fd4e 	bl	8005402 <vListInitialise>
	vListInitialise( &xDelayedTaskList2 );
 8006966:	480d      	ldr	r0, [pc, #52]	@ (800699c <prvInitialiseTaskLists+0x68>)
 8006968:	f7fe fd4b 	bl	8005402 <vListInitialise>
	vListInitialise( &xPendingReadyList );
 800696c:	480c      	ldr	r0, [pc, #48]	@ (80069a0 <prvInitialiseTaskLists+0x6c>)
 800696e:	f7fe fd48 	bl	8005402 <vListInitialise>

	#if ( INCLUDE_vTaskDelete == 1 )
	{
		vListInitialise( &xTasksWaitingTermination );
 8006972:	480c      	ldr	r0, [pc, #48]	@ (80069a4 <prvInitialiseTaskLists+0x70>)
 8006974:	f7fe fd45 	bl	8005402 <vListInitialise>
	}
	#endif /* INCLUDE_vTaskDelete */

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		vListInitialise( &xSuspendedTaskList );
 8006978:	480b      	ldr	r0, [pc, #44]	@ (80069a8 <prvInitialiseTaskLists+0x74>)
 800697a:	f7fe fd42 	bl	8005402 <vListInitialise>
	}
	#endif /* INCLUDE_vTaskSuspend */

	/* Start with pxDelayedTaskList using list1 and the pxOverflowDelayedTaskList
	using list2. */
	pxDelayedTaskList = &xDelayedTaskList1;
 800697e:	4b0b      	ldr	r3, [pc, #44]	@ (80069ac <prvInitialiseTaskLists+0x78>)
 8006980:	4a05      	ldr	r2, [pc, #20]	@ (8006998 <prvInitialiseTaskLists+0x64>)
 8006982:	601a      	str	r2, [r3, #0]
	pxOverflowDelayedTaskList = &xDelayedTaskList2;
 8006984:	4b0a      	ldr	r3, [pc, #40]	@ (80069b0 <prvInitialiseTaskLists+0x7c>)
 8006986:	4a05      	ldr	r2, [pc, #20]	@ (800699c <prvInitialiseTaskLists+0x68>)
 8006988:	601a      	str	r2, [r3, #0]
}
 800698a:	bf00      	nop
 800698c:	3708      	adds	r7, #8
 800698e:	46bd      	mov	sp, r7
 8006990:	bd80      	pop	{r7, pc}
 8006992:	bf00      	nop
 8006994:	2000041c 	.word	0x2000041c
 8006998:	200004a8 	.word	0x200004a8
 800699c:	200004bc 	.word	0x200004bc
 80069a0:	200004d8 	.word	0x200004d8
 80069a4:	200004ec 	.word	0x200004ec
 80069a8:	20000504 	.word	0x20000504
 80069ac:	200004d0 	.word	0x200004d0
 80069b0:	200004d4 	.word	0x200004d4

080069b4 <prvCheckTasksWaitingTermination>:
/*-----------------------------------------------------------*/

static void prvCheckTasksWaitingTermination( void )
{
 80069b4:	b580      	push	{r7, lr}
 80069b6:	b082      	sub	sp, #8
 80069b8:	af00      	add	r7, sp, #0
	{
		TCB_t *pxTCB;

		/* uxDeletedTasksWaitingCleanUp is used to prevent taskENTER_CRITICAL()
		being called too often in the idle task. */
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 80069ba:	e019      	b.n	80069f0 <prvCheckTasksWaitingTermination+0x3c>
		{
			taskENTER_CRITICAL();
 80069bc:	f000 fbd4 	bl	8007168 <vPortEnterCritical>
			{
				pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xTasksWaitingTermination ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 80069c0:	4b10      	ldr	r3, [pc, #64]	@ (8006a04 <prvCheckTasksWaitingTermination+0x50>)
 80069c2:	68db      	ldr	r3, [r3, #12]
 80069c4:	68db      	ldr	r3, [r3, #12]
 80069c6:	607b      	str	r3, [r7, #4]
				( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 80069c8:	687b      	ldr	r3, [r7, #4]
 80069ca:	3304      	adds	r3, #4
 80069cc:	4618      	mov	r0, r3
 80069ce:	f7fe fda2 	bl	8005516 <uxListRemove>
				--uxCurrentNumberOfTasks;
 80069d2:	4b0d      	ldr	r3, [pc, #52]	@ (8006a08 <prvCheckTasksWaitingTermination+0x54>)
 80069d4:	681b      	ldr	r3, [r3, #0]
 80069d6:	3b01      	subs	r3, #1
 80069d8:	4a0b      	ldr	r2, [pc, #44]	@ (8006a08 <prvCheckTasksWaitingTermination+0x54>)
 80069da:	6013      	str	r3, [r2, #0]
				--uxDeletedTasksWaitingCleanUp;
 80069dc:	4b0b      	ldr	r3, [pc, #44]	@ (8006a0c <prvCheckTasksWaitingTermination+0x58>)
 80069de:	681b      	ldr	r3, [r3, #0]
 80069e0:	3b01      	subs	r3, #1
 80069e2:	4a0a      	ldr	r2, [pc, #40]	@ (8006a0c <prvCheckTasksWaitingTermination+0x58>)
 80069e4:	6013      	str	r3, [r2, #0]
			}
			taskEXIT_CRITICAL();
 80069e6:	f000 fbf1 	bl	80071cc <vPortExitCritical>

			prvDeleteTCB( pxTCB );
 80069ea:	6878      	ldr	r0, [r7, #4]
 80069ec:	f000 f810 	bl	8006a10 <prvDeleteTCB>
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 80069f0:	4b06      	ldr	r3, [pc, #24]	@ (8006a0c <prvCheckTasksWaitingTermination+0x58>)
 80069f2:	681b      	ldr	r3, [r3, #0]
 80069f4:	2b00      	cmp	r3, #0
 80069f6:	d1e1      	bne.n	80069bc <prvCheckTasksWaitingTermination+0x8>
		}
	}
	#endif /* INCLUDE_vTaskDelete */
}
 80069f8:	bf00      	nop
 80069fa:	bf00      	nop
 80069fc:	3708      	adds	r7, #8
 80069fe:	46bd      	mov	sp, r7
 8006a00:	bd80      	pop	{r7, pc}
 8006a02:	bf00      	nop
 8006a04:	200004ec 	.word	0x200004ec
 8006a08:	20000518 	.word	0x20000518
 8006a0c:	20000500 	.word	0x20000500

08006a10 <prvDeleteTCB>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelete == 1 )

	static void prvDeleteTCB( TCB_t *pxTCB )
	{
 8006a10:	b580      	push	{r7, lr}
 8006a12:	b084      	sub	sp, #16
 8006a14:	af00      	add	r7, sp, #0
 8006a16:	6078      	str	r0, [r7, #4]
		to the task to free any memory allocated at the application level.
		See the third party link http://www.nadler.com/embedded/newlibAndFreeRTOS.html
		for additional information. */
		#if ( configUSE_NEWLIB_REENTRANT == 1 )
		{
			_reclaim_reent( &( pxTCB->xNewLib_reent ) );
 8006a18:	687b      	ldr	r3, [r7, #4]
 8006a1a:	334c      	adds	r3, #76	@ 0x4c
 8006a1c:	4618      	mov	r0, r3
 8006a1e:	f000 fe79 	bl	8007714 <_reclaim_reent>
		#elif( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 !e9029 Macro has been consolidated for readability reasons. */
		{
			/* The task could have been allocated statically or dynamically, so
			check what was statically allocated before trying to free the
			memory. */
			if( pxTCB->ucStaticallyAllocated == tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB )
 8006a22:	687b      	ldr	r3, [r7, #4]
 8006a24:	f893 309d 	ldrb.w	r3, [r3, #157]	@ 0x9d
 8006a28:	2b00      	cmp	r3, #0
 8006a2a:	d108      	bne.n	8006a3e <prvDeleteTCB+0x2e>
			{
				/* Both the stack and TCB were allocated dynamically, so both
				must be freed. */
				vPortFree( pxTCB->pxStack );
 8006a2c:	687b      	ldr	r3, [r7, #4]
 8006a2e:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8006a30:	4618      	mov	r0, r3
 8006a32:	f000 fd47 	bl	80074c4 <vPortFree>
				vPortFree( pxTCB );
 8006a36:	6878      	ldr	r0, [r7, #4]
 8006a38:	f000 fd44 	bl	80074c4 <vPortFree>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
				mtCOVERAGE_TEST_MARKER();
			}
		}
		#endif /* configSUPPORT_DYNAMIC_ALLOCATION */
	}
 8006a3c:	e019      	b.n	8006a72 <prvDeleteTCB+0x62>
			else if( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_ONLY )
 8006a3e:	687b      	ldr	r3, [r7, #4]
 8006a40:	f893 309d 	ldrb.w	r3, [r3, #157]	@ 0x9d
 8006a44:	2b01      	cmp	r3, #1
 8006a46:	d103      	bne.n	8006a50 <prvDeleteTCB+0x40>
				vPortFree( pxTCB );
 8006a48:	6878      	ldr	r0, [r7, #4]
 8006a4a:	f000 fd3b 	bl	80074c4 <vPortFree>
	}
 8006a4e:	e010      	b.n	8006a72 <prvDeleteTCB+0x62>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
 8006a50:	687b      	ldr	r3, [r7, #4]
 8006a52:	f893 309d 	ldrb.w	r3, [r3, #157]	@ 0x9d
 8006a56:	2b02      	cmp	r3, #2
 8006a58:	d00b      	beq.n	8006a72 <prvDeleteTCB+0x62>
	__asm volatile
 8006a5a:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8006a5e:	f383 8811 	msr	BASEPRI, r3
 8006a62:	f3bf 8f6f 	isb	sy
 8006a66:	f3bf 8f4f 	dsb	sy
 8006a6a:	60fb      	str	r3, [r7, #12]
}
 8006a6c:	bf00      	nop
 8006a6e:	bf00      	nop
 8006a70:	e7fd      	b.n	8006a6e <prvDeleteTCB+0x5e>
	}
 8006a72:	bf00      	nop
 8006a74:	3710      	adds	r7, #16
 8006a76:	46bd      	mov	sp, r7
 8006a78:	bd80      	pop	{r7, pc}
	...

08006a7c <prvResetNextTaskUnblockTime>:

#endif /* INCLUDE_vTaskDelete */
/*-----------------------------------------------------------*/

static void prvResetNextTaskUnblockTime( void )
{
 8006a7c:	b480      	push	{r7}
 8006a7e:	b083      	sub	sp, #12
 8006a80:	af00      	add	r7, sp, #0
TCB_t *pxTCB;

	if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 8006a82:	4b0c      	ldr	r3, [pc, #48]	@ (8006ab4 <prvResetNextTaskUnblockTime+0x38>)
 8006a84:	681b      	ldr	r3, [r3, #0]
 8006a86:	681b      	ldr	r3, [r3, #0]
 8006a88:	2b00      	cmp	r3, #0
 8006a8a:	d104      	bne.n	8006a96 <prvResetNextTaskUnblockTime+0x1a>
	{
		/* The new current delayed list is empty.  Set xNextTaskUnblockTime to
		the maximum possible value so it is	extremely unlikely that the
		if( xTickCount >= xNextTaskUnblockTime ) test will pass until
		there is an item in the delayed list. */
		xNextTaskUnblockTime = portMAX_DELAY;
 8006a8c:	4b0a      	ldr	r3, [pc, #40]	@ (8006ab8 <prvResetNextTaskUnblockTime+0x3c>)
 8006a8e:	f04f 32ff 	mov.w	r2, #4294967295
 8006a92:	601a      	str	r2, [r3, #0]
		which the task at the head of the delayed list should be removed
		from the Blocked state. */
		( pxTCB ) = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
	}
}
 8006a94:	e008      	b.n	8006aa8 <prvResetNextTaskUnblockTime+0x2c>
		( pxTCB ) = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8006a96:	4b07      	ldr	r3, [pc, #28]	@ (8006ab4 <prvResetNextTaskUnblockTime+0x38>)
 8006a98:	681b      	ldr	r3, [r3, #0]
 8006a9a:	68db      	ldr	r3, [r3, #12]
 8006a9c:	68db      	ldr	r3, [r3, #12]
 8006a9e:	607b      	str	r3, [r7, #4]
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
 8006aa0:	687b      	ldr	r3, [r7, #4]
 8006aa2:	685b      	ldr	r3, [r3, #4]
 8006aa4:	4a04      	ldr	r2, [pc, #16]	@ (8006ab8 <prvResetNextTaskUnblockTime+0x3c>)
 8006aa6:	6013      	str	r3, [r2, #0]
}
 8006aa8:	bf00      	nop
 8006aaa:	370c      	adds	r7, #12
 8006aac:	46bd      	mov	sp, r7
 8006aae:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006ab2:	4770      	bx	lr
 8006ab4:	200004d0 	.word	0x200004d0
 8006ab8:	20000538 	.word	0x20000538

08006abc <xTaskGetSchedulerState>:
/*-----------------------------------------------------------*/

#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )

	BaseType_t xTaskGetSchedulerState( void )
	{
 8006abc:	b480      	push	{r7}
 8006abe:	b083      	sub	sp, #12
 8006ac0:	af00      	add	r7, sp, #0
	BaseType_t xReturn;

		if( xSchedulerRunning == pdFALSE )
 8006ac2:	4b0b      	ldr	r3, [pc, #44]	@ (8006af0 <xTaskGetSchedulerState+0x34>)
 8006ac4:	681b      	ldr	r3, [r3, #0]
 8006ac6:	2b00      	cmp	r3, #0
 8006ac8:	d102      	bne.n	8006ad0 <xTaskGetSchedulerState+0x14>
		{
			xReturn = taskSCHEDULER_NOT_STARTED;
 8006aca:	2301      	movs	r3, #1
 8006acc:	607b      	str	r3, [r7, #4]
 8006ace:	e008      	b.n	8006ae2 <xTaskGetSchedulerState+0x26>
		}
		else
		{
			if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8006ad0:	4b08      	ldr	r3, [pc, #32]	@ (8006af4 <xTaskGetSchedulerState+0x38>)
 8006ad2:	681b      	ldr	r3, [r3, #0]
 8006ad4:	2b00      	cmp	r3, #0
 8006ad6:	d102      	bne.n	8006ade <xTaskGetSchedulerState+0x22>
			{
				xReturn = taskSCHEDULER_RUNNING;
 8006ad8:	2302      	movs	r3, #2
 8006ada:	607b      	str	r3, [r7, #4]
 8006adc:	e001      	b.n	8006ae2 <xTaskGetSchedulerState+0x26>
			}
			else
			{
				xReturn = taskSCHEDULER_SUSPENDED;
 8006ade:	2300      	movs	r3, #0
 8006ae0:	607b      	str	r3, [r7, #4]
			}
		}

		return xReturn;
 8006ae2:	687b      	ldr	r3, [r7, #4]
	}
 8006ae4:	4618      	mov	r0, r3
 8006ae6:	370c      	adds	r7, #12
 8006ae8:	46bd      	mov	sp, r7
 8006aea:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006aee:	4770      	bx	lr
 8006af0:	20000524 	.word	0x20000524
 8006af4:	20000540 	.word	0x20000540

08006af8 <xTaskPriorityInherit>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	BaseType_t xTaskPriorityInherit( TaskHandle_t const pxMutexHolder )
	{
 8006af8:	b580      	push	{r7, lr}
 8006afa:	b084      	sub	sp, #16
 8006afc:	af00      	add	r7, sp, #0
 8006afe:	6078      	str	r0, [r7, #4]
	TCB_t * const pxMutexHolderTCB = pxMutexHolder;
 8006b00:	687b      	ldr	r3, [r7, #4]
 8006b02:	60bb      	str	r3, [r7, #8]
	BaseType_t xReturn = pdFALSE;
 8006b04:	2300      	movs	r3, #0
 8006b06:	60fb      	str	r3, [r7, #12]

		/* If the mutex was given back by an interrupt while the queue was
		locked then the mutex holder might now be NULL.  _RB_ Is this still
		needed as interrupts can no longer use mutexes? */
		if( pxMutexHolder != NULL )
 8006b08:	687b      	ldr	r3, [r7, #4]
 8006b0a:	2b00      	cmp	r3, #0
 8006b0c:	d05e      	beq.n	8006bcc <xTaskPriorityInherit+0xd4>
		{
			/* If the holder of the mutex has a priority below the priority of
			the task attempting to obtain the mutex then it will temporarily
			inherit the priority of the task attempting to obtain the mutex. */
			if( pxMutexHolderTCB->uxPriority < pxCurrentTCB->uxPriority )
 8006b0e:	68bb      	ldr	r3, [r7, #8]
 8006b10:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8006b12:	4b31      	ldr	r3, [pc, #196]	@ (8006bd8 <xTaskPriorityInherit+0xe0>)
 8006b14:	681b      	ldr	r3, [r3, #0]
 8006b16:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8006b18:	429a      	cmp	r2, r3
 8006b1a:	d24e      	bcs.n	8006bba <xTaskPriorityInherit+0xc2>
			{
				/* Adjust the mutex holder state to account for its new
				priority.  Only reset the event list item value if the value is
				not being used for anything else. */
				if( ( listGET_LIST_ITEM_VALUE( &( pxMutexHolderTCB->xEventListItem ) ) & taskEVENT_LIST_ITEM_VALUE_IN_USE ) == 0UL )
 8006b1c:	68bb      	ldr	r3, [r7, #8]
 8006b1e:	699b      	ldr	r3, [r3, #24]
 8006b20:	2b00      	cmp	r3, #0
 8006b22:	db06      	blt.n	8006b32 <xTaskPriorityInherit+0x3a>
				{
					listSET_LIST_ITEM_VALUE( &( pxMutexHolderTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) pxCurrentTCB->uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8006b24:	4b2c      	ldr	r3, [pc, #176]	@ (8006bd8 <xTaskPriorityInherit+0xe0>)
 8006b26:	681b      	ldr	r3, [r3, #0]
 8006b28:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8006b2a:	f1c3 0207 	rsb	r2, r3, #7
 8006b2e:	68bb      	ldr	r3, [r7, #8]
 8006b30:	619a      	str	r2, [r3, #24]
					mtCOVERAGE_TEST_MARKER();
				}

				/* If the task being modified is in the ready state it will need
				to be moved into a new list. */
				if( listIS_CONTAINED_WITHIN( &( pxReadyTasksLists[ pxMutexHolderTCB->uxPriority ] ), &( pxMutexHolderTCB->xStateListItem ) ) != pdFALSE )
 8006b32:	68bb      	ldr	r3, [r7, #8]
 8006b34:	6959      	ldr	r1, [r3, #20]
 8006b36:	68bb      	ldr	r3, [r7, #8]
 8006b38:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8006b3a:	4613      	mov	r3, r2
 8006b3c:	009b      	lsls	r3, r3, #2
 8006b3e:	4413      	add	r3, r2
 8006b40:	009b      	lsls	r3, r3, #2
 8006b42:	4a26      	ldr	r2, [pc, #152]	@ (8006bdc <xTaskPriorityInherit+0xe4>)
 8006b44:	4413      	add	r3, r2
 8006b46:	4299      	cmp	r1, r3
 8006b48:	d12f      	bne.n	8006baa <xTaskPriorityInherit+0xb2>
				{
					if( uxListRemove( &( pxMutexHolderTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 8006b4a:	68bb      	ldr	r3, [r7, #8]
 8006b4c:	3304      	adds	r3, #4
 8006b4e:	4618      	mov	r0, r3
 8006b50:	f7fe fce1 	bl	8005516 <uxListRemove>
 8006b54:	4603      	mov	r3, r0
 8006b56:	2b00      	cmp	r3, #0
 8006b58:	d10a      	bne.n	8006b70 <xTaskPriorityInherit+0x78>
					{
						/* It is known that the task is in its ready list so
						there is no need to check again and the port level
						reset macro can be called directly. */
						portRESET_READY_PRIORITY( pxMutexHolderTCB->uxPriority, uxTopReadyPriority );
 8006b5a:	68bb      	ldr	r3, [r7, #8]
 8006b5c:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8006b5e:	2201      	movs	r2, #1
 8006b60:	fa02 f303 	lsl.w	r3, r2, r3
 8006b64:	43da      	mvns	r2, r3
 8006b66:	4b1e      	ldr	r3, [pc, #120]	@ (8006be0 <xTaskPriorityInherit+0xe8>)
 8006b68:	681b      	ldr	r3, [r3, #0]
 8006b6a:	4013      	ands	r3, r2
 8006b6c:	4a1c      	ldr	r2, [pc, #112]	@ (8006be0 <xTaskPriorityInherit+0xe8>)
 8006b6e:	6013      	str	r3, [r2, #0]
					{
						mtCOVERAGE_TEST_MARKER();
					}

					/* Inherit the priority before being moved into the new list. */
					pxMutexHolderTCB->uxPriority = pxCurrentTCB->uxPriority;
 8006b70:	4b19      	ldr	r3, [pc, #100]	@ (8006bd8 <xTaskPriorityInherit+0xe0>)
 8006b72:	681b      	ldr	r3, [r3, #0]
 8006b74:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8006b76:	68bb      	ldr	r3, [r7, #8]
 8006b78:	62da      	str	r2, [r3, #44]	@ 0x2c
					prvAddTaskToReadyList( pxMutexHolderTCB );
 8006b7a:	68bb      	ldr	r3, [r7, #8]
 8006b7c:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8006b7e:	2201      	movs	r2, #1
 8006b80:	409a      	lsls	r2, r3
 8006b82:	4b17      	ldr	r3, [pc, #92]	@ (8006be0 <xTaskPriorityInherit+0xe8>)
 8006b84:	681b      	ldr	r3, [r3, #0]
 8006b86:	4313      	orrs	r3, r2
 8006b88:	4a15      	ldr	r2, [pc, #84]	@ (8006be0 <xTaskPriorityInherit+0xe8>)
 8006b8a:	6013      	str	r3, [r2, #0]
 8006b8c:	68bb      	ldr	r3, [r7, #8]
 8006b8e:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8006b90:	4613      	mov	r3, r2
 8006b92:	009b      	lsls	r3, r3, #2
 8006b94:	4413      	add	r3, r2
 8006b96:	009b      	lsls	r3, r3, #2
 8006b98:	4a10      	ldr	r2, [pc, #64]	@ (8006bdc <xTaskPriorityInherit+0xe4>)
 8006b9a:	441a      	add	r2, r3
 8006b9c:	68bb      	ldr	r3, [r7, #8]
 8006b9e:	3304      	adds	r3, #4
 8006ba0:	4619      	mov	r1, r3
 8006ba2:	4610      	mov	r0, r2
 8006ba4:	f7fe fc5a 	bl	800545c <vListInsertEnd>
 8006ba8:	e004      	b.n	8006bb4 <xTaskPriorityInherit+0xbc>
				}
				else
				{
					/* Just inherit the priority. */
					pxMutexHolderTCB->uxPriority = pxCurrentTCB->uxPriority;
 8006baa:	4b0b      	ldr	r3, [pc, #44]	@ (8006bd8 <xTaskPriorityInherit+0xe0>)
 8006bac:	681b      	ldr	r3, [r3, #0]
 8006bae:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8006bb0:	68bb      	ldr	r3, [r7, #8]
 8006bb2:	62da      	str	r2, [r3, #44]	@ 0x2c
				}

				traceTASK_PRIORITY_INHERIT( pxMutexHolderTCB, pxCurrentTCB->uxPriority );

				/* Inheritance occurred. */
				xReturn = pdTRUE;
 8006bb4:	2301      	movs	r3, #1
 8006bb6:	60fb      	str	r3, [r7, #12]
 8006bb8:	e008      	b.n	8006bcc <xTaskPriorityInherit+0xd4>
			}
			else
			{
				if( pxMutexHolderTCB->uxBasePriority < pxCurrentTCB->uxPriority )
 8006bba:	68bb      	ldr	r3, [r7, #8]
 8006bbc:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 8006bbe:	4b06      	ldr	r3, [pc, #24]	@ (8006bd8 <xTaskPriorityInherit+0xe0>)
 8006bc0:	681b      	ldr	r3, [r3, #0]
 8006bc2:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8006bc4:	429a      	cmp	r2, r3
 8006bc6:	d201      	bcs.n	8006bcc <xTaskPriorityInherit+0xd4>
					current priority of the mutex holder is not lower than the
					priority of the task attempting to take the mutex.
					Therefore the mutex holder must have already inherited a
					priority, but inheritance would have occurred if that had
					not been the case. */
					xReturn = pdTRUE;
 8006bc8:	2301      	movs	r3, #1
 8006bca:	60fb      	str	r3, [r7, #12]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		return xReturn;
 8006bcc:	68fb      	ldr	r3, [r7, #12]
	}
 8006bce:	4618      	mov	r0, r3
 8006bd0:	3710      	adds	r7, #16
 8006bd2:	46bd      	mov	sp, r7
 8006bd4:	bd80      	pop	{r7, pc}
 8006bd6:	bf00      	nop
 8006bd8:	20000418 	.word	0x20000418
 8006bdc:	2000041c 	.word	0x2000041c
 8006be0:	20000520 	.word	0x20000520

08006be4 <xTaskPriorityDisinherit>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	BaseType_t xTaskPriorityDisinherit( TaskHandle_t const pxMutexHolder )
	{
 8006be4:	b580      	push	{r7, lr}
 8006be6:	b086      	sub	sp, #24
 8006be8:	af00      	add	r7, sp, #0
 8006bea:	6078      	str	r0, [r7, #4]
	TCB_t * const pxTCB = pxMutexHolder;
 8006bec:	687b      	ldr	r3, [r7, #4]
 8006bee:	613b      	str	r3, [r7, #16]
	BaseType_t xReturn = pdFALSE;
 8006bf0:	2300      	movs	r3, #0
 8006bf2:	617b      	str	r3, [r7, #20]

		if( pxMutexHolder != NULL )
 8006bf4:	687b      	ldr	r3, [r7, #4]
 8006bf6:	2b00      	cmp	r3, #0
 8006bf8:	d070      	beq.n	8006cdc <xTaskPriorityDisinherit+0xf8>
		{
			/* A task can only have an inherited priority if it holds the mutex.
			If the mutex is held by a task then it cannot be given from an
			interrupt, and if a mutex is given by the holding task then it must
			be the running state task. */
			configASSERT( pxTCB == pxCurrentTCB );
 8006bfa:	4b3b      	ldr	r3, [pc, #236]	@ (8006ce8 <xTaskPriorityDisinherit+0x104>)
 8006bfc:	681b      	ldr	r3, [r3, #0]
 8006bfe:	693a      	ldr	r2, [r7, #16]
 8006c00:	429a      	cmp	r2, r3
 8006c02:	d00b      	beq.n	8006c1c <xTaskPriorityDisinherit+0x38>
	__asm volatile
 8006c04:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8006c08:	f383 8811 	msr	BASEPRI, r3
 8006c0c:	f3bf 8f6f 	isb	sy
 8006c10:	f3bf 8f4f 	dsb	sy
 8006c14:	60fb      	str	r3, [r7, #12]
}
 8006c16:	bf00      	nop
 8006c18:	bf00      	nop
 8006c1a:	e7fd      	b.n	8006c18 <xTaskPriorityDisinherit+0x34>
			configASSERT( pxTCB->uxMutexesHeld );
 8006c1c:	693b      	ldr	r3, [r7, #16]
 8006c1e:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8006c20:	2b00      	cmp	r3, #0
 8006c22:	d10b      	bne.n	8006c3c <xTaskPriorityDisinherit+0x58>
	__asm volatile
 8006c24:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8006c28:	f383 8811 	msr	BASEPRI, r3
 8006c2c:	f3bf 8f6f 	isb	sy
 8006c30:	f3bf 8f4f 	dsb	sy
 8006c34:	60bb      	str	r3, [r7, #8]
}
 8006c36:	bf00      	nop
 8006c38:	bf00      	nop
 8006c3a:	e7fd      	b.n	8006c38 <xTaskPriorityDisinherit+0x54>
			( pxTCB->uxMutexesHeld )--;
 8006c3c:	693b      	ldr	r3, [r7, #16]
 8006c3e:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8006c40:	1e5a      	subs	r2, r3, #1
 8006c42:	693b      	ldr	r3, [r7, #16]
 8006c44:	649a      	str	r2, [r3, #72]	@ 0x48

			/* Has the holder of the mutex inherited the priority of another
			task? */
			if( pxTCB->uxPriority != pxTCB->uxBasePriority )
 8006c46:	693b      	ldr	r3, [r7, #16]
 8006c48:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8006c4a:	693b      	ldr	r3, [r7, #16]
 8006c4c:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8006c4e:	429a      	cmp	r2, r3
 8006c50:	d044      	beq.n	8006cdc <xTaskPriorityDisinherit+0xf8>
			{
				/* Only disinherit if no other mutexes are held. */
				if( pxTCB->uxMutexesHeld == ( UBaseType_t ) 0 )
 8006c52:	693b      	ldr	r3, [r7, #16]
 8006c54:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8006c56:	2b00      	cmp	r3, #0
 8006c58:	d140      	bne.n	8006cdc <xTaskPriorityDisinherit+0xf8>
					/* A task can only have an inherited priority if it holds
					the mutex.  If the mutex is held by a task then it cannot be
					given from an interrupt, and if a mutex is given by the
					holding task then it must be the running state task.  Remove
					the holding task from the ready/delayed list. */
					if( uxListRemove( &( pxTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 8006c5a:	693b      	ldr	r3, [r7, #16]
 8006c5c:	3304      	adds	r3, #4
 8006c5e:	4618      	mov	r0, r3
 8006c60:	f7fe fc59 	bl	8005516 <uxListRemove>
 8006c64:	4603      	mov	r3, r0
 8006c66:	2b00      	cmp	r3, #0
 8006c68:	d115      	bne.n	8006c96 <xTaskPriorityDisinherit+0xb2>
					{
						taskRESET_READY_PRIORITY( pxTCB->uxPriority );
 8006c6a:	693b      	ldr	r3, [r7, #16]
 8006c6c:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8006c6e:	491f      	ldr	r1, [pc, #124]	@ (8006cec <xTaskPriorityDisinherit+0x108>)
 8006c70:	4613      	mov	r3, r2
 8006c72:	009b      	lsls	r3, r3, #2
 8006c74:	4413      	add	r3, r2
 8006c76:	009b      	lsls	r3, r3, #2
 8006c78:	440b      	add	r3, r1
 8006c7a:	681b      	ldr	r3, [r3, #0]
 8006c7c:	2b00      	cmp	r3, #0
 8006c7e:	d10a      	bne.n	8006c96 <xTaskPriorityDisinherit+0xb2>
 8006c80:	693b      	ldr	r3, [r7, #16]
 8006c82:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8006c84:	2201      	movs	r2, #1
 8006c86:	fa02 f303 	lsl.w	r3, r2, r3
 8006c8a:	43da      	mvns	r2, r3
 8006c8c:	4b18      	ldr	r3, [pc, #96]	@ (8006cf0 <xTaskPriorityDisinherit+0x10c>)
 8006c8e:	681b      	ldr	r3, [r3, #0]
 8006c90:	4013      	ands	r3, r2
 8006c92:	4a17      	ldr	r2, [pc, #92]	@ (8006cf0 <xTaskPriorityDisinherit+0x10c>)
 8006c94:	6013      	str	r3, [r2, #0]
					}

					/* Disinherit the priority before adding the task into the
					new	ready list. */
					traceTASK_PRIORITY_DISINHERIT( pxTCB, pxTCB->uxBasePriority );
					pxTCB->uxPriority = pxTCB->uxBasePriority;
 8006c96:	693b      	ldr	r3, [r7, #16]
 8006c98:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 8006c9a:	693b      	ldr	r3, [r7, #16]
 8006c9c:	62da      	str	r2, [r3, #44]	@ 0x2c

					/* Reset the event list item value.  It cannot be in use for
					any other purpose if this task is running, and it must be
					running to give back the mutex. */
					listSET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) pxTCB->uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8006c9e:	693b      	ldr	r3, [r7, #16]
 8006ca0:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8006ca2:	f1c3 0207 	rsb	r2, r3, #7
 8006ca6:	693b      	ldr	r3, [r7, #16]
 8006ca8:	619a      	str	r2, [r3, #24]
					prvAddTaskToReadyList( pxTCB );
 8006caa:	693b      	ldr	r3, [r7, #16]
 8006cac:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8006cae:	2201      	movs	r2, #1
 8006cb0:	409a      	lsls	r2, r3
 8006cb2:	4b0f      	ldr	r3, [pc, #60]	@ (8006cf0 <xTaskPriorityDisinherit+0x10c>)
 8006cb4:	681b      	ldr	r3, [r3, #0]
 8006cb6:	4313      	orrs	r3, r2
 8006cb8:	4a0d      	ldr	r2, [pc, #52]	@ (8006cf0 <xTaskPriorityDisinherit+0x10c>)
 8006cba:	6013      	str	r3, [r2, #0]
 8006cbc:	693b      	ldr	r3, [r7, #16]
 8006cbe:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8006cc0:	4613      	mov	r3, r2
 8006cc2:	009b      	lsls	r3, r3, #2
 8006cc4:	4413      	add	r3, r2
 8006cc6:	009b      	lsls	r3, r3, #2
 8006cc8:	4a08      	ldr	r2, [pc, #32]	@ (8006cec <xTaskPriorityDisinherit+0x108>)
 8006cca:	441a      	add	r2, r3
 8006ccc:	693b      	ldr	r3, [r7, #16]
 8006cce:	3304      	adds	r3, #4
 8006cd0:	4619      	mov	r1, r3
 8006cd2:	4610      	mov	r0, r2
 8006cd4:	f7fe fbc2 	bl	800545c <vListInsertEnd>
					in an order different to that in which they were taken.
					If a context switch did not occur when the first mutex was
					returned, even if a task was waiting on it, then a context
					switch should occur when the last mutex is returned whether
					a task is waiting on it or not. */
					xReturn = pdTRUE;
 8006cd8:	2301      	movs	r3, #1
 8006cda:	617b      	str	r3, [r7, #20]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		return xReturn;
 8006cdc:	697b      	ldr	r3, [r7, #20]
	}
 8006cde:	4618      	mov	r0, r3
 8006ce0:	3718      	adds	r7, #24
 8006ce2:	46bd      	mov	sp, r7
 8006ce4:	bd80      	pop	{r7, pc}
 8006ce6:	bf00      	nop
 8006ce8:	20000418 	.word	0x20000418
 8006cec:	2000041c 	.word	0x2000041c
 8006cf0:	20000520 	.word	0x20000520

08006cf4 <vTaskPriorityDisinheritAfterTimeout>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	void vTaskPriorityDisinheritAfterTimeout( TaskHandle_t const pxMutexHolder, UBaseType_t uxHighestPriorityWaitingTask )
	{
 8006cf4:	b580      	push	{r7, lr}
 8006cf6:	b088      	sub	sp, #32
 8006cf8:	af00      	add	r7, sp, #0
 8006cfa:	6078      	str	r0, [r7, #4]
 8006cfc:	6039      	str	r1, [r7, #0]
	TCB_t * const pxTCB = pxMutexHolder;
 8006cfe:	687b      	ldr	r3, [r7, #4]
 8006d00:	61bb      	str	r3, [r7, #24]
	UBaseType_t uxPriorityUsedOnEntry, uxPriorityToUse;
	const UBaseType_t uxOnlyOneMutexHeld = ( UBaseType_t ) 1;
 8006d02:	2301      	movs	r3, #1
 8006d04:	617b      	str	r3, [r7, #20]

		if( pxMutexHolder != NULL )
 8006d06:	687b      	ldr	r3, [r7, #4]
 8006d08:	2b00      	cmp	r3, #0
 8006d0a:	d079      	beq.n	8006e00 <vTaskPriorityDisinheritAfterTimeout+0x10c>
		{
			/* If pxMutexHolder is not NULL then the holder must hold at least
			one mutex. */
			configASSERT( pxTCB->uxMutexesHeld );
 8006d0c:	69bb      	ldr	r3, [r7, #24]
 8006d0e:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8006d10:	2b00      	cmp	r3, #0
 8006d12:	d10b      	bne.n	8006d2c <vTaskPriorityDisinheritAfterTimeout+0x38>
	__asm volatile
 8006d14:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8006d18:	f383 8811 	msr	BASEPRI, r3
 8006d1c:	f3bf 8f6f 	isb	sy
 8006d20:	f3bf 8f4f 	dsb	sy
 8006d24:	60fb      	str	r3, [r7, #12]
}
 8006d26:	bf00      	nop
 8006d28:	bf00      	nop
 8006d2a:	e7fd      	b.n	8006d28 <vTaskPriorityDisinheritAfterTimeout+0x34>

			/* Determine the priority to which the priority of the task that
			holds the mutex should be set.  This will be the greater of the
			holding task's base priority and the priority of the highest
			priority task that is waiting to obtain the mutex. */
			if( pxTCB->uxBasePriority < uxHighestPriorityWaitingTask )
 8006d2c:	69bb      	ldr	r3, [r7, #24]
 8006d2e:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8006d30:	683a      	ldr	r2, [r7, #0]
 8006d32:	429a      	cmp	r2, r3
 8006d34:	d902      	bls.n	8006d3c <vTaskPriorityDisinheritAfterTimeout+0x48>
			{
				uxPriorityToUse = uxHighestPriorityWaitingTask;
 8006d36:	683b      	ldr	r3, [r7, #0]
 8006d38:	61fb      	str	r3, [r7, #28]
 8006d3a:	e002      	b.n	8006d42 <vTaskPriorityDisinheritAfterTimeout+0x4e>
			}
			else
			{
				uxPriorityToUse = pxTCB->uxBasePriority;
 8006d3c:	69bb      	ldr	r3, [r7, #24]
 8006d3e:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8006d40:	61fb      	str	r3, [r7, #28]
			}

			/* Does the priority need to change? */
			if( pxTCB->uxPriority != uxPriorityToUse )
 8006d42:	69bb      	ldr	r3, [r7, #24]
 8006d44:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8006d46:	69fa      	ldr	r2, [r7, #28]
 8006d48:	429a      	cmp	r2, r3
 8006d4a:	d059      	beq.n	8006e00 <vTaskPriorityDisinheritAfterTimeout+0x10c>
			{
				/* Only disinherit if no other mutexes are held.  This is a
				simplification in the priority inheritance implementation.  If
				the task that holds the mutex is also holding other mutexes then
				the other mutexes may have caused the priority inheritance. */
				if( pxTCB->uxMutexesHeld == uxOnlyOneMutexHeld )
 8006d4c:	69bb      	ldr	r3, [r7, #24]
 8006d4e:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8006d50:	697a      	ldr	r2, [r7, #20]
 8006d52:	429a      	cmp	r2, r3
 8006d54:	d154      	bne.n	8006e00 <vTaskPriorityDisinheritAfterTimeout+0x10c>
				{
					/* If a task has timed out because it already holds the
					mutex it was trying to obtain then it cannot of inherited
					its own priority. */
					configASSERT( pxTCB != pxCurrentTCB );
 8006d56:	4b2c      	ldr	r3, [pc, #176]	@ (8006e08 <vTaskPriorityDisinheritAfterTimeout+0x114>)
 8006d58:	681b      	ldr	r3, [r3, #0]
 8006d5a:	69ba      	ldr	r2, [r7, #24]
 8006d5c:	429a      	cmp	r2, r3
 8006d5e:	d10b      	bne.n	8006d78 <vTaskPriorityDisinheritAfterTimeout+0x84>
	__asm volatile
 8006d60:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8006d64:	f383 8811 	msr	BASEPRI, r3
 8006d68:	f3bf 8f6f 	isb	sy
 8006d6c:	f3bf 8f4f 	dsb	sy
 8006d70:	60bb      	str	r3, [r7, #8]
}
 8006d72:	bf00      	nop
 8006d74:	bf00      	nop
 8006d76:	e7fd      	b.n	8006d74 <vTaskPriorityDisinheritAfterTimeout+0x80>

					/* Disinherit the priority, remembering the previous
					priority to facilitate determining the subject task's
					state. */
					traceTASK_PRIORITY_DISINHERIT( pxTCB, pxTCB->uxBasePriority );
					uxPriorityUsedOnEntry = pxTCB->uxPriority;
 8006d78:	69bb      	ldr	r3, [r7, #24]
 8006d7a:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8006d7c:	613b      	str	r3, [r7, #16]
					pxTCB->uxPriority = uxPriorityToUse;
 8006d7e:	69bb      	ldr	r3, [r7, #24]
 8006d80:	69fa      	ldr	r2, [r7, #28]
 8006d82:	62da      	str	r2, [r3, #44]	@ 0x2c

					/* Only reset the event list item value if the value is not
					being used for anything else. */
					if( ( listGET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ) ) & taskEVENT_LIST_ITEM_VALUE_IN_USE ) == 0UL )
 8006d84:	69bb      	ldr	r3, [r7, #24]
 8006d86:	699b      	ldr	r3, [r3, #24]
 8006d88:	2b00      	cmp	r3, #0
 8006d8a:	db04      	blt.n	8006d96 <vTaskPriorityDisinheritAfterTimeout+0xa2>
					{
						listSET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) uxPriorityToUse ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8006d8c:	69fb      	ldr	r3, [r7, #28]
 8006d8e:	f1c3 0207 	rsb	r2, r3, #7
 8006d92:	69bb      	ldr	r3, [r7, #24]
 8006d94:	619a      	str	r2, [r3, #24]
					then the task that holds the mutex could be in either the
					Ready, Blocked or Suspended states.  Only remove the task
					from its current state list if it is in the Ready state as
					the task's priority is going to change and there is one
					Ready list per priority. */
					if( listIS_CONTAINED_WITHIN( &( pxReadyTasksLists[ uxPriorityUsedOnEntry ] ), &( pxTCB->xStateListItem ) ) != pdFALSE )
 8006d96:	69bb      	ldr	r3, [r7, #24]
 8006d98:	6959      	ldr	r1, [r3, #20]
 8006d9a:	693a      	ldr	r2, [r7, #16]
 8006d9c:	4613      	mov	r3, r2
 8006d9e:	009b      	lsls	r3, r3, #2
 8006da0:	4413      	add	r3, r2
 8006da2:	009b      	lsls	r3, r3, #2
 8006da4:	4a19      	ldr	r2, [pc, #100]	@ (8006e0c <vTaskPriorityDisinheritAfterTimeout+0x118>)
 8006da6:	4413      	add	r3, r2
 8006da8:	4299      	cmp	r1, r3
 8006daa:	d129      	bne.n	8006e00 <vTaskPriorityDisinheritAfterTimeout+0x10c>
					{
						if( uxListRemove( &( pxTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 8006dac:	69bb      	ldr	r3, [r7, #24]
 8006dae:	3304      	adds	r3, #4
 8006db0:	4618      	mov	r0, r3
 8006db2:	f7fe fbb0 	bl	8005516 <uxListRemove>
 8006db6:	4603      	mov	r3, r0
 8006db8:	2b00      	cmp	r3, #0
 8006dba:	d10a      	bne.n	8006dd2 <vTaskPriorityDisinheritAfterTimeout+0xde>
						{
							/* It is known that the task is in its ready list so
							there is no need to check again and the port level
							reset macro can be called directly. */
							portRESET_READY_PRIORITY( pxTCB->uxPriority, uxTopReadyPriority );
 8006dbc:	69bb      	ldr	r3, [r7, #24]
 8006dbe:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8006dc0:	2201      	movs	r2, #1
 8006dc2:	fa02 f303 	lsl.w	r3, r2, r3
 8006dc6:	43da      	mvns	r2, r3
 8006dc8:	4b11      	ldr	r3, [pc, #68]	@ (8006e10 <vTaskPriorityDisinheritAfterTimeout+0x11c>)
 8006dca:	681b      	ldr	r3, [r3, #0]
 8006dcc:	4013      	ands	r3, r2
 8006dce:	4a10      	ldr	r2, [pc, #64]	@ (8006e10 <vTaskPriorityDisinheritAfterTimeout+0x11c>)
 8006dd0:	6013      	str	r3, [r2, #0]
						else
						{
							mtCOVERAGE_TEST_MARKER();
						}

						prvAddTaskToReadyList( pxTCB );
 8006dd2:	69bb      	ldr	r3, [r7, #24]
 8006dd4:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8006dd6:	2201      	movs	r2, #1
 8006dd8:	409a      	lsls	r2, r3
 8006dda:	4b0d      	ldr	r3, [pc, #52]	@ (8006e10 <vTaskPriorityDisinheritAfterTimeout+0x11c>)
 8006ddc:	681b      	ldr	r3, [r3, #0]
 8006dde:	4313      	orrs	r3, r2
 8006de0:	4a0b      	ldr	r2, [pc, #44]	@ (8006e10 <vTaskPriorityDisinheritAfterTimeout+0x11c>)
 8006de2:	6013      	str	r3, [r2, #0]
 8006de4:	69bb      	ldr	r3, [r7, #24]
 8006de6:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8006de8:	4613      	mov	r3, r2
 8006dea:	009b      	lsls	r3, r3, #2
 8006dec:	4413      	add	r3, r2
 8006dee:	009b      	lsls	r3, r3, #2
 8006df0:	4a06      	ldr	r2, [pc, #24]	@ (8006e0c <vTaskPriorityDisinheritAfterTimeout+0x118>)
 8006df2:	441a      	add	r2, r3
 8006df4:	69bb      	ldr	r3, [r7, #24]
 8006df6:	3304      	adds	r3, #4
 8006df8:	4619      	mov	r1, r3
 8006dfa:	4610      	mov	r0, r2
 8006dfc:	f7fe fb2e 	bl	800545c <vListInsertEnd>
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
 8006e00:	bf00      	nop
 8006e02:	3720      	adds	r7, #32
 8006e04:	46bd      	mov	sp, r7
 8006e06:	bd80      	pop	{r7, pc}
 8006e08:	20000418 	.word	0x20000418
 8006e0c:	2000041c 	.word	0x2000041c
 8006e10:	20000520 	.word	0x20000520

08006e14 <pvTaskIncrementMutexHeldCount>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	TaskHandle_t pvTaskIncrementMutexHeldCount( void )
	{
 8006e14:	b480      	push	{r7}
 8006e16:	af00      	add	r7, sp, #0
		/* If xSemaphoreCreateMutex() is called before any tasks have been created
		then pxCurrentTCB will be NULL. */
		if( pxCurrentTCB != NULL )
 8006e18:	4b07      	ldr	r3, [pc, #28]	@ (8006e38 <pvTaskIncrementMutexHeldCount+0x24>)
 8006e1a:	681b      	ldr	r3, [r3, #0]
 8006e1c:	2b00      	cmp	r3, #0
 8006e1e:	d004      	beq.n	8006e2a <pvTaskIncrementMutexHeldCount+0x16>
		{
			( pxCurrentTCB->uxMutexesHeld )++;
 8006e20:	4b05      	ldr	r3, [pc, #20]	@ (8006e38 <pvTaskIncrementMutexHeldCount+0x24>)
 8006e22:	681b      	ldr	r3, [r3, #0]
 8006e24:	6c9a      	ldr	r2, [r3, #72]	@ 0x48
 8006e26:	3201      	adds	r2, #1
 8006e28:	649a      	str	r2, [r3, #72]	@ 0x48
		}

		return pxCurrentTCB;
 8006e2a:	4b03      	ldr	r3, [pc, #12]	@ (8006e38 <pvTaskIncrementMutexHeldCount+0x24>)
 8006e2c:	681b      	ldr	r3, [r3, #0]
	}
 8006e2e:	4618      	mov	r0, r3
 8006e30:	46bd      	mov	sp, r7
 8006e32:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006e36:	4770      	bx	lr
 8006e38:	20000418 	.word	0x20000418

08006e3c <prvAddCurrentTaskToDelayedList>:

#endif
/*-----------------------------------------------------------*/

static void prvAddCurrentTaskToDelayedList( TickType_t xTicksToWait, const BaseType_t xCanBlockIndefinitely )
{
 8006e3c:	b580      	push	{r7, lr}
 8006e3e:	b084      	sub	sp, #16
 8006e40:	af00      	add	r7, sp, #0
 8006e42:	6078      	str	r0, [r7, #4]
 8006e44:	6039      	str	r1, [r7, #0]
TickType_t xTimeToWake;
const TickType_t xConstTickCount = xTickCount;
 8006e46:	4b29      	ldr	r3, [pc, #164]	@ (8006eec <prvAddCurrentTaskToDelayedList+0xb0>)
 8006e48:	681b      	ldr	r3, [r3, #0]
 8006e4a:	60fb      	str	r3, [r7, #12]
	}
	#endif

	/* Remove the task from the ready list before adding it to the blocked list
	as the same list item is used for both lists. */
	if( uxListRemove( &( pxCurrentTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 8006e4c:	4b28      	ldr	r3, [pc, #160]	@ (8006ef0 <prvAddCurrentTaskToDelayedList+0xb4>)
 8006e4e:	681b      	ldr	r3, [r3, #0]
 8006e50:	3304      	adds	r3, #4
 8006e52:	4618      	mov	r0, r3
 8006e54:	f7fe fb5f 	bl	8005516 <uxListRemove>
 8006e58:	4603      	mov	r3, r0
 8006e5a:	2b00      	cmp	r3, #0
 8006e5c:	d10b      	bne.n	8006e76 <prvAddCurrentTaskToDelayedList+0x3a>
	{
		/* The current task must be in a ready list, so there is no need to
		check, and the port reset macro can be called directly. */
		portRESET_READY_PRIORITY( pxCurrentTCB->uxPriority, uxTopReadyPriority ); /*lint !e931 pxCurrentTCB cannot change as it is the calling task.  pxCurrentTCB->uxPriority and uxTopReadyPriority cannot change as called with scheduler suspended or in a critical section. */
 8006e5e:	4b24      	ldr	r3, [pc, #144]	@ (8006ef0 <prvAddCurrentTaskToDelayedList+0xb4>)
 8006e60:	681b      	ldr	r3, [r3, #0]
 8006e62:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8006e64:	2201      	movs	r2, #1
 8006e66:	fa02 f303 	lsl.w	r3, r2, r3
 8006e6a:	43da      	mvns	r2, r3
 8006e6c:	4b21      	ldr	r3, [pc, #132]	@ (8006ef4 <prvAddCurrentTaskToDelayedList+0xb8>)
 8006e6e:	681b      	ldr	r3, [r3, #0]
 8006e70:	4013      	ands	r3, r2
 8006e72:	4a20      	ldr	r2, [pc, #128]	@ (8006ef4 <prvAddCurrentTaskToDelayedList+0xb8>)
 8006e74:	6013      	str	r3, [r2, #0]
		mtCOVERAGE_TEST_MARKER();
	}

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		if( ( xTicksToWait == portMAX_DELAY ) && ( xCanBlockIndefinitely != pdFALSE ) )
 8006e76:	687b      	ldr	r3, [r7, #4]
 8006e78:	f1b3 3fff 	cmp.w	r3, #4294967295
 8006e7c:	d10a      	bne.n	8006e94 <prvAddCurrentTaskToDelayedList+0x58>
 8006e7e:	683b      	ldr	r3, [r7, #0]
 8006e80:	2b00      	cmp	r3, #0
 8006e82:	d007      	beq.n	8006e94 <prvAddCurrentTaskToDelayedList+0x58>
		{
			/* Add the task to the suspended task list instead of a delayed task
			list to ensure it is not woken by a timing event.  It will block
			indefinitely. */
			vListInsertEnd( &xSuspendedTaskList, &( pxCurrentTCB->xStateListItem ) );
 8006e84:	4b1a      	ldr	r3, [pc, #104]	@ (8006ef0 <prvAddCurrentTaskToDelayedList+0xb4>)
 8006e86:	681b      	ldr	r3, [r3, #0]
 8006e88:	3304      	adds	r3, #4
 8006e8a:	4619      	mov	r1, r3
 8006e8c:	481a      	ldr	r0, [pc, #104]	@ (8006ef8 <prvAddCurrentTaskToDelayedList+0xbc>)
 8006e8e:	f7fe fae5 	bl	800545c <vListInsertEnd>

		/* Avoid compiler warning when INCLUDE_vTaskSuspend is not 1. */
		( void ) xCanBlockIndefinitely;
	}
	#endif /* INCLUDE_vTaskSuspend */
}
 8006e92:	e026      	b.n	8006ee2 <prvAddCurrentTaskToDelayedList+0xa6>
			xTimeToWake = xConstTickCount + xTicksToWait;
 8006e94:	68fa      	ldr	r2, [r7, #12]
 8006e96:	687b      	ldr	r3, [r7, #4]
 8006e98:	4413      	add	r3, r2
 8006e9a:	60bb      	str	r3, [r7, #8]
			listSET_LIST_ITEM_VALUE( &( pxCurrentTCB->xStateListItem ), xTimeToWake );
 8006e9c:	4b14      	ldr	r3, [pc, #80]	@ (8006ef0 <prvAddCurrentTaskToDelayedList+0xb4>)
 8006e9e:	681b      	ldr	r3, [r3, #0]
 8006ea0:	68ba      	ldr	r2, [r7, #8]
 8006ea2:	605a      	str	r2, [r3, #4]
			if( xTimeToWake < xConstTickCount )
 8006ea4:	68ba      	ldr	r2, [r7, #8]
 8006ea6:	68fb      	ldr	r3, [r7, #12]
 8006ea8:	429a      	cmp	r2, r3
 8006eaa:	d209      	bcs.n	8006ec0 <prvAddCurrentTaskToDelayedList+0x84>
				vListInsert( pxOverflowDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 8006eac:	4b13      	ldr	r3, [pc, #76]	@ (8006efc <prvAddCurrentTaskToDelayedList+0xc0>)
 8006eae:	681a      	ldr	r2, [r3, #0]
 8006eb0:	4b0f      	ldr	r3, [pc, #60]	@ (8006ef0 <prvAddCurrentTaskToDelayedList+0xb4>)
 8006eb2:	681b      	ldr	r3, [r3, #0]
 8006eb4:	3304      	adds	r3, #4
 8006eb6:	4619      	mov	r1, r3
 8006eb8:	4610      	mov	r0, r2
 8006eba:	f7fe faf3 	bl	80054a4 <vListInsert>
}
 8006ebe:	e010      	b.n	8006ee2 <prvAddCurrentTaskToDelayedList+0xa6>
				vListInsert( pxDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 8006ec0:	4b0f      	ldr	r3, [pc, #60]	@ (8006f00 <prvAddCurrentTaskToDelayedList+0xc4>)
 8006ec2:	681a      	ldr	r2, [r3, #0]
 8006ec4:	4b0a      	ldr	r3, [pc, #40]	@ (8006ef0 <prvAddCurrentTaskToDelayedList+0xb4>)
 8006ec6:	681b      	ldr	r3, [r3, #0]
 8006ec8:	3304      	adds	r3, #4
 8006eca:	4619      	mov	r1, r3
 8006ecc:	4610      	mov	r0, r2
 8006ece:	f7fe fae9 	bl	80054a4 <vListInsert>
				if( xTimeToWake < xNextTaskUnblockTime )
 8006ed2:	4b0c      	ldr	r3, [pc, #48]	@ (8006f04 <prvAddCurrentTaskToDelayedList+0xc8>)
 8006ed4:	681b      	ldr	r3, [r3, #0]
 8006ed6:	68ba      	ldr	r2, [r7, #8]
 8006ed8:	429a      	cmp	r2, r3
 8006eda:	d202      	bcs.n	8006ee2 <prvAddCurrentTaskToDelayedList+0xa6>
					xNextTaskUnblockTime = xTimeToWake;
 8006edc:	4a09      	ldr	r2, [pc, #36]	@ (8006f04 <prvAddCurrentTaskToDelayedList+0xc8>)
 8006ede:	68bb      	ldr	r3, [r7, #8]
 8006ee0:	6013      	str	r3, [r2, #0]
}
 8006ee2:	bf00      	nop
 8006ee4:	3710      	adds	r7, #16
 8006ee6:	46bd      	mov	sp, r7
 8006ee8:	bd80      	pop	{r7, pc}
 8006eea:	bf00      	nop
 8006eec:	2000051c 	.word	0x2000051c
 8006ef0:	20000418 	.word	0x20000418
 8006ef4:	20000520 	.word	0x20000520
 8006ef8:	20000504 	.word	0x20000504
 8006efc:	200004d4 	.word	0x200004d4
 8006f00:	200004d0 	.word	0x200004d0
 8006f04:	20000538 	.word	0x20000538

08006f08 <pxPortInitialiseStack>:

/*
 * See header file for description.
 */
StackType_t *pxPortInitialiseStack( StackType_t *pxTopOfStack, TaskFunction_t pxCode, void *pvParameters )
{
 8006f08:	b480      	push	{r7}
 8006f0a:	b085      	sub	sp, #20
 8006f0c:	af00      	add	r7, sp, #0
 8006f0e:	60f8      	str	r0, [r7, #12]
 8006f10:	60b9      	str	r1, [r7, #8]
 8006f12:	607a      	str	r2, [r7, #4]
	/* Simulate the stack frame as it would be created by a context switch
	interrupt. */

	/* Offset added to account for the way the MCU uses the stack on entry/exit
	of interrupts, and to ensure alignment. */
	pxTopOfStack--;
 8006f14:	68fb      	ldr	r3, [r7, #12]
 8006f16:	3b04      	subs	r3, #4
 8006f18:	60fb      	str	r3, [r7, #12]

	*pxTopOfStack = portINITIAL_XPSR;	/* xPSR */
 8006f1a:	68fb      	ldr	r3, [r7, #12]
 8006f1c:	f04f 7280 	mov.w	r2, #16777216	@ 0x1000000
 8006f20:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 8006f22:	68fb      	ldr	r3, [r7, #12]
 8006f24:	3b04      	subs	r3, #4
 8006f26:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( ( StackType_t ) pxCode ) & portSTART_ADDRESS_MASK;	/* PC */
 8006f28:	68bb      	ldr	r3, [r7, #8]
 8006f2a:	f023 0201 	bic.w	r2, r3, #1
 8006f2e:	68fb      	ldr	r3, [r7, #12]
 8006f30:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 8006f32:	68fb      	ldr	r3, [r7, #12]
 8006f34:	3b04      	subs	r3, #4
 8006f36:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) portTASK_RETURN_ADDRESS;	/* LR */
 8006f38:	4a0c      	ldr	r2, [pc, #48]	@ (8006f6c <pxPortInitialiseStack+0x64>)
 8006f3a:	68fb      	ldr	r3, [r7, #12]
 8006f3c:	601a      	str	r2, [r3, #0]

	/* Save code space by skipping register initialisation. */
	pxTopOfStack -= 5;	/* R12, R3, R2 and R1. */
 8006f3e:	68fb      	ldr	r3, [r7, #12]
 8006f40:	3b14      	subs	r3, #20
 8006f42:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) pvParameters;	/* R0 */
 8006f44:	687a      	ldr	r2, [r7, #4]
 8006f46:	68fb      	ldr	r3, [r7, #12]
 8006f48:	601a      	str	r2, [r3, #0]

	/* A save method is being used that requires each task to maintain its
	own exec return value. */
	pxTopOfStack--;
 8006f4a:	68fb      	ldr	r3, [r7, #12]
 8006f4c:	3b04      	subs	r3, #4
 8006f4e:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = portINITIAL_EXC_RETURN;
 8006f50:	68fb      	ldr	r3, [r7, #12]
 8006f52:	f06f 0202 	mvn.w	r2, #2
 8006f56:	601a      	str	r2, [r3, #0]

	pxTopOfStack -= 8;	/* R11, R10, R9, R8, R7, R6, R5 and R4. */
 8006f58:	68fb      	ldr	r3, [r7, #12]
 8006f5a:	3b20      	subs	r3, #32
 8006f5c:	60fb      	str	r3, [r7, #12]

	return pxTopOfStack;
 8006f5e:	68fb      	ldr	r3, [r7, #12]
}
 8006f60:	4618      	mov	r0, r3
 8006f62:	3714      	adds	r7, #20
 8006f64:	46bd      	mov	sp, r7
 8006f66:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006f6a:	4770      	bx	lr
 8006f6c:	08006f71 	.word	0x08006f71

08006f70 <prvTaskExitError>:
/*-----------------------------------------------------------*/

static void prvTaskExitError( void )
{
 8006f70:	b480      	push	{r7}
 8006f72:	b085      	sub	sp, #20
 8006f74:	af00      	add	r7, sp, #0
volatile uint32_t ulDummy = 0;
 8006f76:	2300      	movs	r3, #0
 8006f78:	607b      	str	r3, [r7, #4]
	its caller as there is nothing to return to.  If a task wants to exit it
	should instead call vTaskDelete( NULL ).

	Artificially force an assert() to be triggered if configASSERT() is
	defined, then stop here so application writers can catch the error. */
	configASSERT( uxCriticalNesting == ~0UL );
 8006f7a:	4b13      	ldr	r3, [pc, #76]	@ (8006fc8 <prvTaskExitError+0x58>)
 8006f7c:	681b      	ldr	r3, [r3, #0]
 8006f7e:	f1b3 3fff 	cmp.w	r3, #4294967295
 8006f82:	d00b      	beq.n	8006f9c <prvTaskExitError+0x2c>
	__asm volatile
 8006f84:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8006f88:	f383 8811 	msr	BASEPRI, r3
 8006f8c:	f3bf 8f6f 	isb	sy
 8006f90:	f3bf 8f4f 	dsb	sy
 8006f94:	60fb      	str	r3, [r7, #12]
}
 8006f96:	bf00      	nop
 8006f98:	bf00      	nop
 8006f9a:	e7fd      	b.n	8006f98 <prvTaskExitError+0x28>
	__asm volatile
 8006f9c:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8006fa0:	f383 8811 	msr	BASEPRI, r3
 8006fa4:	f3bf 8f6f 	isb	sy
 8006fa8:	f3bf 8f4f 	dsb	sy
 8006fac:	60bb      	str	r3, [r7, #8]
}
 8006fae:	bf00      	nop
	portDISABLE_INTERRUPTS();
	while( ulDummy == 0 )
 8006fb0:	bf00      	nop
 8006fb2:	687b      	ldr	r3, [r7, #4]
 8006fb4:	2b00      	cmp	r3, #0
 8006fb6:	d0fc      	beq.n	8006fb2 <prvTaskExitError+0x42>
		about code appearing after this function is called - making ulDummy
		volatile makes the compiler think the function could return and
		therefore not output an 'unreachable code' warning for code that appears
		after it. */
	}
}
 8006fb8:	bf00      	nop
 8006fba:	bf00      	nop
 8006fbc:	3714      	adds	r7, #20
 8006fbe:	46bd      	mov	sp, r7
 8006fc0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006fc4:	4770      	bx	lr
 8006fc6:	bf00      	nop
 8006fc8:	2000000c 	.word	0x2000000c
 8006fcc:	00000000 	.word	0x00000000

08006fd0 <SVC_Handler>:
/*-----------------------------------------------------------*/

void vPortSVCHandler( void )
{
	__asm volatile (
 8006fd0:	4b07      	ldr	r3, [pc, #28]	@ (8006ff0 <pxCurrentTCBConst2>)
 8006fd2:	6819      	ldr	r1, [r3, #0]
 8006fd4:	6808      	ldr	r0, [r1, #0]
 8006fd6:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8006fda:	f380 8809 	msr	PSP, r0
 8006fde:	f3bf 8f6f 	isb	sy
 8006fe2:	f04f 0000 	mov.w	r0, #0
 8006fe6:	f380 8811 	msr	BASEPRI, r0
 8006fea:	4770      	bx	lr
 8006fec:	f3af 8000 	nop.w

08006ff0 <pxCurrentTCBConst2>:
 8006ff0:	20000418 	.word	0x20000418
					"	bx r14							\n"
					"									\n"
					"	.align 4						\n"
					"pxCurrentTCBConst2: .word pxCurrentTCB				\n"
				);
}
 8006ff4:	bf00      	nop
 8006ff6:	bf00      	nop

08006ff8 <prvPortStartFirstTask>:
{
	/* Start the first task.  This also clears the bit that indicates the FPU is
	in use in case the FPU was used before the scheduler was started - which
	would otherwise result in the unnecessary leaving of space in the SVC stack
	for lazy saving of FPU registers. */
	__asm volatile(
 8006ff8:	4808      	ldr	r0, [pc, #32]	@ (800701c <prvPortStartFirstTask+0x24>)
 8006ffa:	6800      	ldr	r0, [r0, #0]
 8006ffc:	6800      	ldr	r0, [r0, #0]
 8006ffe:	f380 8808 	msr	MSP, r0
 8007002:	f04f 0000 	mov.w	r0, #0
 8007006:	f380 8814 	msr	CONTROL, r0
 800700a:	b662      	cpsie	i
 800700c:	b661      	cpsie	f
 800700e:	f3bf 8f4f 	dsb	sy
 8007012:	f3bf 8f6f 	isb	sy
 8007016:	df00      	svc	0
 8007018:	bf00      	nop
					" dsb					\n"
					" isb					\n"
					" svc 0					\n" /* System call to start first task. */
					" nop					\n"
				);
}
 800701a:	bf00      	nop
 800701c:	e000ed08 	.word	0xe000ed08

08007020 <xPortStartScheduler>:

/*
 * See header file for description.
 */
BaseType_t xPortStartScheduler( void )
{
 8007020:	b580      	push	{r7, lr}
 8007022:	b086      	sub	sp, #24
 8007024:	af00      	add	r7, sp, #0
	configASSERT( configMAX_SYSCALL_INTERRUPT_PRIORITY );

	/* This port can be used on all revisions of the Cortex-M7 core other than
	the r0p1 parts.  r0p1 parts should use the port from the
	/source/portable/GCC/ARM_CM7/r0p1 directory. */
	configASSERT( portCPUID != portCORTEX_M7_r0p1_ID );
 8007026:	4b47      	ldr	r3, [pc, #284]	@ (8007144 <xPortStartScheduler+0x124>)
 8007028:	681b      	ldr	r3, [r3, #0]
 800702a:	4a47      	ldr	r2, [pc, #284]	@ (8007148 <xPortStartScheduler+0x128>)
 800702c:	4293      	cmp	r3, r2
 800702e:	d10b      	bne.n	8007048 <xPortStartScheduler+0x28>
	__asm volatile
 8007030:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8007034:	f383 8811 	msr	BASEPRI, r3
 8007038:	f3bf 8f6f 	isb	sy
 800703c:	f3bf 8f4f 	dsb	sy
 8007040:	613b      	str	r3, [r7, #16]
}
 8007042:	bf00      	nop
 8007044:	bf00      	nop
 8007046:	e7fd      	b.n	8007044 <xPortStartScheduler+0x24>
	configASSERT( portCPUID != portCORTEX_M7_r0p0_ID );
 8007048:	4b3e      	ldr	r3, [pc, #248]	@ (8007144 <xPortStartScheduler+0x124>)
 800704a:	681b      	ldr	r3, [r3, #0]
 800704c:	4a3f      	ldr	r2, [pc, #252]	@ (800714c <xPortStartScheduler+0x12c>)
 800704e:	4293      	cmp	r3, r2
 8007050:	d10b      	bne.n	800706a <xPortStartScheduler+0x4a>
	__asm volatile
 8007052:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8007056:	f383 8811 	msr	BASEPRI, r3
 800705a:	f3bf 8f6f 	isb	sy
 800705e:	f3bf 8f4f 	dsb	sy
 8007062:	60fb      	str	r3, [r7, #12]
}
 8007064:	bf00      	nop
 8007066:	bf00      	nop
 8007068:	e7fd      	b.n	8007066 <xPortStartScheduler+0x46>

	#if( configASSERT_DEFINED == 1 )
	{
		volatile uint32_t ulOriginalPriority;
		volatile uint8_t * const pucFirstUserPriorityRegister = ( volatile uint8_t * const ) ( portNVIC_IP_REGISTERS_OFFSET_16 + portFIRST_USER_INTERRUPT_NUMBER );
 800706a:	4b39      	ldr	r3, [pc, #228]	@ (8007150 <xPortStartScheduler+0x130>)
 800706c:	617b      	str	r3, [r7, #20]
		functions can be called.  ISR safe functions are those that end in
		"FromISR".  FreeRTOS maintains separate thread and ISR API functions to
		ensure interrupt entry is as fast and simple as possible.

		Save the interrupt priority value that is about to be clobbered. */
		ulOriginalPriority = *pucFirstUserPriorityRegister;
 800706e:	697b      	ldr	r3, [r7, #20]
 8007070:	781b      	ldrb	r3, [r3, #0]
 8007072:	b2db      	uxtb	r3, r3
 8007074:	607b      	str	r3, [r7, #4]

		/* Determine the number of priority bits available.  First write to all
		possible bits. */
		*pucFirstUserPriorityRegister = portMAX_8_BIT_VALUE;
 8007076:	697b      	ldr	r3, [r7, #20]
 8007078:	22ff      	movs	r2, #255	@ 0xff
 800707a:	701a      	strb	r2, [r3, #0]

		/* Read the value back to see how many bits stuck. */
		ucMaxPriorityValue = *pucFirstUserPriorityRegister;
 800707c:	697b      	ldr	r3, [r7, #20]
 800707e:	781b      	ldrb	r3, [r3, #0]
 8007080:	b2db      	uxtb	r3, r3
 8007082:	70fb      	strb	r3, [r7, #3]

		/* Use the same mask on the maximum system call priority. */
		ucMaxSysCallPriority = configMAX_SYSCALL_INTERRUPT_PRIORITY & ucMaxPriorityValue;
 8007084:	78fb      	ldrb	r3, [r7, #3]
 8007086:	b2db      	uxtb	r3, r3
 8007088:	f003 0350 	and.w	r3, r3, #80	@ 0x50
 800708c:	b2da      	uxtb	r2, r3
 800708e:	4b31      	ldr	r3, [pc, #196]	@ (8007154 <xPortStartScheduler+0x134>)
 8007090:	701a      	strb	r2, [r3, #0]

		/* Calculate the maximum acceptable priority group value for the number
		of bits read back. */
		ulMaxPRIGROUPValue = portMAX_PRIGROUP_BITS;
 8007092:	4b31      	ldr	r3, [pc, #196]	@ (8007158 <xPortStartScheduler+0x138>)
 8007094:	2207      	movs	r2, #7
 8007096:	601a      	str	r2, [r3, #0]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 8007098:	e009      	b.n	80070ae <xPortStartScheduler+0x8e>
		{
			ulMaxPRIGROUPValue--;
 800709a:	4b2f      	ldr	r3, [pc, #188]	@ (8007158 <xPortStartScheduler+0x138>)
 800709c:	681b      	ldr	r3, [r3, #0]
 800709e:	3b01      	subs	r3, #1
 80070a0:	4a2d      	ldr	r2, [pc, #180]	@ (8007158 <xPortStartScheduler+0x138>)
 80070a2:	6013      	str	r3, [r2, #0]
			ucMaxPriorityValue <<= ( uint8_t ) 0x01;
 80070a4:	78fb      	ldrb	r3, [r7, #3]
 80070a6:	b2db      	uxtb	r3, r3
 80070a8:	005b      	lsls	r3, r3, #1
 80070aa:	b2db      	uxtb	r3, r3
 80070ac:	70fb      	strb	r3, [r7, #3]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 80070ae:	78fb      	ldrb	r3, [r7, #3]
 80070b0:	b2db      	uxtb	r3, r3
 80070b2:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 80070b6:	2b80      	cmp	r3, #128	@ 0x80
 80070b8:	d0ef      	beq.n	800709a <xPortStartScheduler+0x7a>
		#ifdef configPRIO_BITS
		{
			/* Check the FreeRTOS configuration that defines the number of
			priority bits matches the number of priority bits actually queried
			from the hardware. */
			configASSERT( ( portMAX_PRIGROUP_BITS - ulMaxPRIGROUPValue ) == configPRIO_BITS );
 80070ba:	4b27      	ldr	r3, [pc, #156]	@ (8007158 <xPortStartScheduler+0x138>)
 80070bc:	681b      	ldr	r3, [r3, #0]
 80070be:	f1c3 0307 	rsb	r3, r3, #7
 80070c2:	2b04      	cmp	r3, #4
 80070c4:	d00b      	beq.n	80070de <xPortStartScheduler+0xbe>
	__asm volatile
 80070c6:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80070ca:	f383 8811 	msr	BASEPRI, r3
 80070ce:	f3bf 8f6f 	isb	sy
 80070d2:	f3bf 8f4f 	dsb	sy
 80070d6:	60bb      	str	r3, [r7, #8]
}
 80070d8:	bf00      	nop
 80070da:	bf00      	nop
 80070dc:	e7fd      	b.n	80070da <xPortStartScheduler+0xba>
		}
		#endif

		/* Shift the priority group value back to its position within the AIRCR
		register. */
		ulMaxPRIGROUPValue <<= portPRIGROUP_SHIFT;
 80070de:	4b1e      	ldr	r3, [pc, #120]	@ (8007158 <xPortStartScheduler+0x138>)
 80070e0:	681b      	ldr	r3, [r3, #0]
 80070e2:	021b      	lsls	r3, r3, #8
 80070e4:	4a1c      	ldr	r2, [pc, #112]	@ (8007158 <xPortStartScheduler+0x138>)
 80070e6:	6013      	str	r3, [r2, #0]
		ulMaxPRIGROUPValue &= portPRIORITY_GROUP_MASK;
 80070e8:	4b1b      	ldr	r3, [pc, #108]	@ (8007158 <xPortStartScheduler+0x138>)
 80070ea:	681b      	ldr	r3, [r3, #0]
 80070ec:	f403 63e0 	and.w	r3, r3, #1792	@ 0x700
 80070f0:	4a19      	ldr	r2, [pc, #100]	@ (8007158 <xPortStartScheduler+0x138>)
 80070f2:	6013      	str	r3, [r2, #0]

		/* Restore the clobbered interrupt priority register to its original
		value. */
		*pucFirstUserPriorityRegister = ulOriginalPriority;
 80070f4:	687b      	ldr	r3, [r7, #4]
 80070f6:	b2da      	uxtb	r2, r3
 80070f8:	697b      	ldr	r3, [r7, #20]
 80070fa:	701a      	strb	r2, [r3, #0]
	}
	#endif /* conifgASSERT_DEFINED */

	/* Make PendSV and SysTick the lowest priority interrupts. */
	portNVIC_SYSPRI2_REG |= portNVIC_PENDSV_PRI;
 80070fc:	4b17      	ldr	r3, [pc, #92]	@ (800715c <xPortStartScheduler+0x13c>)
 80070fe:	681b      	ldr	r3, [r3, #0]
 8007100:	4a16      	ldr	r2, [pc, #88]	@ (800715c <xPortStartScheduler+0x13c>)
 8007102:	f443 0370 	orr.w	r3, r3, #15728640	@ 0xf00000
 8007106:	6013      	str	r3, [r2, #0]
	portNVIC_SYSPRI2_REG |= portNVIC_SYSTICK_PRI;
 8007108:	4b14      	ldr	r3, [pc, #80]	@ (800715c <xPortStartScheduler+0x13c>)
 800710a:	681b      	ldr	r3, [r3, #0]
 800710c:	4a13      	ldr	r2, [pc, #76]	@ (800715c <xPortStartScheduler+0x13c>)
 800710e:	f043 4370 	orr.w	r3, r3, #4026531840	@ 0xf0000000
 8007112:	6013      	str	r3, [r2, #0]

	/* Start the timer that generates the tick ISR.  Interrupts are disabled
	here already. */
	vPortSetupTimerInterrupt();
 8007114:	f000 f8da 	bl	80072cc <vPortSetupTimerInterrupt>

	/* Initialise the critical nesting count ready for the first task. */
	uxCriticalNesting = 0;
 8007118:	4b11      	ldr	r3, [pc, #68]	@ (8007160 <xPortStartScheduler+0x140>)
 800711a:	2200      	movs	r2, #0
 800711c:	601a      	str	r2, [r3, #0]

	/* Ensure the VFP is enabled - it should be anyway. */
	vPortEnableVFP();
 800711e:	f000 f8f9 	bl	8007314 <vPortEnableVFP>

	/* Lazy save always. */
	*( portFPCCR ) |= portASPEN_AND_LSPEN_BITS;
 8007122:	4b10      	ldr	r3, [pc, #64]	@ (8007164 <xPortStartScheduler+0x144>)
 8007124:	681b      	ldr	r3, [r3, #0]
 8007126:	4a0f      	ldr	r2, [pc, #60]	@ (8007164 <xPortStartScheduler+0x144>)
 8007128:	f043 4340 	orr.w	r3, r3, #3221225472	@ 0xc0000000
 800712c:	6013      	str	r3, [r2, #0]

	/* Start the first task. */
	prvPortStartFirstTask();
 800712e:	f7ff ff63 	bl	8006ff8 <prvPortStartFirstTask>
	exit error function to prevent compiler warnings about a static function
	not being called in the case that the application writer overrides this
	functionality by defining configTASK_RETURN_ADDRESS.  Call
	vTaskSwitchContext() so link time optimisation does not remove the
	symbol. */
	vTaskSwitchContext();
 8007132:	f7ff fa73 	bl	800661c <vTaskSwitchContext>
	prvTaskExitError();
 8007136:	f7ff ff1b 	bl	8006f70 <prvTaskExitError>

	/* Should not get here! */
	return 0;
 800713a:	2300      	movs	r3, #0
}
 800713c:	4618      	mov	r0, r3
 800713e:	3718      	adds	r7, #24
 8007140:	46bd      	mov	sp, r7
 8007142:	bd80      	pop	{r7, pc}
 8007144:	e000ed00 	.word	0xe000ed00
 8007148:	410fc271 	.word	0x410fc271
 800714c:	410fc270 	.word	0x410fc270
 8007150:	e000e400 	.word	0xe000e400
 8007154:	20000544 	.word	0x20000544
 8007158:	20000548 	.word	0x20000548
 800715c:	e000ed20 	.word	0xe000ed20
 8007160:	2000000c 	.word	0x2000000c
 8007164:	e000ef34 	.word	0xe000ef34

08007168 <vPortEnterCritical>:
	configASSERT( uxCriticalNesting == 1000UL );
}
/*-----------------------------------------------------------*/

void vPortEnterCritical( void )
{
 8007168:	b480      	push	{r7}
 800716a:	b083      	sub	sp, #12
 800716c:	af00      	add	r7, sp, #0
	__asm volatile
 800716e:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8007172:	f383 8811 	msr	BASEPRI, r3
 8007176:	f3bf 8f6f 	isb	sy
 800717a:	f3bf 8f4f 	dsb	sy
 800717e:	607b      	str	r3, [r7, #4]
}
 8007180:	bf00      	nop
	portDISABLE_INTERRUPTS();
	uxCriticalNesting++;
 8007182:	4b10      	ldr	r3, [pc, #64]	@ (80071c4 <vPortEnterCritical+0x5c>)
 8007184:	681b      	ldr	r3, [r3, #0]
 8007186:	3301      	adds	r3, #1
 8007188:	4a0e      	ldr	r2, [pc, #56]	@ (80071c4 <vPortEnterCritical+0x5c>)
 800718a:	6013      	str	r3, [r2, #0]
	/* This is not the interrupt safe version of the enter critical function so
	assert() if it is being called from an interrupt context.  Only API
	functions that end in "FromISR" can be used in an interrupt.  Only assert if
	the critical nesting count is 1 to protect against recursive calls if the
	assert function also uses a critical section. */
	if( uxCriticalNesting == 1 )
 800718c:	4b0d      	ldr	r3, [pc, #52]	@ (80071c4 <vPortEnterCritical+0x5c>)
 800718e:	681b      	ldr	r3, [r3, #0]
 8007190:	2b01      	cmp	r3, #1
 8007192:	d110      	bne.n	80071b6 <vPortEnterCritical+0x4e>
	{
		configASSERT( ( portNVIC_INT_CTRL_REG & portVECTACTIVE_MASK ) == 0 );
 8007194:	4b0c      	ldr	r3, [pc, #48]	@ (80071c8 <vPortEnterCritical+0x60>)
 8007196:	681b      	ldr	r3, [r3, #0]
 8007198:	b2db      	uxtb	r3, r3
 800719a:	2b00      	cmp	r3, #0
 800719c:	d00b      	beq.n	80071b6 <vPortEnterCritical+0x4e>
	__asm volatile
 800719e:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80071a2:	f383 8811 	msr	BASEPRI, r3
 80071a6:	f3bf 8f6f 	isb	sy
 80071aa:	f3bf 8f4f 	dsb	sy
 80071ae:	603b      	str	r3, [r7, #0]
}
 80071b0:	bf00      	nop
 80071b2:	bf00      	nop
 80071b4:	e7fd      	b.n	80071b2 <vPortEnterCritical+0x4a>
	}
}
 80071b6:	bf00      	nop
 80071b8:	370c      	adds	r7, #12
 80071ba:	46bd      	mov	sp, r7
 80071bc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80071c0:	4770      	bx	lr
 80071c2:	bf00      	nop
 80071c4:	2000000c 	.word	0x2000000c
 80071c8:	e000ed04 	.word	0xe000ed04

080071cc <vPortExitCritical>:
/*-----------------------------------------------------------*/

void vPortExitCritical( void )
{
 80071cc:	b480      	push	{r7}
 80071ce:	b083      	sub	sp, #12
 80071d0:	af00      	add	r7, sp, #0
	configASSERT( uxCriticalNesting );
 80071d2:	4b12      	ldr	r3, [pc, #72]	@ (800721c <vPortExitCritical+0x50>)
 80071d4:	681b      	ldr	r3, [r3, #0]
 80071d6:	2b00      	cmp	r3, #0
 80071d8:	d10b      	bne.n	80071f2 <vPortExitCritical+0x26>
	__asm volatile
 80071da:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80071de:	f383 8811 	msr	BASEPRI, r3
 80071e2:	f3bf 8f6f 	isb	sy
 80071e6:	f3bf 8f4f 	dsb	sy
 80071ea:	607b      	str	r3, [r7, #4]
}
 80071ec:	bf00      	nop
 80071ee:	bf00      	nop
 80071f0:	e7fd      	b.n	80071ee <vPortExitCritical+0x22>
	uxCriticalNesting--;
 80071f2:	4b0a      	ldr	r3, [pc, #40]	@ (800721c <vPortExitCritical+0x50>)
 80071f4:	681b      	ldr	r3, [r3, #0]
 80071f6:	3b01      	subs	r3, #1
 80071f8:	4a08      	ldr	r2, [pc, #32]	@ (800721c <vPortExitCritical+0x50>)
 80071fa:	6013      	str	r3, [r2, #0]
	if( uxCriticalNesting == 0 )
 80071fc:	4b07      	ldr	r3, [pc, #28]	@ (800721c <vPortExitCritical+0x50>)
 80071fe:	681b      	ldr	r3, [r3, #0]
 8007200:	2b00      	cmp	r3, #0
 8007202:	d105      	bne.n	8007210 <vPortExitCritical+0x44>
 8007204:	2300      	movs	r3, #0
 8007206:	603b      	str	r3, [r7, #0]
}
/*-----------------------------------------------------------*/

portFORCE_INLINE static void vPortSetBASEPRI( uint32_t ulNewMaskValue )
{
	__asm volatile
 8007208:	683b      	ldr	r3, [r7, #0]
 800720a:	f383 8811 	msr	BASEPRI, r3
	(
		"	msr basepri, %0	" :: "r" ( ulNewMaskValue ) : "memory"
	);
}
 800720e:	bf00      	nop
	{
		portENABLE_INTERRUPTS();
	}
}
 8007210:	bf00      	nop
 8007212:	370c      	adds	r7, #12
 8007214:	46bd      	mov	sp, r7
 8007216:	f85d 7b04 	ldr.w	r7, [sp], #4
 800721a:	4770      	bx	lr
 800721c:	2000000c 	.word	0x2000000c

08007220 <PendSV_Handler>:

void xPortPendSVHandler( void )
{
	/* This is a naked function. */

	__asm volatile
 8007220:	f3ef 8009 	mrs	r0, PSP
 8007224:	f3bf 8f6f 	isb	sy
 8007228:	4b15      	ldr	r3, [pc, #84]	@ (8007280 <pxCurrentTCBConst>)
 800722a:	681a      	ldr	r2, [r3, #0]
 800722c:	f01e 0f10 	tst.w	lr, #16
 8007230:	bf08      	it	eq
 8007232:	ed20 8a10 	vstmdbeq	r0!, {s16-s31}
 8007236:	e920 4ff0 	stmdb	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800723a:	6010      	str	r0, [r2, #0]
 800723c:	e92d 0009 	stmdb	sp!, {r0, r3}
 8007240:	f04f 0050 	mov.w	r0, #80	@ 0x50
 8007244:	f380 8811 	msr	BASEPRI, r0
 8007248:	f3bf 8f4f 	dsb	sy
 800724c:	f3bf 8f6f 	isb	sy
 8007250:	f7ff f9e4 	bl	800661c <vTaskSwitchContext>
 8007254:	f04f 0000 	mov.w	r0, #0
 8007258:	f380 8811 	msr	BASEPRI, r0
 800725c:	bc09      	pop	{r0, r3}
 800725e:	6819      	ldr	r1, [r3, #0]
 8007260:	6808      	ldr	r0, [r1, #0]
 8007262:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8007266:	f01e 0f10 	tst.w	lr, #16
 800726a:	bf08      	it	eq
 800726c:	ecb0 8a10 	vldmiaeq	r0!, {s16-s31}
 8007270:	f380 8809 	msr	PSP, r0
 8007274:	f3bf 8f6f 	isb	sy
 8007278:	4770      	bx	lr
 800727a:	bf00      	nop
 800727c:	f3af 8000 	nop.w

08007280 <pxCurrentTCBConst>:
 8007280:	20000418 	.word	0x20000418
	"										\n"
	"	.align 4							\n"
	"pxCurrentTCBConst: .word pxCurrentTCB	\n"
	::"i"(configMAX_SYSCALL_INTERRUPT_PRIORITY)
	);
}
 8007284:	bf00      	nop
 8007286:	bf00      	nop

08007288 <SysTick_Handler>:
/*-----------------------------------------------------------*/

void xPortSysTickHandler( void )
{
 8007288:	b580      	push	{r7, lr}
 800728a:	b082      	sub	sp, #8
 800728c:	af00      	add	r7, sp, #0
	__asm volatile
 800728e:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8007292:	f383 8811 	msr	BASEPRI, r3
 8007296:	f3bf 8f6f 	isb	sy
 800729a:	f3bf 8f4f 	dsb	sy
 800729e:	607b      	str	r3, [r7, #4]
}
 80072a0:	bf00      	nop
	save and then restore the interrupt mask value as its value is already
	known. */
	portDISABLE_INTERRUPTS();
	{
		/* Increment the RTOS tick. */
		if( xTaskIncrementTick() != pdFALSE )
 80072a2:	f7ff f901 	bl	80064a8 <xTaskIncrementTick>
 80072a6:	4603      	mov	r3, r0
 80072a8:	2b00      	cmp	r3, #0
 80072aa:	d003      	beq.n	80072b4 <SysTick_Handler+0x2c>
		{
			/* A context switch is required.  Context switching is performed in
			the PendSV interrupt.  Pend the PendSV interrupt. */
			portNVIC_INT_CTRL_REG = portNVIC_PENDSVSET_BIT;
 80072ac:	4b06      	ldr	r3, [pc, #24]	@ (80072c8 <SysTick_Handler+0x40>)
 80072ae:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 80072b2:	601a      	str	r2, [r3, #0]
 80072b4:	2300      	movs	r3, #0
 80072b6:	603b      	str	r3, [r7, #0]
	__asm volatile
 80072b8:	683b      	ldr	r3, [r7, #0]
 80072ba:	f383 8811 	msr	BASEPRI, r3
}
 80072be:	bf00      	nop
		}
	}
	portENABLE_INTERRUPTS();
}
 80072c0:	bf00      	nop
 80072c2:	3708      	adds	r7, #8
 80072c4:	46bd      	mov	sp, r7
 80072c6:	bd80      	pop	{r7, pc}
 80072c8:	e000ed04 	.word	0xe000ed04

080072cc <vPortSetupTimerInterrupt>:
/*
 * Setup the systick timer to generate the tick interrupts at the required
 * frequency.
 */
__attribute__(( weak )) void vPortSetupTimerInterrupt( void )
{
 80072cc:	b480      	push	{r7}
 80072ce:	af00      	add	r7, sp, #0
		ulStoppedTimerCompensation = portMISSED_COUNTS_FACTOR / ( configCPU_CLOCK_HZ / configSYSTICK_CLOCK_HZ );
	}
	#endif /* configUSE_TICKLESS_IDLE */

	/* Stop and clear the SysTick. */
	portNVIC_SYSTICK_CTRL_REG = 0UL;
 80072d0:	4b0b      	ldr	r3, [pc, #44]	@ (8007300 <vPortSetupTimerInterrupt+0x34>)
 80072d2:	2200      	movs	r2, #0
 80072d4:	601a      	str	r2, [r3, #0]
	portNVIC_SYSTICK_CURRENT_VALUE_REG = 0UL;
 80072d6:	4b0b      	ldr	r3, [pc, #44]	@ (8007304 <vPortSetupTimerInterrupt+0x38>)
 80072d8:	2200      	movs	r2, #0
 80072da:	601a      	str	r2, [r3, #0]

	/* Configure SysTick to interrupt at the requested rate. */
	portNVIC_SYSTICK_LOAD_REG = ( configSYSTICK_CLOCK_HZ / configTICK_RATE_HZ ) - 1UL;
 80072dc:	4b0a      	ldr	r3, [pc, #40]	@ (8007308 <vPortSetupTimerInterrupt+0x3c>)
 80072de:	681b      	ldr	r3, [r3, #0]
 80072e0:	4a0a      	ldr	r2, [pc, #40]	@ (800730c <vPortSetupTimerInterrupt+0x40>)
 80072e2:	fba2 2303 	umull	r2, r3, r2, r3
 80072e6:	099b      	lsrs	r3, r3, #6
 80072e8:	4a09      	ldr	r2, [pc, #36]	@ (8007310 <vPortSetupTimerInterrupt+0x44>)
 80072ea:	3b01      	subs	r3, #1
 80072ec:	6013      	str	r3, [r2, #0]
	portNVIC_SYSTICK_CTRL_REG = ( portNVIC_SYSTICK_CLK_BIT | portNVIC_SYSTICK_INT_BIT | portNVIC_SYSTICK_ENABLE_BIT );
 80072ee:	4b04      	ldr	r3, [pc, #16]	@ (8007300 <vPortSetupTimerInterrupt+0x34>)
 80072f0:	2207      	movs	r2, #7
 80072f2:	601a      	str	r2, [r3, #0]
}
 80072f4:	bf00      	nop
 80072f6:	46bd      	mov	sp, r7
 80072f8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80072fc:	4770      	bx	lr
 80072fe:	bf00      	nop
 8007300:	e000e010 	.word	0xe000e010
 8007304:	e000e018 	.word	0xe000e018
 8007308:	20000000 	.word	0x20000000
 800730c:	10624dd3 	.word	0x10624dd3
 8007310:	e000e014 	.word	0xe000e014

08007314 <vPortEnableVFP>:
/*-----------------------------------------------------------*/

/* This is a naked function. */
static void vPortEnableVFP( void )
{
	__asm volatile
 8007314:	f8df 000c 	ldr.w	r0, [pc, #12]	@ 8007324 <vPortEnableVFP+0x10>
 8007318:	6801      	ldr	r1, [r0, #0]
 800731a:	f441 0170 	orr.w	r1, r1, #15728640	@ 0xf00000
 800731e:	6001      	str	r1, [r0, #0]
 8007320:	4770      	bx	lr
		"								\n"
		"	orr r1, r1, #( 0xf << 20 )	\n" /* Enable CP10 and CP11 coprocessors, then save back. */
		"	str r1, [r0]				\n"
		"	bx r14						"
	);
}
 8007322:	bf00      	nop
 8007324:	e000ed88 	.word	0xe000ed88

08007328 <pvPortMalloc>:
static size_t xBlockAllocatedBit = 0;

/*-----------------------------------------------------------*/

void *pvPortMalloc( size_t xWantedSize )
{
 8007328:	b580      	push	{r7, lr}
 800732a:	b08a      	sub	sp, #40	@ 0x28
 800732c:	af00      	add	r7, sp, #0
 800732e:	6078      	str	r0, [r7, #4]
BlockLink_t *pxBlock, *pxPreviousBlock, *pxNewBlockLink;
void *pvReturn = NULL;
 8007330:	2300      	movs	r3, #0
 8007332:	61fb      	str	r3, [r7, #28]

	vTaskSuspendAll();
 8007334:	f7ff f80c 	bl	8006350 <vTaskSuspendAll>
	{
		/* If this is the first call to malloc then the heap will require
		initialisation to setup the list of free blocks. */
		if( pxEnd == NULL )
 8007338:	4b5c      	ldr	r3, [pc, #368]	@ (80074ac <pvPortMalloc+0x184>)
 800733a:	681b      	ldr	r3, [r3, #0]
 800733c:	2b00      	cmp	r3, #0
 800733e:	d101      	bne.n	8007344 <pvPortMalloc+0x1c>
		{
			prvHeapInit();
 8007340:	f000 f924 	bl	800758c <prvHeapInit>

		/* Check the requested block size is not so large that the top bit is
		set.  The top bit of the block size member of the BlockLink_t structure
		is used to determine who owns the block - the application or the
		kernel, so it must be free. */
		if( ( xWantedSize & xBlockAllocatedBit ) == 0 )
 8007344:	4b5a      	ldr	r3, [pc, #360]	@ (80074b0 <pvPortMalloc+0x188>)
 8007346:	681a      	ldr	r2, [r3, #0]
 8007348:	687b      	ldr	r3, [r7, #4]
 800734a:	4013      	ands	r3, r2
 800734c:	2b00      	cmp	r3, #0
 800734e:	f040 8095 	bne.w	800747c <pvPortMalloc+0x154>
		{
			/* The wanted size is increased so it can contain a BlockLink_t
			structure in addition to the requested amount of bytes. */
			if( xWantedSize > 0 )
 8007352:	687b      	ldr	r3, [r7, #4]
 8007354:	2b00      	cmp	r3, #0
 8007356:	d01e      	beq.n	8007396 <pvPortMalloc+0x6e>
			{
				xWantedSize += xHeapStructSize;
 8007358:	2208      	movs	r2, #8
 800735a:	687b      	ldr	r3, [r7, #4]
 800735c:	4413      	add	r3, r2
 800735e:	607b      	str	r3, [r7, #4]

				/* Ensure that blocks are always aligned to the required number
				of bytes. */
				if( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) != 0x00 )
 8007360:	687b      	ldr	r3, [r7, #4]
 8007362:	f003 0307 	and.w	r3, r3, #7
 8007366:	2b00      	cmp	r3, #0
 8007368:	d015      	beq.n	8007396 <pvPortMalloc+0x6e>
				{
					/* Byte alignment required. */
					xWantedSize += ( portBYTE_ALIGNMENT - ( xWantedSize & portBYTE_ALIGNMENT_MASK ) );
 800736a:	687b      	ldr	r3, [r7, #4]
 800736c:	f023 0307 	bic.w	r3, r3, #7
 8007370:	3308      	adds	r3, #8
 8007372:	607b      	str	r3, [r7, #4]
					configASSERT( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) == 0 );
 8007374:	687b      	ldr	r3, [r7, #4]
 8007376:	f003 0307 	and.w	r3, r3, #7
 800737a:	2b00      	cmp	r3, #0
 800737c:	d00b      	beq.n	8007396 <pvPortMalloc+0x6e>
	__asm volatile
 800737e:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8007382:	f383 8811 	msr	BASEPRI, r3
 8007386:	f3bf 8f6f 	isb	sy
 800738a:	f3bf 8f4f 	dsb	sy
 800738e:	617b      	str	r3, [r7, #20]
}
 8007390:	bf00      	nop
 8007392:	bf00      	nop
 8007394:	e7fd      	b.n	8007392 <pvPortMalloc+0x6a>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}

			if( ( xWantedSize > 0 ) && ( xWantedSize <= xFreeBytesRemaining ) )
 8007396:	687b      	ldr	r3, [r7, #4]
 8007398:	2b00      	cmp	r3, #0
 800739a:	d06f      	beq.n	800747c <pvPortMalloc+0x154>
 800739c:	4b45      	ldr	r3, [pc, #276]	@ (80074b4 <pvPortMalloc+0x18c>)
 800739e:	681b      	ldr	r3, [r3, #0]
 80073a0:	687a      	ldr	r2, [r7, #4]
 80073a2:	429a      	cmp	r2, r3
 80073a4:	d86a      	bhi.n	800747c <pvPortMalloc+0x154>
			{
				/* Traverse the list from the start	(lowest address) block until
				one	of adequate size is found. */
				pxPreviousBlock = &xStart;
 80073a6:	4b44      	ldr	r3, [pc, #272]	@ (80074b8 <pvPortMalloc+0x190>)
 80073a8:	623b      	str	r3, [r7, #32]
				pxBlock = xStart.pxNextFreeBlock;
 80073aa:	4b43      	ldr	r3, [pc, #268]	@ (80074b8 <pvPortMalloc+0x190>)
 80073ac:	681b      	ldr	r3, [r3, #0]
 80073ae:	627b      	str	r3, [r7, #36]	@ 0x24
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 80073b0:	e004      	b.n	80073bc <pvPortMalloc+0x94>
				{
					pxPreviousBlock = pxBlock;
 80073b2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80073b4:	623b      	str	r3, [r7, #32]
					pxBlock = pxBlock->pxNextFreeBlock;
 80073b6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80073b8:	681b      	ldr	r3, [r3, #0]
 80073ba:	627b      	str	r3, [r7, #36]	@ 0x24
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 80073bc:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80073be:	685b      	ldr	r3, [r3, #4]
 80073c0:	687a      	ldr	r2, [r7, #4]
 80073c2:	429a      	cmp	r2, r3
 80073c4:	d903      	bls.n	80073ce <pvPortMalloc+0xa6>
 80073c6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80073c8:	681b      	ldr	r3, [r3, #0]
 80073ca:	2b00      	cmp	r3, #0
 80073cc:	d1f1      	bne.n	80073b2 <pvPortMalloc+0x8a>
				}

				/* If the end marker was reached then a block of adequate size
				was	not found. */
				if( pxBlock != pxEnd )
 80073ce:	4b37      	ldr	r3, [pc, #220]	@ (80074ac <pvPortMalloc+0x184>)
 80073d0:	681b      	ldr	r3, [r3, #0]
 80073d2:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 80073d4:	429a      	cmp	r2, r3
 80073d6:	d051      	beq.n	800747c <pvPortMalloc+0x154>
				{
					/* Return the memory space pointed to - jumping over the
					BlockLink_t structure at its start. */
					pvReturn = ( void * ) ( ( ( uint8_t * ) pxPreviousBlock->pxNextFreeBlock ) + xHeapStructSize );
 80073d8:	6a3b      	ldr	r3, [r7, #32]
 80073da:	681b      	ldr	r3, [r3, #0]
 80073dc:	2208      	movs	r2, #8
 80073de:	4413      	add	r3, r2
 80073e0:	61fb      	str	r3, [r7, #28]

					/* This block is being returned for use so must be taken out
					of the list of free blocks. */
					pxPreviousBlock->pxNextFreeBlock = pxBlock->pxNextFreeBlock;
 80073e2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80073e4:	681a      	ldr	r2, [r3, #0]
 80073e6:	6a3b      	ldr	r3, [r7, #32]
 80073e8:	601a      	str	r2, [r3, #0]

					/* If the block is larger than required it can be split into
					two. */
					if( ( pxBlock->xBlockSize - xWantedSize ) > heapMINIMUM_BLOCK_SIZE )
 80073ea:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80073ec:	685a      	ldr	r2, [r3, #4]
 80073ee:	687b      	ldr	r3, [r7, #4]
 80073f0:	1ad2      	subs	r2, r2, r3
 80073f2:	2308      	movs	r3, #8
 80073f4:	005b      	lsls	r3, r3, #1
 80073f6:	429a      	cmp	r2, r3
 80073f8:	d920      	bls.n	800743c <pvPortMalloc+0x114>
					{
						/* This block is to be split into two.  Create a new
						block following the number of bytes requested. The void
						cast is used to prevent byte alignment warnings from the
						compiler. */
						pxNewBlockLink = ( void * ) ( ( ( uint8_t * ) pxBlock ) + xWantedSize );
 80073fa:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 80073fc:	687b      	ldr	r3, [r7, #4]
 80073fe:	4413      	add	r3, r2
 8007400:	61bb      	str	r3, [r7, #24]
						configASSERT( ( ( ( size_t ) pxNewBlockLink ) & portBYTE_ALIGNMENT_MASK ) == 0 );
 8007402:	69bb      	ldr	r3, [r7, #24]
 8007404:	f003 0307 	and.w	r3, r3, #7
 8007408:	2b00      	cmp	r3, #0
 800740a:	d00b      	beq.n	8007424 <pvPortMalloc+0xfc>
	__asm volatile
 800740c:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8007410:	f383 8811 	msr	BASEPRI, r3
 8007414:	f3bf 8f6f 	isb	sy
 8007418:	f3bf 8f4f 	dsb	sy
 800741c:	613b      	str	r3, [r7, #16]
}
 800741e:	bf00      	nop
 8007420:	bf00      	nop
 8007422:	e7fd      	b.n	8007420 <pvPortMalloc+0xf8>

						/* Calculate the sizes of two blocks split from the
						single block. */
						pxNewBlockLink->xBlockSize = pxBlock->xBlockSize - xWantedSize;
 8007424:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8007426:	685a      	ldr	r2, [r3, #4]
 8007428:	687b      	ldr	r3, [r7, #4]
 800742a:	1ad2      	subs	r2, r2, r3
 800742c:	69bb      	ldr	r3, [r7, #24]
 800742e:	605a      	str	r2, [r3, #4]
						pxBlock->xBlockSize = xWantedSize;
 8007430:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8007432:	687a      	ldr	r2, [r7, #4]
 8007434:	605a      	str	r2, [r3, #4]

						/* Insert the new block into the list of free blocks. */
						prvInsertBlockIntoFreeList( pxNewBlockLink );
 8007436:	69b8      	ldr	r0, [r7, #24]
 8007438:	f000 f90a 	bl	8007650 <prvInsertBlockIntoFreeList>
					else
					{
						mtCOVERAGE_TEST_MARKER();
					}

					xFreeBytesRemaining -= pxBlock->xBlockSize;
 800743c:	4b1d      	ldr	r3, [pc, #116]	@ (80074b4 <pvPortMalloc+0x18c>)
 800743e:	681a      	ldr	r2, [r3, #0]
 8007440:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8007442:	685b      	ldr	r3, [r3, #4]
 8007444:	1ad3      	subs	r3, r2, r3
 8007446:	4a1b      	ldr	r2, [pc, #108]	@ (80074b4 <pvPortMalloc+0x18c>)
 8007448:	6013      	str	r3, [r2, #0]

					if( xFreeBytesRemaining < xMinimumEverFreeBytesRemaining )
 800744a:	4b1a      	ldr	r3, [pc, #104]	@ (80074b4 <pvPortMalloc+0x18c>)
 800744c:	681a      	ldr	r2, [r3, #0]
 800744e:	4b1b      	ldr	r3, [pc, #108]	@ (80074bc <pvPortMalloc+0x194>)
 8007450:	681b      	ldr	r3, [r3, #0]
 8007452:	429a      	cmp	r2, r3
 8007454:	d203      	bcs.n	800745e <pvPortMalloc+0x136>
					{
						xMinimumEverFreeBytesRemaining = xFreeBytesRemaining;
 8007456:	4b17      	ldr	r3, [pc, #92]	@ (80074b4 <pvPortMalloc+0x18c>)
 8007458:	681b      	ldr	r3, [r3, #0]
 800745a:	4a18      	ldr	r2, [pc, #96]	@ (80074bc <pvPortMalloc+0x194>)
 800745c:	6013      	str	r3, [r2, #0]
						mtCOVERAGE_TEST_MARKER();
					}

					/* The block is being returned - it is allocated and owned
					by the application and has no "next" block. */
					pxBlock->xBlockSize |= xBlockAllocatedBit;
 800745e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8007460:	685a      	ldr	r2, [r3, #4]
 8007462:	4b13      	ldr	r3, [pc, #76]	@ (80074b0 <pvPortMalloc+0x188>)
 8007464:	681b      	ldr	r3, [r3, #0]
 8007466:	431a      	orrs	r2, r3
 8007468:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800746a:	605a      	str	r2, [r3, #4]
					pxBlock->pxNextFreeBlock = NULL;
 800746c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800746e:	2200      	movs	r2, #0
 8007470:	601a      	str	r2, [r3, #0]
					xNumberOfSuccessfulAllocations++;
 8007472:	4b13      	ldr	r3, [pc, #76]	@ (80074c0 <pvPortMalloc+0x198>)
 8007474:	681b      	ldr	r3, [r3, #0]
 8007476:	3301      	adds	r3, #1
 8007478:	4a11      	ldr	r2, [pc, #68]	@ (80074c0 <pvPortMalloc+0x198>)
 800747a:	6013      	str	r3, [r2, #0]
			mtCOVERAGE_TEST_MARKER();
		}

		traceMALLOC( pvReturn, xWantedSize );
	}
	( void ) xTaskResumeAll();
 800747c:	f7fe ff76 	bl	800636c <xTaskResumeAll>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif

	configASSERT( ( ( ( size_t ) pvReturn ) & ( size_t ) portBYTE_ALIGNMENT_MASK ) == 0 );
 8007480:	69fb      	ldr	r3, [r7, #28]
 8007482:	f003 0307 	and.w	r3, r3, #7
 8007486:	2b00      	cmp	r3, #0
 8007488:	d00b      	beq.n	80074a2 <pvPortMalloc+0x17a>
	__asm volatile
 800748a:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800748e:	f383 8811 	msr	BASEPRI, r3
 8007492:	f3bf 8f6f 	isb	sy
 8007496:	f3bf 8f4f 	dsb	sy
 800749a:	60fb      	str	r3, [r7, #12]
}
 800749c:	bf00      	nop
 800749e:	bf00      	nop
 80074a0:	e7fd      	b.n	800749e <pvPortMalloc+0x176>
	return pvReturn;
 80074a2:	69fb      	ldr	r3, [r7, #28]
}
 80074a4:	4618      	mov	r0, r3
 80074a6:	3728      	adds	r7, #40	@ 0x28
 80074a8:	46bd      	mov	sp, r7
 80074aa:	bd80      	pop	{r7, pc}
 80074ac:	20004154 	.word	0x20004154
 80074b0:	20004168 	.word	0x20004168
 80074b4:	20004158 	.word	0x20004158
 80074b8:	2000414c 	.word	0x2000414c
 80074bc:	2000415c 	.word	0x2000415c
 80074c0:	20004160 	.word	0x20004160

080074c4 <vPortFree>:
/*-----------------------------------------------------------*/

void vPortFree( void *pv )
{
 80074c4:	b580      	push	{r7, lr}
 80074c6:	b086      	sub	sp, #24
 80074c8:	af00      	add	r7, sp, #0
 80074ca:	6078      	str	r0, [r7, #4]
uint8_t *puc = ( uint8_t * ) pv;
 80074cc:	687b      	ldr	r3, [r7, #4]
 80074ce:	617b      	str	r3, [r7, #20]
BlockLink_t *pxLink;

	if( pv != NULL )
 80074d0:	687b      	ldr	r3, [r7, #4]
 80074d2:	2b00      	cmp	r3, #0
 80074d4:	d04f      	beq.n	8007576 <vPortFree+0xb2>
	{
		/* The memory being freed will have an BlockLink_t structure immediately
		before it. */
		puc -= xHeapStructSize;
 80074d6:	2308      	movs	r3, #8
 80074d8:	425b      	negs	r3, r3
 80074da:	697a      	ldr	r2, [r7, #20]
 80074dc:	4413      	add	r3, r2
 80074de:	617b      	str	r3, [r7, #20]

		/* This casting is to keep the compiler from issuing warnings. */
		pxLink = ( void * ) puc;
 80074e0:	697b      	ldr	r3, [r7, #20]
 80074e2:	613b      	str	r3, [r7, #16]

		/* Check the block is actually allocated. */
		configASSERT( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 );
 80074e4:	693b      	ldr	r3, [r7, #16]
 80074e6:	685a      	ldr	r2, [r3, #4]
 80074e8:	4b25      	ldr	r3, [pc, #148]	@ (8007580 <vPortFree+0xbc>)
 80074ea:	681b      	ldr	r3, [r3, #0]
 80074ec:	4013      	ands	r3, r2
 80074ee:	2b00      	cmp	r3, #0
 80074f0:	d10b      	bne.n	800750a <vPortFree+0x46>
	__asm volatile
 80074f2:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80074f6:	f383 8811 	msr	BASEPRI, r3
 80074fa:	f3bf 8f6f 	isb	sy
 80074fe:	f3bf 8f4f 	dsb	sy
 8007502:	60fb      	str	r3, [r7, #12]
}
 8007504:	bf00      	nop
 8007506:	bf00      	nop
 8007508:	e7fd      	b.n	8007506 <vPortFree+0x42>
		configASSERT( pxLink->pxNextFreeBlock == NULL );
 800750a:	693b      	ldr	r3, [r7, #16]
 800750c:	681b      	ldr	r3, [r3, #0]
 800750e:	2b00      	cmp	r3, #0
 8007510:	d00b      	beq.n	800752a <vPortFree+0x66>
	__asm volatile
 8007512:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8007516:	f383 8811 	msr	BASEPRI, r3
 800751a:	f3bf 8f6f 	isb	sy
 800751e:	f3bf 8f4f 	dsb	sy
 8007522:	60bb      	str	r3, [r7, #8]
}
 8007524:	bf00      	nop
 8007526:	bf00      	nop
 8007528:	e7fd      	b.n	8007526 <vPortFree+0x62>

		if( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 )
 800752a:	693b      	ldr	r3, [r7, #16]
 800752c:	685a      	ldr	r2, [r3, #4]
 800752e:	4b14      	ldr	r3, [pc, #80]	@ (8007580 <vPortFree+0xbc>)
 8007530:	681b      	ldr	r3, [r3, #0]
 8007532:	4013      	ands	r3, r2
 8007534:	2b00      	cmp	r3, #0
 8007536:	d01e      	beq.n	8007576 <vPortFree+0xb2>
		{
			if( pxLink->pxNextFreeBlock == NULL )
 8007538:	693b      	ldr	r3, [r7, #16]
 800753a:	681b      	ldr	r3, [r3, #0]
 800753c:	2b00      	cmp	r3, #0
 800753e:	d11a      	bne.n	8007576 <vPortFree+0xb2>
			{
				/* The block is being returned to the heap - it is no longer
				allocated. */
				pxLink->xBlockSize &= ~xBlockAllocatedBit;
 8007540:	693b      	ldr	r3, [r7, #16]
 8007542:	685a      	ldr	r2, [r3, #4]
 8007544:	4b0e      	ldr	r3, [pc, #56]	@ (8007580 <vPortFree+0xbc>)
 8007546:	681b      	ldr	r3, [r3, #0]
 8007548:	43db      	mvns	r3, r3
 800754a:	401a      	ands	r2, r3
 800754c:	693b      	ldr	r3, [r7, #16]
 800754e:	605a      	str	r2, [r3, #4]

				vTaskSuspendAll();
 8007550:	f7fe fefe 	bl	8006350 <vTaskSuspendAll>
				{
					/* Add this block to the list of free blocks. */
					xFreeBytesRemaining += pxLink->xBlockSize;
 8007554:	693b      	ldr	r3, [r7, #16]
 8007556:	685a      	ldr	r2, [r3, #4]
 8007558:	4b0a      	ldr	r3, [pc, #40]	@ (8007584 <vPortFree+0xc0>)
 800755a:	681b      	ldr	r3, [r3, #0]
 800755c:	4413      	add	r3, r2
 800755e:	4a09      	ldr	r2, [pc, #36]	@ (8007584 <vPortFree+0xc0>)
 8007560:	6013      	str	r3, [r2, #0]
					traceFREE( pv, pxLink->xBlockSize );
					prvInsertBlockIntoFreeList( ( ( BlockLink_t * ) pxLink ) );
 8007562:	6938      	ldr	r0, [r7, #16]
 8007564:	f000 f874 	bl	8007650 <prvInsertBlockIntoFreeList>
					xNumberOfSuccessfulFrees++;
 8007568:	4b07      	ldr	r3, [pc, #28]	@ (8007588 <vPortFree+0xc4>)
 800756a:	681b      	ldr	r3, [r3, #0]
 800756c:	3301      	adds	r3, #1
 800756e:	4a06      	ldr	r2, [pc, #24]	@ (8007588 <vPortFree+0xc4>)
 8007570:	6013      	str	r3, [r2, #0]
				}
				( void ) xTaskResumeAll();
 8007572:	f7fe fefb 	bl	800636c <xTaskResumeAll>
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
}
 8007576:	bf00      	nop
 8007578:	3718      	adds	r7, #24
 800757a:	46bd      	mov	sp, r7
 800757c:	bd80      	pop	{r7, pc}
 800757e:	bf00      	nop
 8007580:	20004168 	.word	0x20004168
 8007584:	20004158 	.word	0x20004158
 8007588:	20004164 	.word	0x20004164

0800758c <prvHeapInit>:
	/* This just exists to keep the linker quiet. */
}
/*-----------------------------------------------------------*/

static void prvHeapInit( void )
{
 800758c:	b480      	push	{r7}
 800758e:	b085      	sub	sp, #20
 8007590:	af00      	add	r7, sp, #0
BlockLink_t *pxFirstFreeBlock;
uint8_t *pucAlignedHeap;
size_t uxAddress;
size_t xTotalHeapSize = configTOTAL_HEAP_SIZE;
 8007592:	f44f 5370 	mov.w	r3, #15360	@ 0x3c00
 8007596:	60bb      	str	r3, [r7, #8]

	/* Ensure the heap starts on a correctly aligned boundary. */
	uxAddress = ( size_t ) ucHeap;
 8007598:	4b27      	ldr	r3, [pc, #156]	@ (8007638 <prvHeapInit+0xac>)
 800759a:	60fb      	str	r3, [r7, #12]

	if( ( uxAddress & portBYTE_ALIGNMENT_MASK ) != 0 )
 800759c:	68fb      	ldr	r3, [r7, #12]
 800759e:	f003 0307 	and.w	r3, r3, #7
 80075a2:	2b00      	cmp	r3, #0
 80075a4:	d00c      	beq.n	80075c0 <prvHeapInit+0x34>
	{
		uxAddress += ( portBYTE_ALIGNMENT - 1 );
 80075a6:	68fb      	ldr	r3, [r7, #12]
 80075a8:	3307      	adds	r3, #7
 80075aa:	60fb      	str	r3, [r7, #12]
		uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 80075ac:	68fb      	ldr	r3, [r7, #12]
 80075ae:	f023 0307 	bic.w	r3, r3, #7
 80075b2:	60fb      	str	r3, [r7, #12]
		xTotalHeapSize -= uxAddress - ( size_t ) ucHeap;
 80075b4:	68ba      	ldr	r2, [r7, #8]
 80075b6:	68fb      	ldr	r3, [r7, #12]
 80075b8:	1ad3      	subs	r3, r2, r3
 80075ba:	4a1f      	ldr	r2, [pc, #124]	@ (8007638 <prvHeapInit+0xac>)
 80075bc:	4413      	add	r3, r2
 80075be:	60bb      	str	r3, [r7, #8]
	}

	pucAlignedHeap = ( uint8_t * ) uxAddress;
 80075c0:	68fb      	ldr	r3, [r7, #12]
 80075c2:	607b      	str	r3, [r7, #4]

	/* xStart is used to hold a pointer to the first item in the list of free
	blocks.  The void cast is used to prevent compiler warnings. */
	xStart.pxNextFreeBlock = ( void * ) pucAlignedHeap;
 80075c4:	4a1d      	ldr	r2, [pc, #116]	@ (800763c <prvHeapInit+0xb0>)
 80075c6:	687b      	ldr	r3, [r7, #4]
 80075c8:	6013      	str	r3, [r2, #0]
	xStart.xBlockSize = ( size_t ) 0;
 80075ca:	4b1c      	ldr	r3, [pc, #112]	@ (800763c <prvHeapInit+0xb0>)
 80075cc:	2200      	movs	r2, #0
 80075ce:	605a      	str	r2, [r3, #4]

	/* pxEnd is used to mark the end of the list of free blocks and is inserted
	at the end of the heap space. */
	uxAddress = ( ( size_t ) pucAlignedHeap ) + xTotalHeapSize;
 80075d0:	687b      	ldr	r3, [r7, #4]
 80075d2:	68ba      	ldr	r2, [r7, #8]
 80075d4:	4413      	add	r3, r2
 80075d6:	60fb      	str	r3, [r7, #12]
	uxAddress -= xHeapStructSize;
 80075d8:	2208      	movs	r2, #8
 80075da:	68fb      	ldr	r3, [r7, #12]
 80075dc:	1a9b      	subs	r3, r3, r2
 80075de:	60fb      	str	r3, [r7, #12]
	uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 80075e0:	68fb      	ldr	r3, [r7, #12]
 80075e2:	f023 0307 	bic.w	r3, r3, #7
 80075e6:	60fb      	str	r3, [r7, #12]
	pxEnd = ( void * ) uxAddress;
 80075e8:	68fb      	ldr	r3, [r7, #12]
 80075ea:	4a15      	ldr	r2, [pc, #84]	@ (8007640 <prvHeapInit+0xb4>)
 80075ec:	6013      	str	r3, [r2, #0]
	pxEnd->xBlockSize = 0;
 80075ee:	4b14      	ldr	r3, [pc, #80]	@ (8007640 <prvHeapInit+0xb4>)
 80075f0:	681b      	ldr	r3, [r3, #0]
 80075f2:	2200      	movs	r2, #0
 80075f4:	605a      	str	r2, [r3, #4]
	pxEnd->pxNextFreeBlock = NULL;
 80075f6:	4b12      	ldr	r3, [pc, #72]	@ (8007640 <prvHeapInit+0xb4>)
 80075f8:	681b      	ldr	r3, [r3, #0]
 80075fa:	2200      	movs	r2, #0
 80075fc:	601a      	str	r2, [r3, #0]

	/* To start with there is a single free block that is sized to take up the
	entire heap space, minus the space taken by pxEnd. */
	pxFirstFreeBlock = ( void * ) pucAlignedHeap;
 80075fe:	687b      	ldr	r3, [r7, #4]
 8007600:	603b      	str	r3, [r7, #0]
	pxFirstFreeBlock->xBlockSize = uxAddress - ( size_t ) pxFirstFreeBlock;
 8007602:	683b      	ldr	r3, [r7, #0]
 8007604:	68fa      	ldr	r2, [r7, #12]
 8007606:	1ad2      	subs	r2, r2, r3
 8007608:	683b      	ldr	r3, [r7, #0]
 800760a:	605a      	str	r2, [r3, #4]
	pxFirstFreeBlock->pxNextFreeBlock = pxEnd;
 800760c:	4b0c      	ldr	r3, [pc, #48]	@ (8007640 <prvHeapInit+0xb4>)
 800760e:	681a      	ldr	r2, [r3, #0]
 8007610:	683b      	ldr	r3, [r7, #0]
 8007612:	601a      	str	r2, [r3, #0]

	/* Only one block exists - and it covers the entire usable heap space. */
	xMinimumEverFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 8007614:	683b      	ldr	r3, [r7, #0]
 8007616:	685b      	ldr	r3, [r3, #4]
 8007618:	4a0a      	ldr	r2, [pc, #40]	@ (8007644 <prvHeapInit+0xb8>)
 800761a:	6013      	str	r3, [r2, #0]
	xFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 800761c:	683b      	ldr	r3, [r7, #0]
 800761e:	685b      	ldr	r3, [r3, #4]
 8007620:	4a09      	ldr	r2, [pc, #36]	@ (8007648 <prvHeapInit+0xbc>)
 8007622:	6013      	str	r3, [r2, #0]

	/* Work out the position of the top bit in a size_t variable. */
	xBlockAllocatedBit = ( ( size_t ) 1 ) << ( ( sizeof( size_t ) * heapBITS_PER_BYTE ) - 1 );
 8007624:	4b09      	ldr	r3, [pc, #36]	@ (800764c <prvHeapInit+0xc0>)
 8007626:	f04f 4200 	mov.w	r2, #2147483648	@ 0x80000000
 800762a:	601a      	str	r2, [r3, #0]
}
 800762c:	bf00      	nop
 800762e:	3714      	adds	r7, #20
 8007630:	46bd      	mov	sp, r7
 8007632:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007636:	4770      	bx	lr
 8007638:	2000054c 	.word	0x2000054c
 800763c:	2000414c 	.word	0x2000414c
 8007640:	20004154 	.word	0x20004154
 8007644:	2000415c 	.word	0x2000415c
 8007648:	20004158 	.word	0x20004158
 800764c:	20004168 	.word	0x20004168

08007650 <prvInsertBlockIntoFreeList>:
/*-----------------------------------------------------------*/

static void prvInsertBlockIntoFreeList( BlockLink_t *pxBlockToInsert )
{
 8007650:	b480      	push	{r7}
 8007652:	b085      	sub	sp, #20
 8007654:	af00      	add	r7, sp, #0
 8007656:	6078      	str	r0, [r7, #4]
BlockLink_t *pxIterator;
uint8_t *puc;

	/* Iterate through the list until a block is found that has a higher address
	than the block being inserted. */
	for( pxIterator = &xStart; pxIterator->pxNextFreeBlock < pxBlockToInsert; pxIterator = pxIterator->pxNextFreeBlock )
 8007658:	4b28      	ldr	r3, [pc, #160]	@ (80076fc <prvInsertBlockIntoFreeList+0xac>)
 800765a:	60fb      	str	r3, [r7, #12]
 800765c:	e002      	b.n	8007664 <prvInsertBlockIntoFreeList+0x14>
 800765e:	68fb      	ldr	r3, [r7, #12]
 8007660:	681b      	ldr	r3, [r3, #0]
 8007662:	60fb      	str	r3, [r7, #12]
 8007664:	68fb      	ldr	r3, [r7, #12]
 8007666:	681b      	ldr	r3, [r3, #0]
 8007668:	687a      	ldr	r2, [r7, #4]
 800766a:	429a      	cmp	r2, r3
 800766c:	d8f7      	bhi.n	800765e <prvInsertBlockIntoFreeList+0xe>
		/* Nothing to do here, just iterate to the right position. */
	}

	/* Do the block being inserted, and the block it is being inserted after
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxIterator;
 800766e:	68fb      	ldr	r3, [r7, #12]
 8007670:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxIterator->xBlockSize ) == ( uint8_t * ) pxBlockToInsert )
 8007672:	68fb      	ldr	r3, [r7, #12]
 8007674:	685b      	ldr	r3, [r3, #4]
 8007676:	68ba      	ldr	r2, [r7, #8]
 8007678:	4413      	add	r3, r2
 800767a:	687a      	ldr	r2, [r7, #4]
 800767c:	429a      	cmp	r2, r3
 800767e:	d108      	bne.n	8007692 <prvInsertBlockIntoFreeList+0x42>
	{
		pxIterator->xBlockSize += pxBlockToInsert->xBlockSize;
 8007680:	68fb      	ldr	r3, [r7, #12]
 8007682:	685a      	ldr	r2, [r3, #4]
 8007684:	687b      	ldr	r3, [r7, #4]
 8007686:	685b      	ldr	r3, [r3, #4]
 8007688:	441a      	add	r2, r3
 800768a:	68fb      	ldr	r3, [r7, #12]
 800768c:	605a      	str	r2, [r3, #4]
		pxBlockToInsert = pxIterator;
 800768e:	68fb      	ldr	r3, [r7, #12]
 8007690:	607b      	str	r3, [r7, #4]
		mtCOVERAGE_TEST_MARKER();
	}

	/* Do the block being inserted, and the block it is being inserted before
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxBlockToInsert;
 8007692:	687b      	ldr	r3, [r7, #4]
 8007694:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxBlockToInsert->xBlockSize ) == ( uint8_t * ) pxIterator->pxNextFreeBlock )
 8007696:	687b      	ldr	r3, [r7, #4]
 8007698:	685b      	ldr	r3, [r3, #4]
 800769a:	68ba      	ldr	r2, [r7, #8]
 800769c:	441a      	add	r2, r3
 800769e:	68fb      	ldr	r3, [r7, #12]
 80076a0:	681b      	ldr	r3, [r3, #0]
 80076a2:	429a      	cmp	r2, r3
 80076a4:	d118      	bne.n	80076d8 <prvInsertBlockIntoFreeList+0x88>
	{
		if( pxIterator->pxNextFreeBlock != pxEnd )
 80076a6:	68fb      	ldr	r3, [r7, #12]
 80076a8:	681a      	ldr	r2, [r3, #0]
 80076aa:	4b15      	ldr	r3, [pc, #84]	@ (8007700 <prvInsertBlockIntoFreeList+0xb0>)
 80076ac:	681b      	ldr	r3, [r3, #0]
 80076ae:	429a      	cmp	r2, r3
 80076b0:	d00d      	beq.n	80076ce <prvInsertBlockIntoFreeList+0x7e>
		{
			/* Form one big block from the two blocks. */
			pxBlockToInsert->xBlockSize += pxIterator->pxNextFreeBlock->xBlockSize;
 80076b2:	687b      	ldr	r3, [r7, #4]
 80076b4:	685a      	ldr	r2, [r3, #4]
 80076b6:	68fb      	ldr	r3, [r7, #12]
 80076b8:	681b      	ldr	r3, [r3, #0]
 80076ba:	685b      	ldr	r3, [r3, #4]
 80076bc:	441a      	add	r2, r3
 80076be:	687b      	ldr	r3, [r7, #4]
 80076c0:	605a      	str	r2, [r3, #4]
			pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock->pxNextFreeBlock;
 80076c2:	68fb      	ldr	r3, [r7, #12]
 80076c4:	681b      	ldr	r3, [r3, #0]
 80076c6:	681a      	ldr	r2, [r3, #0]
 80076c8:	687b      	ldr	r3, [r7, #4]
 80076ca:	601a      	str	r2, [r3, #0]
 80076cc:	e008      	b.n	80076e0 <prvInsertBlockIntoFreeList+0x90>
		}
		else
		{
			pxBlockToInsert->pxNextFreeBlock = pxEnd;
 80076ce:	4b0c      	ldr	r3, [pc, #48]	@ (8007700 <prvInsertBlockIntoFreeList+0xb0>)
 80076d0:	681a      	ldr	r2, [r3, #0]
 80076d2:	687b      	ldr	r3, [r7, #4]
 80076d4:	601a      	str	r2, [r3, #0]
 80076d6:	e003      	b.n	80076e0 <prvInsertBlockIntoFreeList+0x90>
		}
	}
	else
	{
		pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock;
 80076d8:	68fb      	ldr	r3, [r7, #12]
 80076da:	681a      	ldr	r2, [r3, #0]
 80076dc:	687b      	ldr	r3, [r7, #4]
 80076de:	601a      	str	r2, [r3, #0]

	/* If the block being inserted plugged a gab, so was merged with the block
	before and the block after, then it's pxNextFreeBlock pointer will have
	already been set, and should not be set here as that would make it point
	to itself. */
	if( pxIterator != pxBlockToInsert )
 80076e0:	68fa      	ldr	r2, [r7, #12]
 80076e2:	687b      	ldr	r3, [r7, #4]
 80076e4:	429a      	cmp	r2, r3
 80076e6:	d002      	beq.n	80076ee <prvInsertBlockIntoFreeList+0x9e>
	{
		pxIterator->pxNextFreeBlock = pxBlockToInsert;
 80076e8:	68fb      	ldr	r3, [r7, #12]
 80076ea:	687a      	ldr	r2, [r7, #4]
 80076ec:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 80076ee:	bf00      	nop
 80076f0:	3714      	adds	r7, #20
 80076f2:	46bd      	mov	sp, r7
 80076f4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80076f8:	4770      	bx	lr
 80076fa:	bf00      	nop
 80076fc:	2000414c 	.word	0x2000414c
 8007700:	20004154 	.word	0x20004154

08007704 <memset>:
 8007704:	4402      	add	r2, r0
 8007706:	4603      	mov	r3, r0
 8007708:	4293      	cmp	r3, r2
 800770a:	d100      	bne.n	800770e <memset+0xa>
 800770c:	4770      	bx	lr
 800770e:	f803 1b01 	strb.w	r1, [r3], #1
 8007712:	e7f9      	b.n	8007708 <memset+0x4>

08007714 <_reclaim_reent>:
 8007714:	4b29      	ldr	r3, [pc, #164]	@ (80077bc <_reclaim_reent+0xa8>)
 8007716:	681b      	ldr	r3, [r3, #0]
 8007718:	4283      	cmp	r3, r0
 800771a:	b570      	push	{r4, r5, r6, lr}
 800771c:	4604      	mov	r4, r0
 800771e:	d04b      	beq.n	80077b8 <_reclaim_reent+0xa4>
 8007720:	69c3      	ldr	r3, [r0, #28]
 8007722:	b1ab      	cbz	r3, 8007750 <_reclaim_reent+0x3c>
 8007724:	68db      	ldr	r3, [r3, #12]
 8007726:	b16b      	cbz	r3, 8007744 <_reclaim_reent+0x30>
 8007728:	2500      	movs	r5, #0
 800772a:	69e3      	ldr	r3, [r4, #28]
 800772c:	68db      	ldr	r3, [r3, #12]
 800772e:	5959      	ldr	r1, [r3, r5]
 8007730:	2900      	cmp	r1, #0
 8007732:	d13b      	bne.n	80077ac <_reclaim_reent+0x98>
 8007734:	3504      	adds	r5, #4
 8007736:	2d80      	cmp	r5, #128	@ 0x80
 8007738:	d1f7      	bne.n	800772a <_reclaim_reent+0x16>
 800773a:	69e3      	ldr	r3, [r4, #28]
 800773c:	4620      	mov	r0, r4
 800773e:	68d9      	ldr	r1, [r3, #12]
 8007740:	f000 f872 	bl	8007828 <_free_r>
 8007744:	69e3      	ldr	r3, [r4, #28]
 8007746:	6819      	ldr	r1, [r3, #0]
 8007748:	b111      	cbz	r1, 8007750 <_reclaim_reent+0x3c>
 800774a:	4620      	mov	r0, r4
 800774c:	f000 f86c 	bl	8007828 <_free_r>
 8007750:	6961      	ldr	r1, [r4, #20]
 8007752:	b111      	cbz	r1, 800775a <_reclaim_reent+0x46>
 8007754:	4620      	mov	r0, r4
 8007756:	f000 f867 	bl	8007828 <_free_r>
 800775a:	69e1      	ldr	r1, [r4, #28]
 800775c:	b111      	cbz	r1, 8007764 <_reclaim_reent+0x50>
 800775e:	4620      	mov	r0, r4
 8007760:	f000 f862 	bl	8007828 <_free_r>
 8007764:	6b21      	ldr	r1, [r4, #48]	@ 0x30
 8007766:	b111      	cbz	r1, 800776e <_reclaim_reent+0x5a>
 8007768:	4620      	mov	r0, r4
 800776a:	f000 f85d 	bl	8007828 <_free_r>
 800776e:	6b61      	ldr	r1, [r4, #52]	@ 0x34
 8007770:	b111      	cbz	r1, 8007778 <_reclaim_reent+0x64>
 8007772:	4620      	mov	r0, r4
 8007774:	f000 f858 	bl	8007828 <_free_r>
 8007778:	6ba1      	ldr	r1, [r4, #56]	@ 0x38
 800777a:	b111      	cbz	r1, 8007782 <_reclaim_reent+0x6e>
 800777c:	4620      	mov	r0, r4
 800777e:	f000 f853 	bl	8007828 <_free_r>
 8007782:	6ca1      	ldr	r1, [r4, #72]	@ 0x48
 8007784:	b111      	cbz	r1, 800778c <_reclaim_reent+0x78>
 8007786:	4620      	mov	r0, r4
 8007788:	f000 f84e 	bl	8007828 <_free_r>
 800778c:	6c61      	ldr	r1, [r4, #68]	@ 0x44
 800778e:	b111      	cbz	r1, 8007796 <_reclaim_reent+0x82>
 8007790:	4620      	mov	r0, r4
 8007792:	f000 f849 	bl	8007828 <_free_r>
 8007796:	6ae1      	ldr	r1, [r4, #44]	@ 0x2c
 8007798:	b111      	cbz	r1, 80077a0 <_reclaim_reent+0x8c>
 800779a:	4620      	mov	r0, r4
 800779c:	f000 f844 	bl	8007828 <_free_r>
 80077a0:	6a23      	ldr	r3, [r4, #32]
 80077a2:	b14b      	cbz	r3, 80077b8 <_reclaim_reent+0xa4>
 80077a4:	4620      	mov	r0, r4
 80077a6:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
 80077aa:	4718      	bx	r3
 80077ac:	680e      	ldr	r6, [r1, #0]
 80077ae:	4620      	mov	r0, r4
 80077b0:	f000 f83a 	bl	8007828 <_free_r>
 80077b4:	4631      	mov	r1, r6
 80077b6:	e7bb      	b.n	8007730 <_reclaim_reent+0x1c>
 80077b8:	bd70      	pop	{r4, r5, r6, pc}
 80077ba:	bf00      	nop
 80077bc:	20000010 	.word	0x20000010

080077c0 <__libc_init_array>:
 80077c0:	b570      	push	{r4, r5, r6, lr}
 80077c2:	4d0d      	ldr	r5, [pc, #52]	@ (80077f8 <__libc_init_array+0x38>)
 80077c4:	4c0d      	ldr	r4, [pc, #52]	@ (80077fc <__libc_init_array+0x3c>)
 80077c6:	1b64      	subs	r4, r4, r5
 80077c8:	10a4      	asrs	r4, r4, #2
 80077ca:	2600      	movs	r6, #0
 80077cc:	42a6      	cmp	r6, r4
 80077ce:	d109      	bne.n	80077e4 <__libc_init_array+0x24>
 80077d0:	4d0b      	ldr	r5, [pc, #44]	@ (8007800 <__libc_init_array+0x40>)
 80077d2:	4c0c      	ldr	r4, [pc, #48]	@ (8007804 <__libc_init_array+0x44>)
 80077d4:	f000 f87e 	bl	80078d4 <_init>
 80077d8:	1b64      	subs	r4, r4, r5
 80077da:	10a4      	asrs	r4, r4, #2
 80077dc:	2600      	movs	r6, #0
 80077de:	42a6      	cmp	r6, r4
 80077e0:	d105      	bne.n	80077ee <__libc_init_array+0x2e>
 80077e2:	bd70      	pop	{r4, r5, r6, pc}
 80077e4:	f855 3b04 	ldr.w	r3, [r5], #4
 80077e8:	4798      	blx	r3
 80077ea:	3601      	adds	r6, #1
 80077ec:	e7ee      	b.n	80077cc <__libc_init_array+0xc>
 80077ee:	f855 3b04 	ldr.w	r3, [r5], #4
 80077f2:	4798      	blx	r3
 80077f4:	3601      	adds	r6, #1
 80077f6:	e7f2      	b.n	80077de <__libc_init_array+0x1e>
 80077f8:	0800798c 	.word	0x0800798c
 80077fc:	0800798c 	.word	0x0800798c
 8007800:	0800798c 	.word	0x0800798c
 8007804:	08007990 	.word	0x08007990

08007808 <__retarget_lock_acquire_recursive>:
 8007808:	4770      	bx	lr

0800780a <__retarget_lock_release_recursive>:
 800780a:	4770      	bx	lr

0800780c <memcpy>:
 800780c:	440a      	add	r2, r1
 800780e:	4291      	cmp	r1, r2
 8007810:	f100 33ff 	add.w	r3, r0, #4294967295
 8007814:	d100      	bne.n	8007818 <memcpy+0xc>
 8007816:	4770      	bx	lr
 8007818:	b510      	push	{r4, lr}
 800781a:	f811 4b01 	ldrb.w	r4, [r1], #1
 800781e:	f803 4f01 	strb.w	r4, [r3, #1]!
 8007822:	4291      	cmp	r1, r2
 8007824:	d1f9      	bne.n	800781a <memcpy+0xe>
 8007826:	bd10      	pop	{r4, pc}

08007828 <_free_r>:
 8007828:	b538      	push	{r3, r4, r5, lr}
 800782a:	4605      	mov	r5, r0
 800782c:	2900      	cmp	r1, #0
 800782e:	d041      	beq.n	80078b4 <_free_r+0x8c>
 8007830:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8007834:	1f0c      	subs	r4, r1, #4
 8007836:	2b00      	cmp	r3, #0
 8007838:	bfb8      	it	lt
 800783a:	18e4      	addlt	r4, r4, r3
 800783c:	f000 f83e 	bl	80078bc <__malloc_lock>
 8007840:	4a1d      	ldr	r2, [pc, #116]	@ (80078b8 <_free_r+0x90>)
 8007842:	6813      	ldr	r3, [r2, #0]
 8007844:	b933      	cbnz	r3, 8007854 <_free_r+0x2c>
 8007846:	6063      	str	r3, [r4, #4]
 8007848:	6014      	str	r4, [r2, #0]
 800784a:	4628      	mov	r0, r5
 800784c:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8007850:	f000 b83a 	b.w	80078c8 <__malloc_unlock>
 8007854:	42a3      	cmp	r3, r4
 8007856:	d908      	bls.n	800786a <_free_r+0x42>
 8007858:	6820      	ldr	r0, [r4, #0]
 800785a:	1821      	adds	r1, r4, r0
 800785c:	428b      	cmp	r3, r1
 800785e:	bf01      	itttt	eq
 8007860:	6819      	ldreq	r1, [r3, #0]
 8007862:	685b      	ldreq	r3, [r3, #4]
 8007864:	1809      	addeq	r1, r1, r0
 8007866:	6021      	streq	r1, [r4, #0]
 8007868:	e7ed      	b.n	8007846 <_free_r+0x1e>
 800786a:	461a      	mov	r2, r3
 800786c:	685b      	ldr	r3, [r3, #4]
 800786e:	b10b      	cbz	r3, 8007874 <_free_r+0x4c>
 8007870:	42a3      	cmp	r3, r4
 8007872:	d9fa      	bls.n	800786a <_free_r+0x42>
 8007874:	6811      	ldr	r1, [r2, #0]
 8007876:	1850      	adds	r0, r2, r1
 8007878:	42a0      	cmp	r0, r4
 800787a:	d10b      	bne.n	8007894 <_free_r+0x6c>
 800787c:	6820      	ldr	r0, [r4, #0]
 800787e:	4401      	add	r1, r0
 8007880:	1850      	adds	r0, r2, r1
 8007882:	4283      	cmp	r3, r0
 8007884:	6011      	str	r1, [r2, #0]
 8007886:	d1e0      	bne.n	800784a <_free_r+0x22>
 8007888:	6818      	ldr	r0, [r3, #0]
 800788a:	685b      	ldr	r3, [r3, #4]
 800788c:	6053      	str	r3, [r2, #4]
 800788e:	4408      	add	r0, r1
 8007890:	6010      	str	r0, [r2, #0]
 8007892:	e7da      	b.n	800784a <_free_r+0x22>
 8007894:	d902      	bls.n	800789c <_free_r+0x74>
 8007896:	230c      	movs	r3, #12
 8007898:	602b      	str	r3, [r5, #0]
 800789a:	e7d6      	b.n	800784a <_free_r+0x22>
 800789c:	6820      	ldr	r0, [r4, #0]
 800789e:	1821      	adds	r1, r4, r0
 80078a0:	428b      	cmp	r3, r1
 80078a2:	bf04      	itt	eq
 80078a4:	6819      	ldreq	r1, [r3, #0]
 80078a6:	685b      	ldreq	r3, [r3, #4]
 80078a8:	6063      	str	r3, [r4, #4]
 80078aa:	bf04      	itt	eq
 80078ac:	1809      	addeq	r1, r1, r0
 80078ae:	6021      	streq	r1, [r4, #0]
 80078b0:	6054      	str	r4, [r2, #4]
 80078b2:	e7ca      	b.n	800784a <_free_r+0x22>
 80078b4:	bd38      	pop	{r3, r4, r5, pc}
 80078b6:	bf00      	nop
 80078b8:	200042a8 	.word	0x200042a8

080078bc <__malloc_lock>:
 80078bc:	4801      	ldr	r0, [pc, #4]	@ (80078c4 <__malloc_lock+0x8>)
 80078be:	f7ff bfa3 	b.w	8007808 <__retarget_lock_acquire_recursive>
 80078c2:	bf00      	nop
 80078c4:	200042a4 	.word	0x200042a4

080078c8 <__malloc_unlock>:
 80078c8:	4801      	ldr	r0, [pc, #4]	@ (80078d0 <__malloc_unlock+0x8>)
 80078ca:	f7ff bf9e 	b.w	800780a <__retarget_lock_release_recursive>
 80078ce:	bf00      	nop
 80078d0:	200042a4 	.word	0x200042a4

080078d4 <_init>:
 80078d4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80078d6:	bf00      	nop
 80078d8:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80078da:	bc08      	pop	{r3}
 80078dc:	469e      	mov	lr, r3
 80078de:	4770      	bx	lr

080078e0 <_fini>:
 80078e0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80078e2:	bf00      	nop
 80078e4:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80078e6:	bc08      	pop	{r3}
 80078e8:	469e      	mov	lr, r3
 80078ea:	4770      	bx	lr
